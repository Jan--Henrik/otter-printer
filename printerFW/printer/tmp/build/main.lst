ARM GAS  /tmp/cczUoBVm.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.dataTransmittedHandler0,"ax",%progbits
  16              		.align	1
  17              		.global	dataTransmittedHandler0
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	dataTransmittedHandler0:
  25              	.LVL0:
  26              	.LFB38:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** #include "main.h"
   2:Src/main.c    **** #include "usb_device.h"
   3:Src/main.c    **** 
   4:Src/main.c    **** TIM_HandleTypeDef htim1;
   5:Src/main.c    **** TIM_HandleTypeDef htim2;
   6:Src/main.c    **** TIM_HandleTypeDef htim3;
   7:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch1;
   8:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch4;
   9:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch3;
  10:Src/main.c    **** 
  11:Src/main.c    **** UART_HandleTypeDef huart3;
  12:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_rx;
  13:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_tx;
  14:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_uev;
  15:Src/main.c    **** 
  16:Src/main.c    **** uint16_t PER = 30;
  17:Src/main.c    **** 
  18:Src/main.c    **** void SystemClock_Config(void);
  19:Src/main.c    **** static void MX_GPIO_Init(void);
  20:Src/main.c    **** static void MX_DMA_Init(void);
  21:Src/main.c    **** static void MX_TIM1_Init(void);
  22:Src/main.c    **** static void MX_TIM2_Init(void);
  23:Src/main.c    **** static void MX_USART3_UART_Init(void);
  24:Src/main.c    **** void transmit_error_handler(DMA_HandleTypeDef * hdma);
  25:Src/main.c    **** void data_tramsmitted_handler(DMA_HandleTypeDef * hdma);
  26:Src/main.c    **** void dma_init();
  27:Src/main.c    **** 
  28:Src/main.c    **** void dfu_otter_bootloader(void)
  29:Src/main.c    **** {
  30:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
  31:Src/main.c    ****   NVIC_SystemReset();
ARM GAS  /tmp/cczUoBVm.s 			page 2


  32:Src/main.c    **** }
  33:Src/main.c    **** 
  34:Src/main.c    **** #define data_len 200
  35:Src/main.c    **** uint16_t my_data_buf[data_len];
  36:Src/main.c    **** 
  37:Src/main.c    **** uint8_t my_data_buf_fire[data_len];
  38:Src/main.c    **** 
  39:Src/main.c    **** void dataTransmittedHandler0(DMA_HandleTypeDef *hdma) {
  28              		.loc 1 39 55 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 39 55 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  40:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 0);
  38              		.loc 1 40 3 is_stmt 1 view .LVU2
  39 0002 8021     		movs	r1, #128
  40 0004 0022     		movs	r2, #0
  41 0006 4901     		lsls	r1, r1, #5
  42 0008 0348     		ldr	r0, .L2
  43              	.LVL1:
  44              		.loc 1 40 3 is_stmt 0 view .LVU3
  45 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  46              	.LVL2:
  41:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
  47              		.loc 1 41 3 is_stmt 1 view .LVU4
  48 000e 0021     		movs	r1, #0
  49 0010 0248     		ldr	r0, .L2+4
  50 0012 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  51              	.LVL3:
  42:Src/main.c    **** }
  52              		.loc 1 42 1 is_stmt 0 view .LVU5
  53              		@ sp needed
  54 0016 10BD     		pop	{r4, pc}
  55              	.L3:
  56              		.align	2
  57              	.L2:
  58 0018 00040048 		.word	1207960576
  59 001c 00000000 		.word	htim2
  60              		.cfi_endproc
  61              	.LFE38:
  63              		.section	.text.dataTransmittedHandler1,"ax",%progbits
  64              		.align	1
  65              		.global	dataTransmittedHandler1
  66              		.syntax unified
  67              		.code	16
  68              		.thumb_func
  69              		.fpu softvfp
  71              	dataTransmittedHandler1:
  72              	.LVL4:
  73              	.LFB39:
  43:Src/main.c    **** 
  44:Src/main.c    **** void dataTransmittedHandler1(DMA_HandleTypeDef *hdma) {
ARM GAS  /tmp/cczUoBVm.s 			page 3


  74              		.loc 1 44 55 is_stmt 1 view -0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		.loc 1 44 55 is_stmt 0 view .LVU7
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
  83              		.cfi_offset 14, -4
  45:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 0);
  84              		.loc 1 45 3 is_stmt 1 view .LVU8
  85 0002 8021     		movs	r1, #128
  86 0004 0022     		movs	r2, #0
  87 0006 8901     		lsls	r1, r1, #6
  88 0008 0948     		ldr	r0, .L5
  89              	.LVL5:
  90              		.loc 1 45 3 is_stmt 0 view .LVU9
  91 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  92              	.LVL6:
  46:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
  93              		.loc 1 46 3 is_stmt 1 view .LVU10
  94 000e 0821     		movs	r1, #8
  95 0010 0848     		ldr	r0, .L5+4
  96 0012 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  97              	.LVL7:
  47:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, F5_Pin, 0);
  98              		.loc 1 47 3 view .LVU11
  99 0016 084C     		ldr	r4, .L5+8
 100 0018 0022     		movs	r2, #0
 101 001a 0221     		movs	r1, #2
 102 001c 2000     		movs	r0, r4
 103 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 104              	.LVL8:
  48:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, F3_Pin, 0);
 105              		.loc 1 48 3 view .LVU12
 106 0022 0022     		movs	r2, #0
 107 0024 0121     		movs	r1, #1
 108 0026 2000     		movs	r0, r4
 109 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 110              	.LVL9:
  49:Src/main.c    **** }
 111              		.loc 1 49 1 is_stmt 0 view .LVU13
 112              		@ sp needed
 113 002c 10BD     		pop	{r4, pc}
 114              	.L6:
 115 002e C046     		.align	2
 116              	.L5:
 117 0030 00040048 		.word	1207960576
 118 0034 00000000 		.word	htim2
 119 0038 00080048 		.word	1207961600
 120              		.cfi_endproc
 121              	.LFE39:
 123              		.section	.text.dataTransmittedHandler2,"ax",%progbits
 124              		.align	1
 125              		.global	dataTransmittedHandler2
 126              		.syntax unified
ARM GAS  /tmp/cczUoBVm.s 			page 4


 127              		.code	16
 128              		.thumb_func
 129              		.fpu softvfp
 131              	dataTransmittedHandler2:
 132              	.LVL10:
 133              	.LFB40:
  50:Src/main.c    **** 
  51:Src/main.c    **** void dataTransmittedHandler2(DMA_HandleTypeDef *hdma) {
 134              		.loc 1 51 55 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		.loc 1 51 55 is_stmt 0 view .LVU15
 139 0000 10B5     		push	{r4, lr}
 140              	.LCFI2:
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 4, -8
 143              		.cfi_offset 14, -4
  52:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 144              		.loc 1 52 3 is_stmt 1 view .LVU16
 145 0002 0C21     		movs	r1, #12
 146 0004 0148     		ldr	r0, .L8
 147              	.LVL11:
 148              		.loc 1 52 3 is_stmt 0 view .LVU17
 149 0006 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 150              	.LVL12:
  53:Src/main.c    **** }
 151              		.loc 1 53 1 view .LVU18
 152              		@ sp needed
 153 000a 10BD     		pop	{r4, pc}
 154              	.L9:
 155              		.align	2
 156              	.L8:
 157 000c 00000000 		.word	htim2
 158              		.cfi_endproc
 159              	.LFE40:
 161              		.section	.text.MX_GPIO_Init,"ax",%progbits
 162              		.align	1
 163              		.syntax unified
 164              		.code	16
 165              		.thumb_func
 166              		.fpu softvfp
 168              	MX_GPIO_Init:
 169              	.LFB48:
  54:Src/main.c    **** 
  55:Src/main.c    **** int main(void)
  56:Src/main.c    **** {
  57:Src/main.c    **** 
  58:Src/main.c    ****   HAL_Init();
  59:Src/main.c    **** 
  60:Src/main.c    ****   SystemClock_Config();
  61:Src/main.c    **** 
  62:Src/main.c    ****   MX_GPIO_Init();
  63:Src/main.c    ****   MX_DMA_Init();
  64:Src/main.c    ****   MX_TIM1_Init();
  65:Src/main.c    ****   MX_TIM2_Init();
  66:Src/main.c    ****   MX_USART3_UART_Init();
ARM GAS  /tmp/cczUoBVm.s 			page 5


  67:Src/main.c    ****   MX_USB_DEVICE_Init();
  68:Src/main.c    **** 
  69:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
  70:Src/main.c    ****     dfu_otter_bootloader();
  71:Src/main.c    ****   }
  72:Src/main.c    **** 
  73:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
  74:Src/main.c    **** 
  75:Src/main.c    ****   memset(my_data_buf, 0xFF, data_len);
  76:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
  77:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
  78:Src/main.c    ****     my_data_buf[i + 1] = 0xFF80;
  79:Src/main.c    ****     my_data_buf[i + 2] = 0x0001;
  80:Src/main.c    ****     my_data_buf[i + 3] = 0xFF04;
  81:Src/main.c    ****     my_data_buf[i + 4] = 0x0001;
  82:Src/main.c    ****     my_data_buf[i + 5] = 0xFF08;
  83:Src/main.c    ****     my_data_buf[i + 6] = 0x0001;
  84:Src/main.c    ****     my_data_buf[i + 7] = 0xFF40;
  85:Src/main.c    ****   }
  86:Src/main.c    **** 
  87:Src/main.c    ****   memset(my_data_buf, 0x00, data_len);
  88:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
  89:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
  90:Src/main.c    ****     my_data_buf_fire[i + 1] = 0x00;
  91:Src/main.c    ****     my_data_buf_fire[i + 2] = 0x00;
  92:Src/main.c    ****     my_data_buf_fire[i + 3] = 0x00;
  93:Src/main.c    ****     my_data_buf_fire[i + 4] = 0x01;//01
  94:Src/main.c    ****     my_data_buf_fire[i + 5] = 0x00;
  95:Src/main.c    ****     my_data_buf_fire[i + 6] = 0x00;
  96:Src/main.c    ****     my_data_buf_fire[i + 7] = 0x00;
  97:Src/main.c    ****   }
  98:Src/main.c    **** 
  99:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dataTransmittedHandler0;
 100:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 101:Src/main.c    **** 
 102:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dataTransmittedHandler1;
 103:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 104:Src/main.c    **** 
 105:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dataTransmittedHandler2;
 106:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 107:Src/main.c    **** 
 108:Src/main.c    ****   while (1)
 109:Src/main.c    ****   {
 110:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
 111:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 112:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 113:Src/main.c    ****       startDMA();
 114:Src/main.c    ****     }
 115:Src/main.c    ****   }
 116:Src/main.c    **** }
 117:Src/main.c    **** void startDMA() {
 118:Src/main.c    **** 
 119:Src/main.c    **** 
 120:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC1]) == HAL_DMA_STATE_BUSY) {
 121:Src/main.c    ****     return;
 122:Src/main.c    ****   }
 123:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC3]) == HAL_DMA_STATE_BUSY) {
ARM GAS  /tmp/cczUoBVm.s 			page 6


 124:Src/main.c    ****     return;
 125:Src/main.c    ****   }
 126:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC4]) == HAL_DMA_STATE_BUSY) {
 127:Src/main.c    ****     return;
 128:Src/main.c    ****   }
 129:Src/main.c    **** 
 130:Src/main.c    **** 
 131:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC1], (uint32_t)my_data_buf, (uint32_t)&GPIOA->ODR, data_l
 132:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC3], (uint32_t)my_data_buf_fire, (uint32_t)&GPIOB->ODR, d
 133:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf, (uint32_t)&GPIOC->ODR, data_l
 134:Src/main.c    **** 
 135:Src/main.c    ****   TIM2->CNT = 0u;
 136:Src/main.c    **** 
 137:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 138:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 139:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 140:Src/main.c    **** }
 141:Src/main.c    **** 
 142:Src/main.c    **** void SystemClock_Config(void)
 143:Src/main.c    **** {
 144:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 145:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 146:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 147:Src/main.c    **** 
 148:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 149:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 150:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 151:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 153:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 154:Src/main.c    **** 
 155:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 156:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 157:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 158:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 159:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 160:Src/main.c    **** 
 161:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 162:Src/main.c    **** 
 163:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 164:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 165:Src/main.c    **** 
 166:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 167:Src/main.c    **** 
 168:Src/main.c    **** }
 169:Src/main.c    **** 
 170:Src/main.c    **** static void MX_TIM1_Init(void)
 171:Src/main.c    **** {
 172:Src/main.c    **** 
 173:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 174:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 175:Src/main.c    **** 
 176:Src/main.c    ****   htim1.Instance = TIM1;
 177:Src/main.c    ****   htim1.Init.Prescaler = 0;
 178:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 179:Src/main.c    ****   htim1.Init.Period = 0;
 180:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/cczUoBVm.s 			page 7


 181:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 182:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 183:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 184:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 185:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 186:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 187:Src/main.c    ****   sConfig.IC1Filter = 0;
 188:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 189:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 190:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 191:Src/main.c    ****   sConfig.IC2Filter = 0;
 192:Src/main.c    ****   HAL_TIM_Encoder_Init(&htim1, &sConfig);
 193:Src/main.c    ****   
 194:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 195:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 196:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 197:Src/main.c    ****   
 198:Src/main.c    **** 
 199:Src/main.c    **** }
 200:Src/main.c    **** 
 201:Src/main.c    **** static void MX_TIM2_Init(void)
 202:Src/main.c    **** {
 203:Src/main.c    **** 
 204:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 205:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 206:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 207:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 208:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 209:Src/main.c    **** 
 210:Src/main.c    ****   htim2.Instance = TIM2;
 211:Src/main.c    ****   htim2.Init.Prescaler = 0;
 212:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 213:Src/main.c    ****   htim2.Init.Period = PER;
 214:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 215:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 216:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 217:Src/main.c    ****   
 218:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 219:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 220:Src/main.c    ****  
 221:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 222:Src/main.c    **** 
 223:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 224:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 225:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 226:Src/main.c    **** 
 227:Src/main.c    ****   sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 228:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 229:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 230:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 231:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 232:Src/main.c    ****  
 233:Src/main.c    ****   sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 234:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 235:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 236:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 237:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
ARM GAS  /tmp/cczUoBVm.s 			page 8


 238:Src/main.c    **** 
 239:Src/main.c    ****   sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 240:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 241:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 242:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 243:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3);
 244:Src/main.c    **** }
 245:Src/main.c    **** 
 246:Src/main.c    **** static void MX_USART3_UART_Init(void)
 247:Src/main.c    **** {
 248:Src/main.c    ****   huart3.Instance = USART3;
 249:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 250:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 251:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 252:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 253:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 254:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 255:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 256:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 257:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 258:Src/main.c    ****   HAL_UART_Init(&huart3);
 259:Src/main.c    **** }
 260:Src/main.c    **** 
 261:Src/main.c    **** static void MX_DMA_Init(void)
 262:Src/main.c    **** {
 263:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 264:Src/main.c    **** 
 265:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 266:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 267:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 268:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** static void MX_GPIO_Init(void)
 272:Src/main.c    **** {
 170              		.loc 1 272 1 is_stmt 1 view -0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 32
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 175              	.LCFI3:
 176              		.cfi_def_cfa_offset 20
 177              		.cfi_offset 4, -20
 178              		.cfi_offset 5, -16
 179              		.cfi_offset 6, -12
 180              		.cfi_offset 7, -8
 181              		.cfi_offset 14, -4
 182 0002 89B0     		sub	sp, sp, #36
 183              	.LCFI4:
 184              		.cfi_def_cfa_offset 56
 273:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 185              		.loc 1 273 3 view .LVU20
 186              		.loc 1 273 20 is_stmt 0 view .LVU21
 187 0004 1422     		movs	r2, #20
 188 0006 0021     		movs	r1, #0
 189 0008 03A8     		add	r0, sp, #12
 190 000a FFF7FEFF 		bl	memset
ARM GAS  /tmp/cczUoBVm.s 			page 9


 191              	.LVL13:
 274:Src/main.c    **** 
 275:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 192              		.loc 1 275 3 is_stmt 1 view .LVU22
 193              	.LBB8:
 194              		.loc 1 275 3 view .LVU23
 195              		.loc 1 275 3 view .LVU24
 196 000e 344B     		ldr	r3, .L11
 197 0010 5969     		ldr	r1, [r3, #20]
 198 0012 8020     		movs	r0, #128
 199 0014 0003     		lsls	r0, r0, #12
 200 0016 0143     		orrs	r1, r0
 201 0018 5961     		str	r1, [r3, #20]
 202              		.loc 1 275 3 view .LVU25
 203 001a 5A69     		ldr	r2, [r3, #20]
 204 001c 0240     		ands	r2, r0
 205 001e 0092     		str	r2, [sp]
 206              		.loc 1 275 3 view .LVU26
 207 0020 009A     		ldr	r2, [sp]
 208              	.LBE8:
 276:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 209              		.loc 1 276 3 view .LVU27
 210              	.LBB9:
 211              		.loc 1 276 3 view .LVU28
 212              		.loc 1 276 3 view .LVU29
 213 0022 5969     		ldr	r1, [r3, #20]
 214 0024 8020     		movs	r0, #128
 215 0026 8002     		lsls	r0, r0, #10
 216 0028 0143     		orrs	r1, r0
 217 002a 5961     		str	r1, [r3, #20]
 218              		.loc 1 276 3 view .LVU30
 219 002c 5A69     		ldr	r2, [r3, #20]
 220 002e 0240     		ands	r2, r0
 221 0030 0192     		str	r2, [sp, #4]
 222              		.loc 1 276 3 view .LVU31
 223 0032 019A     		ldr	r2, [sp, #4]
 224              	.LBE9:
 277:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 225              		.loc 1 277 3 view .LVU32
 226              	.LBB10:
 227              		.loc 1 277 3 view .LVU33
 228              		.loc 1 277 3 view .LVU34
 229 0034 5A69     		ldr	r2, [r3, #20]
 230 0036 8021     		movs	r1, #128
 231 0038 C902     		lsls	r1, r1, #11
 232 003a 0A43     		orrs	r2, r1
 233 003c 5A61     		str	r2, [r3, #20]
 234              		.loc 1 277 3 view .LVU35
 235 003e 5B69     		ldr	r3, [r3, #20]
 236 0040 0B40     		ands	r3, r1
 237 0042 0293     		str	r3, [sp, #8]
 238              		.loc 1 277 3 view .LVU36
 239 0044 029B     		ldr	r3, [sp, #8]
 240              	.LBE10:
 278:Src/main.c    **** 
 279:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, D1_Pin | D2_Pin | D3_Pin, GPIO_PIN_RESET);
 241              		.loc 1 279 3 view .LVU37
ARM GAS  /tmp/cczUoBVm.s 			page 10


 242 0046 E024     		movs	r4, #224
 243 0048 2402     		lsls	r4, r4, #8
 244 004a 0022     		movs	r2, #0
 245 004c 2100     		movs	r1, r4
 246 004e 2548     		ldr	r0, .L11+4
 247 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 248              	.LVL14:
 280:Src/main.c    **** 
 281:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 249              		.loc 1 281 3 view .LVU38
 250 0054 0022     		movs	r2, #0
 251 0056 2449     		ldr	r1, .L11+8
 252 0058 9020     		movs	r0, #144
 253 005a C005     		lsls	r0, r0, #23
 254 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 255              	.LVL15:
 282:Src/main.c    ****                     | S4_Pin | S1_Pin | LED_STATUSA15_Pin, GPIO_PIN_RESET);
 283:Src/main.c    **** 
 284:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin | LED_POWER_Pin | CSYNC_Pin  | F3_Pin | F5_Pin, GPIO_PIN_
 256              		.loc 1 284 3 view .LVU39
 257 0060 224D     		ldr	r5, .L11+12
 258 0062 0022     		movs	r2, #0
 259 0064 2900     		movs	r1, r5
 260 0066 2248     		ldr	r0, .L11+16
 261 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 262              	.LVL16:
 285:Src/main.c    **** 
 286:Src/main.c    ****   GPIO_InitStruct.Pin = D1_Pin | D2_Pin | D3_Pin;
 263              		.loc 1 286 3 view .LVU40
 264              		.loc 1 286 23 is_stmt 0 view .LVU41
 265 006c 0394     		str	r4, [sp, #12]
 287:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 266              		.loc 1 287 3 is_stmt 1 view .LVU42
 267              		.loc 1 287 24 is_stmt 0 view .LVU43
 268 006e 0127     		movs	r7, #1
 269 0070 0497     		str	r7, [sp, #16]
 288:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 270              		.loc 1 288 3 is_stmt 1 view .LVU44
 271              		.loc 1 288 24 is_stmt 0 view .LVU45
 272 0072 0024     		movs	r4, #0
 273 0074 0594     		str	r4, [sp, #20]
 289:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 274              		.loc 1 289 3 is_stmt 1 view .LVU46
 275              		.loc 1 289 25 is_stmt 0 view .LVU47
 276 0076 0326     		movs	r6, #3
 277 0078 0696     		str	r6, [sp, #24]
 290:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 278              		.loc 1 290 3 is_stmt 1 view .LVU48
 279 007a 03A9     		add	r1, sp, #12
 280 007c 1948     		ldr	r0, .L11+4
 281 007e FFF7FEFF 		bl	HAL_GPIO_Init
 282              	.LVL17:
 291:Src/main.c    **** 
 292:Src/main.c    ****   GPIO_InitStruct.Pin = DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 283              		.loc 1 292 3 view .LVU49
 284              		.loc 1 292 23 is_stmt 0 view .LVU50
 285 0082 CF23     		movs	r3, #207
ARM GAS  /tmp/cczUoBVm.s 			page 11


 286 0084 0393     		str	r3, [sp, #12]
 293:Src/main.c    ****                         | S4_Pin | S1_Pin;
 294:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 287              		.loc 1 294 3 is_stmt 1 view .LVU51
 288              		.loc 1 294 24 is_stmt 0 view .LVU52
 289 0086 0497     		str	r7, [sp, #16]
 295:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 290              		.loc 1 295 3 is_stmt 1 view .LVU53
 291              		.loc 1 295 24 is_stmt 0 view .LVU54
 292 0088 0594     		str	r4, [sp, #20]
 296:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 293              		.loc 1 296 3 is_stmt 1 view .LVU55
 294              		.loc 1 296 25 is_stmt 0 view .LVU56
 295 008a 0696     		str	r6, [sp, #24]
 297:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 296              		.loc 1 297 3 is_stmt 1 view .LVU57
 297 008c 03A9     		add	r1, sp, #12
 298 008e 9020     		movs	r0, #144
 299 0090 C005     		lsls	r0, r0, #23
 300 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 301              	.LVL18:
 298:Src/main.c    **** 
 299:Src/main.c    ****   GPIO_InitStruct.Pin = INT_IN_Pin;
 302              		.loc 1 299 3 view .LVU58
 303              		.loc 1 299 23 is_stmt 0 view .LVU59
 304 0096 0423     		movs	r3, #4
 305 0098 0393     		str	r3, [sp, #12]
 300:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 306              		.loc 1 300 3 is_stmt 1 view .LVU60
 307              		.loc 1 300 24 is_stmt 0 view .LVU61
 308 009a 164B     		ldr	r3, .L11+20
 309 009c 0493     		str	r3, [sp, #16]
 301:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 310              		.loc 1 301 3 is_stmt 1 view .LVU62
 311              		.loc 1 301 24 is_stmt 0 view .LVU63
 312 009e 0594     		str	r4, [sp, #20]
 302:Src/main.c    ****   HAL_GPIO_Init(INT_IN_GPIO_Port, &GPIO_InitStruct);
 313              		.loc 1 302 3 is_stmt 1 view .LVU64
 314 00a0 03A9     		add	r1, sp, #12
 315 00a2 1348     		ldr	r0, .L11+16
 316 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 317              	.LVL19:
 303:Src/main.c    **** 
 304:Src/main.c    ****   GPIO_InitStruct.Pin =  F3_Pin | F5_Pin | LED_STATUS_Pin | LED_POWER_Pin | CSYNC_Pin;
 318              		.loc 1 304 3 view .LVU65
 319              		.loc 1 304 23 is_stmt 0 view .LVU66
 320 00a8 0395     		str	r5, [sp, #12]
 305:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 321              		.loc 1 305 3 is_stmt 1 view .LVU67
 322              		.loc 1 305 24 is_stmt 0 view .LVU68
 323 00aa 0497     		str	r7, [sp, #16]
 306:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 324              		.loc 1 306 3 is_stmt 1 view .LVU69
 325              		.loc 1 306 24 is_stmt 0 view .LVU70
 326 00ac 0594     		str	r4, [sp, #20]
 307:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 327              		.loc 1 307 3 is_stmt 1 view .LVU71
ARM GAS  /tmp/cczUoBVm.s 			page 12


 328              		.loc 1 307 25 is_stmt 0 view .LVU72
 329 00ae 0696     		str	r6, [sp, #24]
 308:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 330              		.loc 1 308 3 is_stmt 1 view .LVU73
 331 00b0 03A9     		add	r1, sp, #12
 332 00b2 0F48     		ldr	r0, .L11+16
 333 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 334              	.LVL20:
 309:Src/main.c    **** 
 310:Src/main.c    ****   GPIO_InitStruct.Pin = INDEX_Pin | BUTTON_Pin;
 335              		.loc 1 310 3 view .LVU74
 336              		.loc 1 310 23 is_stmt 0 view .LVU75
 337 00b8 8123     		movs	r3, #129
 338 00ba 1B02     		lsls	r3, r3, #8
 339 00bc 0393     		str	r3, [sp, #12]
 311:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 340              		.loc 1 311 3 is_stmt 1 view .LVU76
 341              		.loc 1 311 24 is_stmt 0 view .LVU77
 342 00be 0494     		str	r4, [sp, #16]
 312:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 343              		.loc 1 312 3 is_stmt 1 view .LVU78
 344              		.loc 1 312 24 is_stmt 0 view .LVU79
 345 00c0 0223     		movs	r3, #2
 346 00c2 0593     		str	r3, [sp, #20]
 313:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 347              		.loc 1 313 3 is_stmt 1 view .LVU80
 348 00c4 03A9     		add	r1, sp, #12
 349 00c6 0A48     		ldr	r0, .L11+16
 350 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 351              	.LVL21:
 314:Src/main.c    **** 
 315:Src/main.c    ****   GPIO_InitStruct.Pin = ANALOG_INPUT3_Pin | ANALOG_INPUT2_Pin | ANALOG_INPUT1_Pin;
 352              		.loc 1 315 3 view .LVU81
 353              		.loc 1 315 23 is_stmt 0 view .LVU82
 354 00cc 3823     		movs	r3, #56
 355 00ce 0393     		str	r3, [sp, #12]
 316:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 356              		.loc 1 316 3 is_stmt 1 view .LVU83
 357              		.loc 1 316 24 is_stmt 0 view .LVU84
 358 00d0 0496     		str	r6, [sp, #16]
 317:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 359              		.loc 1 317 3 is_stmt 1 view .LVU85
 360              		.loc 1 317 24 is_stmt 0 view .LVU86
 361 00d2 0594     		str	r4, [sp, #20]
 318:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 362              		.loc 1 318 3 is_stmt 1 view .LVU87
 363 00d4 03A9     		add	r1, sp, #12
 364 00d6 0648     		ldr	r0, .L11+16
 365 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 366              	.LVL22:
 319:Src/main.c    **** 
 320:Src/main.c    **** }
 367              		.loc 1 320 1 is_stmt 0 view .LVU88
 368 00dc 09B0     		add	sp, sp, #36
 369              		@ sp needed
 370 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 371              	.L12:
ARM GAS  /tmp/cczUoBVm.s 			page 13


 372              		.align	2
 373              	.L11:
 374 00e0 00100240 		.word	1073876992
 375 00e4 00080048 		.word	1207961600
 376 00e8 CF800000 		.word	32975
 377 00ec 03320000 		.word	12803
 378 00f0 00040048 		.word	1207960576
 379 00f4 00001110 		.word	269549568
 380              		.cfi_endproc
 381              	.LFE48:
 383              		.section	.text.MX_DMA_Init,"ax",%progbits
 384              		.align	1
 385              		.syntax unified
 386              		.code	16
 387              		.thumb_func
 388              		.fpu softvfp
 390              	MX_DMA_Init:
 391              	.LFB47:
 262:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 392              		.loc 1 262 1 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 8
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396 0000 00B5     		push	{lr}
 397              	.LCFI5:
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 14, -4
 400 0002 83B0     		sub	sp, sp, #12
 401              	.LCFI6:
 402              		.cfi_def_cfa_offset 16
 263:Src/main.c    **** 
 403              		.loc 1 263 3 view .LVU90
 404              	.LBB11:
 263:Src/main.c    **** 
 405              		.loc 1 263 3 view .LVU91
 263:Src/main.c    **** 
 406              		.loc 1 263 3 view .LVU92
 407 0004 0D4A     		ldr	r2, .L14
 408 0006 5169     		ldr	r1, [r2, #20]
 409 0008 0123     		movs	r3, #1
 410 000a 1943     		orrs	r1, r3
 411 000c 5161     		str	r1, [r2, #20]
 263:Src/main.c    **** 
 412              		.loc 1 263 3 view .LVU93
 413 000e 5269     		ldr	r2, [r2, #20]
 414 0010 1340     		ands	r3, r2
 415 0012 0193     		str	r3, [sp, #4]
 263:Src/main.c    **** 
 416              		.loc 1 263 3 view .LVU94
 417 0014 019B     		ldr	r3, [sp, #4]
 418              	.LBE11:
 265:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 419              		.loc 1 265 3 view .LVU95
 420 0016 0022     		movs	r2, #0
 421 0018 0021     		movs	r1, #0
 422 001a 0920     		movs	r0, #9
 423 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/cczUoBVm.s 			page 14


 424              	.LVL23:
 266:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 425              		.loc 1 266 3 view .LVU96
 426 0020 0920     		movs	r0, #9
 427 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 428              	.LVL24:
 267:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 429              		.loc 1 267 3 view .LVU97
 430 0026 0022     		movs	r2, #0
 431 0028 0021     		movs	r1, #0
 432 002a 0B20     		movs	r0, #11
 433 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 434              	.LVL25:
 268:Src/main.c    **** }
 435              		.loc 1 268 3 view .LVU98
 436 0030 0B20     		movs	r0, #11
 437 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 438              	.LVL26:
 269:Src/main.c    **** 
 439              		.loc 1 269 1 is_stmt 0 view .LVU99
 440 0036 03B0     		add	sp, sp, #12
 441              		@ sp needed
 442 0038 00BD     		pop	{pc}
 443              	.L15:
 444 003a C046     		.align	2
 445              	.L14:
 446 003c 00100240 		.word	1073876992
 447              		.cfi_endproc
 448              	.LFE47:
 450              		.section	.text.MX_TIM1_Init,"ax",%progbits
 451              		.align	1
 452              		.syntax unified
 453              		.code	16
 454              		.thumb_func
 455              		.fpu softvfp
 457              	MX_TIM1_Init:
 458              	.LFB44:
 171:Src/main.c    **** 
 459              		.loc 1 171 1 is_stmt 1 view -0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 48
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463 0000 30B5     		push	{r4, r5, lr}
 464              	.LCFI7:
 465              		.cfi_def_cfa_offset 12
 466              		.cfi_offset 4, -12
 467              		.cfi_offset 5, -8
 468              		.cfi_offset 14, -4
 469 0002 8DB0     		sub	sp, sp, #52
 470              	.LCFI8:
 471              		.cfi_def_cfa_offset 64
 173:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 472              		.loc 1 173 3 view .LVU101
 173:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 473              		.loc 1 173 27 is_stmt 0 view .LVU102
 474 0004 2022     		movs	r2, #32
 475 0006 0021     		movs	r1, #0
ARM GAS  /tmp/cczUoBVm.s 			page 15


 476 0008 04A8     		add	r0, sp, #16
 477 000a FFF7FEFF 		bl	memset
 478              	.LVL27:
 174:Src/main.c    **** 
 479              		.loc 1 174 3 is_stmt 1 view .LVU103
 174:Src/main.c    **** 
 480              		.loc 1 174 27 is_stmt 0 view .LVU104
 481 000e 0822     		movs	r2, #8
 482 0010 0021     		movs	r1, #0
 483 0012 01A8     		add	r0, sp, #4
 484 0014 FFF7FEFF 		bl	memset
 485              	.LVL28:
 176:Src/main.c    ****   htim1.Init.Prescaler = 0;
 486              		.loc 1 176 3 is_stmt 1 view .LVU105
 176:Src/main.c    ****   htim1.Init.Prescaler = 0;
 487              		.loc 1 176 18 is_stmt 0 view .LVU106
 488 0018 0C4C     		ldr	r4, .L17
 489 001a 0D4B     		ldr	r3, .L17+4
 490 001c 2360     		str	r3, [r4]
 177:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 491              		.loc 1 177 3 is_stmt 1 view .LVU107
 177:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 492              		.loc 1 177 24 is_stmt 0 view .LVU108
 493 001e 0025     		movs	r5, #0
 494 0020 6560     		str	r5, [r4, #4]
 178:Src/main.c    ****   htim1.Init.Period = 0;
 495              		.loc 1 178 3 is_stmt 1 view .LVU109
 178:Src/main.c    ****   htim1.Init.Period = 0;
 496              		.loc 1 178 26 is_stmt 0 view .LVU110
 497 0022 A560     		str	r5, [r4, #8]
 179:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 498              		.loc 1 179 3 is_stmt 1 view .LVU111
 179:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 499              		.loc 1 179 21 is_stmt 0 view .LVU112
 500 0024 E560     		str	r5, [r4, #12]
 180:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 501              		.loc 1 180 3 is_stmt 1 view .LVU113
 180:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 502              		.loc 1 180 28 is_stmt 0 view .LVU114
 503 0026 2561     		str	r5, [r4, #16]
 181:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 504              		.loc 1 181 3 is_stmt 1 view .LVU115
 181:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 505              		.loc 1 181 32 is_stmt 0 view .LVU116
 506 0028 6561     		str	r5, [r4, #20]
 182:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 507              		.loc 1 182 3 is_stmt 1 view .LVU117
 182:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 508              		.loc 1 182 32 is_stmt 0 view .LVU118
 509 002a A561     		str	r5, [r4, #24]
 183:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 510              		.loc 1 183 3 is_stmt 1 view .LVU119
 183:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 511              		.loc 1 183 23 is_stmt 0 view .LVU120
 512 002c 0123     		movs	r3, #1
 513 002e 0393     		str	r3, [sp, #12]
 184:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
ARM GAS  /tmp/cczUoBVm.s 			page 16


 514              		.loc 1 184 3 is_stmt 1 view .LVU121
 185:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 515              		.loc 1 185 3 view .LVU122
 185:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 516              		.loc 1 185 24 is_stmt 0 view .LVU123
 517 0030 0593     		str	r3, [sp, #20]
 186:Src/main.c    ****   sConfig.IC1Filter = 0;
 518              		.loc 1 186 3 is_stmt 1 view .LVU124
 187:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 519              		.loc 1 187 3 view .LVU125
 188:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 520              		.loc 1 188 3 view .LVU126
 189:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 521              		.loc 1 189 3 view .LVU127
 189:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 522              		.loc 1 189 24 is_stmt 0 view .LVU128
 523 0032 0993     		str	r3, [sp, #36]
 190:Src/main.c    ****   sConfig.IC2Filter = 0;
 524              		.loc 1 190 3 is_stmt 1 view .LVU129
 191:Src/main.c    ****   HAL_TIM_Encoder_Init(&htim1, &sConfig);
 525              		.loc 1 191 3 view .LVU130
 192:Src/main.c    ****   
 526              		.loc 1 192 3 view .LVU131
 527 0034 03A9     		add	r1, sp, #12
 528 0036 2000     		movs	r0, r4
 529 0038 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 530              	.LVL29:
 194:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 531              		.loc 1 194 3 view .LVU132
 194:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 532              		.loc 1 194 37 is_stmt 0 view .LVU133
 533 003c 0195     		str	r5, [sp, #4]
 195:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 534              		.loc 1 195 3 is_stmt 1 view .LVU134
 195:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 535              		.loc 1 195 33 is_stmt 0 view .LVU135
 536 003e 0295     		str	r5, [sp, #8]
 196:Src/main.c    ****   
 537              		.loc 1 196 2 is_stmt 1 view .LVU136
 538 0040 01A9     		add	r1, sp, #4
 539 0042 2000     		movs	r0, r4
 540 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 541              	.LVL30:
 199:Src/main.c    **** 
 542              		.loc 1 199 1 is_stmt 0 view .LVU137
 543 0048 0DB0     		add	sp, sp, #52
 544              		@ sp needed
 545 004a 30BD     		pop	{r4, r5, pc}
 546              	.L18:
 547              		.align	2
 548              	.L17:
 549 004c 00000000 		.word	htim1
 550 0050 002C0140 		.word	1073818624
 551              		.cfi_endproc
 552              	.LFE44:
 554              		.global	__aeabi_uidiv
 555              		.section	.text.MX_TIM2_Init,"ax",%progbits
ARM GAS  /tmp/cczUoBVm.s 			page 17


 556              		.align	1
 557              		.syntax unified
 558              		.code	16
 559              		.thumb_func
 560              		.fpu softvfp
 562              	MX_TIM2_Init:
 563              	.LFB45:
 202:Src/main.c    **** 
 564              		.loc 1 202 1 is_stmt 1 view -0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 112
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 569              	.LCFI9:
 570              		.cfi_def_cfa_offset 20
 571              		.cfi_offset 4, -20
 572              		.cfi_offset 5, -16
 573              		.cfi_offset 6, -12
 574              		.cfi_offset 7, -8
 575              		.cfi_offset 14, -4
 576 0002 C646     		mov	lr, r8
 577 0004 00B5     		push	{lr}
 578              	.LCFI10:
 579              		.cfi_def_cfa_offset 24
 580              		.cfi_offset 8, -24
 581 0006 9CB0     		sub	sp, sp, #112
 582              	.LCFI11:
 583              		.cfi_def_cfa_offset 136
 204:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 584              		.loc 1 204 3 view .LVU139
 204:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 585              		.loc 1 204 26 is_stmt 0 view .LVU140
 586 0008 1022     		movs	r2, #16
 587 000a 0021     		movs	r1, #0
 588 000c 18A8     		add	r0, sp, #96
 589 000e FFF7FEFF 		bl	memset
 590              	.LVL31:
 205:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 591              		.loc 1 205 3 is_stmt 1 view .LVU141
 205:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 592              		.loc 1 205 27 is_stmt 0 view .LVU142
 593 0012 0822     		movs	r2, #8
 594 0014 0021     		movs	r1, #0
 595 0016 16A8     		add	r0, sp, #88
 596 0018 FFF7FEFF 		bl	memset
 597              	.LVL32:
 206:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 598              		.loc 1 206 3 is_stmt 1 view .LVU143
 206:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 599              		.loc 1 206 22 is_stmt 0 view .LVU144
 600 001c 1C22     		movs	r2, #28
 601 001e 0021     		movs	r1, #0
 602 0020 0FA8     		add	r0, sp, #60
 603 0022 FFF7FEFF 		bl	memset
 604              	.LVL33:
 207:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 605              		.loc 1 207 3 is_stmt 1 view .LVU145
ARM GAS  /tmp/cczUoBVm.s 			page 18


 207:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 606              		.loc 1 207 22 is_stmt 0 view .LVU146
 607 0026 1C22     		movs	r2, #28
 608 0028 0021     		movs	r1, #0
 609 002a 08A8     		add	r0, sp, #32
 610 002c FFF7FEFF 		bl	memset
 611              	.LVL34:
 208:Src/main.c    **** 
 612              		.loc 1 208 3 is_stmt 1 view .LVU147
 208:Src/main.c    **** 
 613              		.loc 1 208 22 is_stmt 0 view .LVU148
 614 0030 1C22     		movs	r2, #28
 615 0032 0021     		movs	r1, #0
 616 0034 01A8     		add	r0, sp, #4
 617 0036 FFF7FEFF 		bl	memset
 618              	.LVL35:
 210:Src/main.c    ****   htim2.Init.Prescaler = 0;
 619              		.loc 1 210 3 is_stmt 1 view .LVU149
 210:Src/main.c    ****   htim2.Init.Prescaler = 0;
 620              		.loc 1 210 18 is_stmt 0 view .LVU150
 621 003a 294C     		ldr	r4, .L20
 622 003c 8023     		movs	r3, #128
 623 003e DB05     		lsls	r3, r3, #23
 624 0040 2360     		str	r3, [r4]
 211:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 625              		.loc 1 211 3 is_stmt 1 view .LVU151
 211:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 626              		.loc 1 211 24 is_stmt 0 view .LVU152
 627 0042 0025     		movs	r5, #0
 628 0044 6560     		str	r5, [r4, #4]
 212:Src/main.c    ****   htim2.Init.Period = PER;
 629              		.loc 1 212 3 is_stmt 1 view .LVU153
 212:Src/main.c    ****   htim2.Init.Period = PER;
 630              		.loc 1 212 26 is_stmt 0 view .LVU154
 631 0046 A560     		str	r5, [r4, #8]
 213:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 632              		.loc 1 213 3 is_stmt 1 view .LVU155
 213:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 633              		.loc 1 213 21 is_stmt 0 view .LVU156
 634 0048 264E     		ldr	r6, .L20+4
 635 004a 3388     		ldrh	r3, [r6]
 636 004c E360     		str	r3, [r4, #12]
 214:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 637              		.loc 1 214 3 is_stmt 1 view .LVU157
 214:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 638              		.loc 1 214 28 is_stmt 0 view .LVU158
 639 004e 2561     		str	r5, [r4, #16]
 215:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 640              		.loc 1 215 3 is_stmt 1 view .LVU159
 215:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 641              		.loc 1 215 32 is_stmt 0 view .LVU160
 642 0050 A561     		str	r5, [r4, #24]
 216:Src/main.c    ****   
 643              		.loc 1 216 3 is_stmt 1 view .LVU161
 644 0052 2000     		movs	r0, r4
 645 0054 FFF7FEFF 		bl	HAL_TIM_Base_Init
 646              	.LVL36:
ARM GAS  /tmp/cczUoBVm.s 			page 19


 218:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 647              		.loc 1 218 3 view .LVU162
 218:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 648              		.loc 1 218 34 is_stmt 0 view .LVU163
 649 0058 8023     		movs	r3, #128
 650 005a 5B01     		lsls	r3, r3, #5
 651 005c 1893     		str	r3, [sp, #96]
 219:Src/main.c    ****  
 652              		.loc 1 219 3 is_stmt 1 view .LVU164
 653 005e 18A9     		add	r1, sp, #96
 654 0060 2000     		movs	r0, r4
 655 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 656              	.LVL37:
 221:Src/main.c    **** 
 657              		.loc 1 221 3 view .LVU165
 658 0066 2000     		movs	r0, r4
 659 0068 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 660              	.LVL38:
 223:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 661              		.loc 1 223 3 view .LVU166
 223:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 662              		.loc 1 223 37 is_stmt 0 view .LVU167
 663 006c 1695     		str	r5, [sp, #88]
 224:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 664              		.loc 1 224 3 is_stmt 1 view .LVU168
 224:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 665              		.loc 1 224 33 is_stmt 0 view .LVU169
 666 006e 1795     		str	r5, [sp, #92]
 225:Src/main.c    **** 
 667              		.loc 1 225 3 is_stmt 1 view .LVU170
 668 0070 16A9     		add	r1, sp, #88
 669 0072 2000     		movs	r0, r4
 670 0074 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 671              	.LVL39:
 227:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 672              		.loc 1 227 3 view .LVU171
 227:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 673              		.loc 1 227 21 is_stmt 0 view .LVU172
 674 0078 6023     		movs	r3, #96
 675 007a 9846     		mov	r8, r3
 676 007c 0F93     		str	r3, [sp, #60]
 228:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 677              		.loc 1 228 3 is_stmt 1 view .LVU173
 228:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 678              		.loc 1 228 26 is_stmt 0 view .LVU174
 679 007e 3088     		ldrh	r0, [r6]
 680 0080 0321     		movs	r1, #3
 681 0082 FFF7FEFF 		bl	__aeabi_uidiv
 682              	.LVL40:
 683 0086 80B2     		uxth	r0, r0
 228:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 684              		.loc 1 228 20 view .LVU175
 685 0088 1090     		str	r0, [sp, #64]
 229:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 686              		.loc 1 229 3 is_stmt 1 view .LVU176
 229:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 687              		.loc 1 229 25 is_stmt 0 view .LVU177
ARM GAS  /tmp/cczUoBVm.s 			page 20


 688 008a 0227     		movs	r7, #2
 689 008c 1197     		str	r7, [sp, #68]
 230:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 690              		.loc 1 230 3 is_stmt 1 view .LVU178
 230:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 691              		.loc 1 230 25 is_stmt 0 view .LVU179
 692 008e 1395     		str	r5, [sp, #76]
 231:Src/main.c    ****  
 693              		.loc 1 231 3 is_stmt 1 view .LVU180
 694 0090 0022     		movs	r2, #0
 695 0092 0FA9     		add	r1, sp, #60
 696 0094 2000     		movs	r0, r4
 697 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 698              	.LVL41:
 233:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 699              		.loc 1 233 3 view .LVU181
 233:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 700              		.loc 1 233 21 is_stmt 0 view .LVU182
 701 009a 4346     		mov	r3, r8
 702 009c 0893     		str	r3, [sp, #32]
 234:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 703              		.loc 1 234 3 is_stmt 1 view .LVU183
 234:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 704              		.loc 1 234 27 is_stmt 0 view .LVU184
 705 009e 3088     		ldrh	r0, [r6]
 706 00a0 0321     		movs	r1, #3
 707 00a2 FFF7FEFF 		bl	__aeabi_uidiv
 708              	.LVL42:
 709 00a6 80B2     		uxth	r0, r0
 234:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 710              		.loc 1 234 32 view .LVU185
 711 00a8 4000     		lsls	r0, r0, #1
 234:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 712              		.loc 1 234 20 view .LVU186
 713 00aa 0990     		str	r0, [sp, #36]
 235:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 714              		.loc 1 235 3 is_stmt 1 view .LVU187
 235:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 715              		.loc 1 235 25 is_stmt 0 view .LVU188
 716 00ac 0A97     		str	r7, [sp, #40]
 236:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 717              		.loc 1 236 3 is_stmt 1 view .LVU189
 236:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 718              		.loc 1 236 25 is_stmt 0 view .LVU190
 719 00ae 0C95     		str	r5, [sp, #48]
 237:Src/main.c    **** 
 720              		.loc 1 237 2 is_stmt 1 view .LVU191
 721 00b0 0C22     		movs	r2, #12
 722 00b2 08A9     		add	r1, sp, #32
 723 00b4 2000     		movs	r0, r4
 724 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 725              	.LVL43:
 239:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 726              		.loc 1 239 3 view .LVU192
 239:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 727              		.loc 1 239 21 is_stmt 0 view .LVU193
 728 00ba 4346     		mov	r3, r8
ARM GAS  /tmp/cczUoBVm.s 			page 21


 729 00bc 0193     		str	r3, [sp, #4]
 240:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 730              		.loc 1 240 3 is_stmt 1 view .LVU194
 240:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 731              		.loc 1 240 26 is_stmt 0 view .LVU195
 732 00be 3088     		ldrh	r0, [r6]
 733 00c0 0321     		movs	r1, #3
 734 00c2 FFF7FEFF 		bl	__aeabi_uidiv
 735              	.LVL44:
 736 00c6 80B2     		uxth	r0, r0
 240:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 737              		.loc 1 240 20 view .LVU196
 738 00c8 0290     		str	r0, [sp, #8]
 241:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 739              		.loc 1 241 3 is_stmt 1 view .LVU197
 241:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 740              		.loc 1 241 25 is_stmt 0 view .LVU198
 741 00ca 0397     		str	r7, [sp, #12]
 242:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3);
 742              		.loc 1 242 3 is_stmt 1 view .LVU199
 242:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3);
 743              		.loc 1 242 25 is_stmt 0 view .LVU200
 744 00cc 0595     		str	r5, [sp, #20]
 243:Src/main.c    **** }
 745              		.loc 1 243 3 is_stmt 1 view .LVU201
 746 00ce 0822     		movs	r2, #8
 747 00d0 01A9     		add	r1, sp, #4
 748 00d2 2000     		movs	r0, r4
 749 00d4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 750              	.LVL45:
 244:Src/main.c    **** 
 751              		.loc 1 244 1 is_stmt 0 view .LVU202
 752 00d8 1CB0     		add	sp, sp, #112
 753              		@ sp needed
 754 00da 04BC     		pop	{r2}
 755 00dc 9046     		mov	r8, r2
 756 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 757              	.L21:
 758              		.align	2
 759              	.L20:
 760 00e0 00000000 		.word	htim2
 761 00e4 00000000 		.word	.LANCHOR0
 762              		.cfi_endproc
 763              	.LFE45:
 765              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 766              		.align	1
 767              		.syntax unified
 768              		.code	16
 769              		.thumb_func
 770              		.fpu softvfp
 772              	MX_USART3_UART_Init:
 773              	.LFB46:
 247:Src/main.c    ****   huart3.Instance = USART3;
 774              		.loc 1 247 1 is_stmt 1 view -0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 0
 777              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczUoBVm.s 			page 22


 778 0000 10B5     		push	{r4, lr}
 779              	.LCFI12:
 780              		.cfi_def_cfa_offset 8
 781              		.cfi_offset 4, -8
 782              		.cfi_offset 14, -4
 248:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 783              		.loc 1 248 3 view .LVU204
 248:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 784              		.loc 1 248 19 is_stmt 0 view .LVU205
 785 0002 0948     		ldr	r0, .L23
 786 0004 094B     		ldr	r3, .L23+4
 787 0006 0360     		str	r3, [r0]
 249:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 788              		.loc 1 249 3 is_stmt 1 view .LVU206
 249:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 789              		.loc 1 249 24 is_stmt 0 view .LVU207
 790 0008 E123     		movs	r3, #225
 791 000a 5B02     		lsls	r3, r3, #9
 792 000c 4360     		str	r3, [r0, #4]
 250:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 793              		.loc 1 250 3 is_stmt 1 view .LVU208
 250:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 794              		.loc 1 250 26 is_stmt 0 view .LVU209
 795 000e 0023     		movs	r3, #0
 796 0010 8360     		str	r3, [r0, #8]
 251:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 797              		.loc 1 251 3 is_stmt 1 view .LVU210
 251:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 798              		.loc 1 251 24 is_stmt 0 view .LVU211
 799 0012 C360     		str	r3, [r0, #12]
 252:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 800              		.loc 1 252 3 is_stmt 1 view .LVU212
 252:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 801              		.loc 1 252 22 is_stmt 0 view .LVU213
 802 0014 0361     		str	r3, [r0, #16]
 253:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 803              		.loc 1 253 3 is_stmt 1 view .LVU214
 253:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804              		.loc 1 253 20 is_stmt 0 view .LVU215
 805 0016 0C22     		movs	r2, #12
 806 0018 4261     		str	r2, [r0, #20]
 254:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 807              		.loc 1 254 3 is_stmt 1 view .LVU216
 254:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 808              		.loc 1 254 25 is_stmt 0 view .LVU217
 809 001a 8361     		str	r3, [r0, #24]
 255:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810              		.loc 1 255 3 is_stmt 1 view .LVU218
 255:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 811              		.loc 1 255 28 is_stmt 0 view .LVU219
 812 001c C361     		str	r3, [r0, #28]
 256:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 813              		.loc 1 256 3 is_stmt 1 view .LVU220
 256:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 814              		.loc 1 256 30 is_stmt 0 view .LVU221
 815 001e 0362     		str	r3, [r0, #32]
 257:Src/main.c    ****   HAL_UART_Init(&huart3);
ARM GAS  /tmp/cczUoBVm.s 			page 23


 816              		.loc 1 257 3 is_stmt 1 view .LVU222
 257:Src/main.c    ****   HAL_UART_Init(&huart3);
 817              		.loc 1 257 38 is_stmt 0 view .LVU223
 818 0020 4362     		str	r3, [r0, #36]
 258:Src/main.c    **** }
 819              		.loc 1 258 3 is_stmt 1 view .LVU224
 820 0022 FFF7FEFF 		bl	HAL_UART_Init
 821              	.LVL46:
 259:Src/main.c    **** 
 822              		.loc 1 259 1 is_stmt 0 view .LVU225
 823              		@ sp needed
 824 0026 10BD     		pop	{r4, pc}
 825              	.L24:
 826              		.align	2
 827              	.L23:
 828 0028 00000000 		.word	huart3
 829 002c 00480040 		.word	1073760256
 830              		.cfi_endproc
 831              	.LFE46:
 833              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 834              		.align	1
 835              		.global	dfu_otter_bootloader
 836              		.syntax unified
 837              		.code	16
 838              		.thumb_func
 839              		.fpu softvfp
 841              	dfu_otter_bootloader:
 842              	.LFB37:
  29:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 843              		.loc 1 29 1 is_stmt 1 view -0
 844              		.cfi_startproc
 845              		@ Volatile: function does not return.
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
  30:Src/main.c    ****   NVIC_SystemReset();
 849              		.loc 1 30 3 view .LVU227
  30:Src/main.c    ****   NVIC_SystemReset();
 850              		.loc 1 30 34 is_stmt 0 view .LVU228
 851 0000 054B     		ldr	r3, .L27
 852 0002 064A     		ldr	r2, .L27+4
 853 0004 1A60     		str	r2, [r3]
  31:Src/main.c    **** }
 854              		.loc 1 31 3 is_stmt 1 view .LVU229
 855              	.LBB20:
 856              	.LBI20:
 857              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
ARM GAS  /tmp/cczUoBVm.s 			page 24


  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
ARM GAS  /tmp/cczUoBVm.s 			page 25


  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
ARM GAS  /tmp/cczUoBVm.s 			page 26


 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
ARM GAS  /tmp/cczUoBVm.s 			page 27


 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
ARM GAS  /tmp/cczUoBVm.s 			page 28


 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
ARM GAS  /tmp/cczUoBVm.s 			page 29


 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/cczUoBVm.s 			page 30


 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
ARM GAS  /tmp/cczUoBVm.s 			page 31


 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
ARM GAS  /tmp/cczUoBVm.s 			page 32


 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
ARM GAS  /tmp/cczUoBVm.s 			page 33


 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cczUoBVm.s 			page 34


 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
ARM GAS  /tmp/cczUoBVm.s 			page 35


 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
ARM GAS  /tmp/cczUoBVm.s 			page 36


 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 858              		.loc 2 730 22 view .LVU230
 859              	.LBB21:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 860              		.loc 2 732 3 view .LVU231
 861              	.LBB22:
 862              	.LBI22:
 863              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
ARM GAS  /tmp/cczUoBVm.s 			page 37


  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cczUoBVm.s 			page 38


  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cczUoBVm.s 			page 39


 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
ARM GAS  /tmp/cczUoBVm.s 			page 40


 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cczUoBVm.s 			page 41


 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cczUoBVm.s 			page 42


 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/cczUoBVm.s 			page 43


 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  /tmp/cczUoBVm.s 			page 44


 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 864              		.loc 3 427 53 view .LVU232
 865              	.LBB23:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 866              		.loc 3 429 3 view .LVU233
 867              		.syntax divided
 868              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 869 0006 BFF34F8F 		dsb 0xF
 870              	@ 0 "" 2
 871              		.thumb
 872              		.syntax unified
 873              	.LBE23:
 874              	.LBE22:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 875              		.loc 2 734 3 view .LVU234
 876              		.loc 2 734 15 is_stmt 0 view .LVU235
 877 000a 054B     		ldr	r3, .L27+8
 878 000c 054A     		ldr	r2, .L27+12
 879 000e DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 880              		.loc 2 736 3 is_stmt 1 view .LVU236
 881              	.LBB24:
 882              	.LBI24:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 883              		.loc 3 427 53 view .LVU237
 884              	.LBB25:
 885              		.loc 3 429 3 view .LVU238
 886              		.syntax divided
 887              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 888 0010 BFF34F8F 		dsb 0xF
 889              	@ 0 "" 2
 890              		.thumb
 891              		.syntax unified
 892              	.L26:
 893              	.LBE25:
 894              	.LBE24:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 895              		.loc 2 738 3 view .LVU239
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
ARM GAS  /tmp/cczUoBVm.s 			page 45


 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 896              		.loc 2 740 5 view .LVU240
 897              	.LBB26:
 898              	.LBI26:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 899              		.loc 3 373 53 view .LVU241
 900              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 901              		.loc 3 375 3 view .LVU242
 902              		.syntax divided
 903              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 904 0014 C046     		nop
 905              	@ 0 "" 2
 906              		.thumb
 907              		.syntax unified
 908 0016 FDE7     		b	.L26
 909              	.L28:
 910              		.align	2
 911              	.L27:
 912 0018 F03F0020 		.word	536887280
 913 001c EFBEADDE 		.word	-559038737
 914 0020 00ED00E0 		.word	-536810240
 915 0024 0400FA05 		.word	100270084
 916              	.LBE27:
 917              	.LBE26:
 918              	.LBE21:
 919              	.LBE20:
 920              		.cfi_endproc
 921              	.LFE37:
 923              		.section	.text.startDMA,"ax",%progbits
 924              		.align	1
 925              		.global	startDMA
 926              		.syntax unified
 927              		.code	16
 928              		.thumb_func
 929              		.fpu softvfp
 931              	startDMA:
 932              	.LFB42:
 117:Src/main.c    **** 
 933              		.loc 1 117 17 view -0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937 0000 70B5     		push	{r4, r5, r6, lr}
 938              	.LCFI13:
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 4, -16
 941              		.cfi_offset 5, -12
 942              		.cfi_offset 6, -8
 943              		.cfi_offset 14, -4
 120:Src/main.c    ****     return;
 944              		.loc 1 120 3 view .LVU244
 120:Src/main.c    ****     return;
 945              		.loc 1 120 7 is_stmt 0 view .LVU245
 946 0002 1B4B     		ldr	r3, .L31
 947 0004 586A     		ldr	r0, [r3, #36]
 948 0006 FFF7FEFF 		bl	HAL_DMA_GetState
ARM GAS  /tmp/cczUoBVm.s 			page 46


 949              	.LVL47:
 120:Src/main.c    ****     return;
 950              		.loc 1 120 6 view .LVU246
 951 000a 0228     		cmp	r0, #2
 952 000c 2FD0     		beq	.L29
 123:Src/main.c    ****     return;
 953              		.loc 1 123 3 is_stmt 1 view .LVU247
 123:Src/main.c    ****     return;
 954              		.loc 1 123 7 is_stmt 0 view .LVU248
 955 000e 184B     		ldr	r3, .L31
 956 0010 D86A     		ldr	r0, [r3, #44]
 957 0012 FFF7FEFF 		bl	HAL_DMA_GetState
 958              	.LVL48:
 123:Src/main.c    ****     return;
 959              		.loc 1 123 6 view .LVU249
 960 0016 0228     		cmp	r0, #2
 961 0018 29D0     		beq	.L29
 126:Src/main.c    ****     return;
 962              		.loc 1 126 3 is_stmt 1 view .LVU250
 126:Src/main.c    ****     return;
 963              		.loc 1 126 7 is_stmt 0 view .LVU251
 964 001a 154B     		ldr	r3, .L31
 965 001c 186B     		ldr	r0, [r3, #48]
 966 001e FFF7FEFF 		bl	HAL_DMA_GetState
 967              	.LVL49:
 126:Src/main.c    ****     return;
 968              		.loc 1 126 6 view .LVU252
 969 0022 0228     		cmp	r0, #2
 970 0024 23D0     		beq	.L29
 131:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC3], (uint32_t)my_data_buf_fire, (uint32_t)&GPIOB->ODR, d
 971              		.loc 1 131 3 is_stmt 1 view .LVU253
 972 0026 134D     		ldr	r5, .L31+4
 973 0028 114C     		ldr	r4, .L31
 974 002a C823     		movs	r3, #200
 975 002c 124A     		ldr	r2, .L31+8
 976 002e 2900     		movs	r1, r5
 977 0030 606A     		ldr	r0, [r4, #36]
 978 0032 FFF7FEFF 		bl	HAL_DMA_Start_IT
 979              	.LVL50:
 132:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf, (uint32_t)&GPIOC->ODR, data_l
 980              		.loc 1 132 3 view .LVU254
 981 0036 C823     		movs	r3, #200
 982 0038 104A     		ldr	r2, .L31+12
 983 003a 1149     		ldr	r1, .L31+16
 984 003c E06A     		ldr	r0, [r4, #44]
 985 003e FFF7FEFF 		bl	HAL_DMA_Start_IT
 986              	.LVL51:
 133:Src/main.c    **** 
 987              		.loc 1 133 3 view .LVU255
 988 0042 C823     		movs	r3, #200
 989 0044 0F4A     		ldr	r2, .L31+20
 990 0046 2900     		movs	r1, r5
 991 0048 206B     		ldr	r0, [r4, #48]
 992 004a FFF7FEFF 		bl	HAL_DMA_Start_IT
 993              	.LVL52:
 135:Src/main.c    **** 
 994              		.loc 1 135 3 view .LVU256
ARM GAS  /tmp/cczUoBVm.s 			page 47


 135:Src/main.c    **** 
 995              		.loc 1 135 13 is_stmt 0 view .LVU257
 996 004e 8023     		movs	r3, #128
 997 0050 DB05     		lsls	r3, r3, #23
 998 0052 0022     		movs	r2, #0
 999 0054 5A62     		str	r2, [r3, #36]
 137:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 1000              		.loc 1 137 3 is_stmt 1 view .LVU258
 1001 0056 0021     		movs	r1, #0
 1002 0058 2000     		movs	r0, r4
 1003 005a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1004              	.LVL53:
 138:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 1005              		.loc 1 138 3 view .LVU259
 1006 005e 0821     		movs	r1, #8
 1007 0060 2000     		movs	r0, r4
 1008 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1009              	.LVL54:
 139:Src/main.c    **** }
 1010              		.loc 1 139 3 view .LVU260
 1011 0066 0C21     		movs	r1, #12
 1012 0068 2000     		movs	r0, r4
 1013 006a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1014              	.LVL55:
 1015              	.L29:
 140:Src/main.c    **** 
 1016              		.loc 1 140 1 is_stmt 0 view .LVU261
 1017              		@ sp needed
 1018 006e 70BD     		pop	{r4, r5, r6, pc}
 1019              	.L32:
 1020              		.align	2
 1021              	.L31:
 1022 0070 00000000 		.word	htim2
 1023 0074 00000000 		.word	my_data_buf
 1024 0078 14000048 		.word	1207959572
 1025 007c 14040048 		.word	1207960596
 1026 0080 00000000 		.word	my_data_buf_fire
 1027 0084 14080048 		.word	1207961620
 1028              		.cfi_endproc
 1029              	.LFE42:
 1031              		.section	.text.SystemClock_Config,"ax",%progbits
 1032              		.align	1
 1033              		.global	SystemClock_Config
 1034              		.syntax unified
 1035              		.code	16
 1036              		.thumb_func
 1037              		.fpu softvfp
 1039              	SystemClock_Config:
 1040              	.LFB43:
 143:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1041              		.loc 1 143 1 is_stmt 1 view -0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 96
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045 0000 10B5     		push	{r4, lr}
 1046              	.LCFI14:
 1047              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cczUoBVm.s 			page 48


 1048              		.cfi_offset 4, -8
 1049              		.cfi_offset 14, -4
 1050 0002 98B0     		sub	sp, sp, #96
 1051              	.LCFI15:
 1052              		.cfi_def_cfa_offset 104
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1053              		.loc 1 144 3 view .LVU263
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1054              		.loc 1 144 22 is_stmt 0 view .LVU264
 1055 0004 3022     		movs	r2, #48
 1056 0006 0021     		movs	r1, #0
 1057 0008 0CA8     		add	r0, sp, #48
 1058 000a FFF7FEFF 		bl	memset
 1059              	.LVL56:
 145:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1060              		.loc 1 145 3 is_stmt 1 view .LVU265
 145:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1061              		.loc 1 145 22 is_stmt 0 view .LVU266
 1062 000e 1022     		movs	r2, #16
 1063 0010 0021     		movs	r1, #0
 1064 0012 07A8     		add	r0, sp, #28
 1065 0014 FFF7FEFF 		bl	memset
 1066              	.LVL57:
 146:Src/main.c    **** 
 1067              		.loc 1 146 3 is_stmt 1 view .LVU267
 146:Src/main.c    **** 
 1068              		.loc 1 146 28 is_stmt 0 view .LVU268
 1069 0018 1C22     		movs	r2, #28
 1070 001a 0021     		movs	r1, #0
 1071 001c 6846     		mov	r0, sp
 1072 001e FFF7FEFF 		bl	memset
 1073              	.LVL58:
 148:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1074              		.loc 1 148 3 is_stmt 1 view .LVU269
 148:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1075              		.loc 1 148 36 is_stmt 0 view .LVU270
 1076 0022 2223     		movs	r3, #34
 1077 0024 0B93     		str	r3, [sp, #44]
 149:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1078              		.loc 1 149 3 is_stmt 1 view .LVU271
 149:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1079              		.loc 1 149 30 is_stmt 0 view .LVU272
 1080 0026 213B     		subs	r3, r3, #33
 1081 0028 0E93     		str	r3, [sp, #56]
 150:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1082              		.loc 1 150 3 is_stmt 1 view .LVU273
 150:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1083              		.loc 1 150 32 is_stmt 0 view .LVU274
 1084 002a 1393     		str	r3, [sp, #76]
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1085              		.loc 1 151 3 is_stmt 1 view .LVU275
 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1086              		.loc 1 151 41 is_stmt 0 view .LVU276
 1087 002c 0F33     		adds	r3, r3, #15
 1088 002e 0F93     		str	r3, [sp, #60]
 152:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1089              		.loc 1 152 3 is_stmt 1 view .LVU277
ARM GAS  /tmp/cczUoBVm.s 			page 49


 153:Src/main.c    **** 
 1090              		.loc 1 153 3 view .LVU278
 1091 0030 0BA8     		add	r0, sp, #44
 1092 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1093              	.LVL59:
 155:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 1094              		.loc 1 155 3 view .LVU279
 155:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 1095              		.loc 1 155 31 is_stmt 0 view .LVU280
 1096 0036 0723     		movs	r3, #7
 1097 0038 0793     		str	r3, [sp, #28]
 157:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1098              		.loc 1 157 3 is_stmt 1 view .LVU281
 157:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1099              		.loc 1 157 34 is_stmt 0 view .LVU282
 1100 003a 043B     		subs	r3, r3, #4
 1101 003c 0893     		str	r3, [sp, #32]
 158:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1102              		.loc 1 158 3 is_stmt 1 view .LVU283
 158:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1103              		.loc 1 158 35 is_stmt 0 view .LVU284
 1104 003e 0024     		movs	r4, #0
 1105 0040 0994     		str	r4, [sp, #36]
 159:Src/main.c    **** 
 1106              		.loc 1 159 3 is_stmt 1 view .LVU285
 159:Src/main.c    **** 
 1107              		.loc 1 159 36 is_stmt 0 view .LVU286
 1108 0042 0A94     		str	r4, [sp, #40]
 161:Src/main.c    **** 
 1109              		.loc 1 161 3 is_stmt 1 view .LVU287
 1110 0044 0121     		movs	r1, #1
 1111 0046 07A8     		add	r0, sp, #28
 1112 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1113              	.LVL60:
 163:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1114              		.loc 1 163 3 view .LVU288
 163:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1115              		.loc 1 163 38 is_stmt 0 view .LVU289
 1116 004c 8023     		movs	r3, #128
 1117 004e 9B02     		lsls	r3, r3, #10
 1118 0050 0093     		str	r3, [sp]
 164:Src/main.c    **** 
 1119              		.loc 1 164 3 is_stmt 1 view .LVU290
 164:Src/main.c    **** 
 1120              		.loc 1 164 35 is_stmt 0 view .LVU291
 1121 0052 0694     		str	r4, [sp, #24]
 166:Src/main.c    **** 
 1122              		.loc 1 166 3 is_stmt 1 view .LVU292
 1123 0054 6846     		mov	r0, sp
 1124 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1125              	.LVL61:
 168:Src/main.c    **** 
 1126              		.loc 1 168 1 is_stmt 0 view .LVU293
 1127 005a 18B0     		add	sp, sp, #96
 1128              		@ sp needed
 1129 005c 10BD     		pop	{r4, pc}
 1130              		.cfi_endproc
ARM GAS  /tmp/cczUoBVm.s 			page 50


 1131              	.LFE43:
 1133              		.section	.text.main,"ax",%progbits
 1134              		.align	1
 1135              		.global	main
 1136              		.syntax unified
 1137              		.code	16
 1138              		.thumb_func
 1139              		.fpu softvfp
 1141              	main:
 1142              	.LFB41:
  56:Src/main.c    **** 
 1143              		.loc 1 56 1 is_stmt 1 view -0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147 0000 10B5     		push	{r4, lr}
 1148              	.LCFI16:
 1149              		.cfi_def_cfa_offset 8
 1150              		.cfi_offset 4, -8
 1151              		.cfi_offset 14, -4
  58:Src/main.c    **** 
 1152              		.loc 1 58 3 view .LVU295
 1153 0002 FFF7FEFF 		bl	HAL_Init
 1154              	.LVL62:
  60:Src/main.c    **** 
 1155              		.loc 1 60 3 view .LVU296
 1156 0006 FFF7FEFF 		bl	SystemClock_Config
 1157              	.LVL63:
  62:Src/main.c    ****   MX_DMA_Init();
 1158              		.loc 1 62 3 view .LVU297
 1159 000a FFF7FEFF 		bl	MX_GPIO_Init
 1160              	.LVL64:
  63:Src/main.c    ****   MX_TIM1_Init();
 1161              		.loc 1 63 3 view .LVU298
 1162 000e FFF7FEFF 		bl	MX_DMA_Init
 1163              	.LVL65:
  64:Src/main.c    ****   MX_TIM2_Init();
 1164              		.loc 1 64 3 view .LVU299
 1165 0012 FFF7FEFF 		bl	MX_TIM1_Init
 1166              	.LVL66:
  65:Src/main.c    ****   MX_USART3_UART_Init();
 1167              		.loc 1 65 3 view .LVU300
 1168 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1169              	.LVL67:
  66:Src/main.c    ****   MX_USB_DEVICE_Init();
 1170              		.loc 1 66 3 view .LVU301
 1171 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 1172              	.LVL68:
  67:Src/main.c    **** 
 1173              		.loc 1 67 3 view .LVU302
 1174 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1175              	.LVL69:
  69:Src/main.c    ****     dfu_otter_bootloader();
 1176              		.loc 1 69 3 view .LVU303
  69:Src/main.c    ****     dfu_otter_bootloader();
 1177              		.loc 1 69 6 is_stmt 0 view .LVU304
 1178 0022 8021     		movs	r1, #128
ARM GAS  /tmp/cczUoBVm.s 			page 51


 1179 0024 4900     		lsls	r1, r1, #1
 1180 0026 4348     		ldr	r0, .L45
 1181 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1182              	.LVL70:
  69:Src/main.c    ****     dfu_otter_bootloader();
 1183              		.loc 1 69 5 view .LVU305
 1184 002c 0028     		cmp	r0, #0
 1185 002e 01D0     		beq	.L35
  70:Src/main.c    ****   }
 1186              		.loc 1 70 5 is_stmt 1 view .LVU306
 1187 0030 FFF7FEFF 		bl	dfu_otter_bootloader
 1188              	.LVL71:
 1189              	.L35:
  73:Src/main.c    **** 
 1190              		.loc 1 73 3 view .LVU307
 1191 0034 8021     		movs	r1, #128
 1192 0036 0122     		movs	r2, #1
 1193 0038 8901     		lsls	r1, r1, #6
 1194 003a 3E48     		ldr	r0, .L45
 1195 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1196              	.LVL72:
  75:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
 1197              		.loc 1 75 3 view .LVU308
 1198 0040 C822     		movs	r2, #200
 1199 0042 FF21     		movs	r1, #255
 1200 0044 3C48     		ldr	r0, .L45+4
 1201 0046 FFF7FEFF 		bl	memset
 1202              	.LVL73:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1203              		.loc 1 76 3 view .LVU309
 1204              	.LBB28:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1205              		.loc 1 76 8 view .LVU310
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1206              		.loc 1 76 17 is_stmt 0 view .LVU311
 1207 004a 0023     		movs	r3, #0
 1208              	.LVL74:
 1209              	.L36:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1210              		.loc 1 76 3 discriminator 1 view .LVU312
 1211 004c C62B     		cmp	r3, #198
 1212 004e 21D8     		bhi	.L42
  77:Src/main.c    ****     my_data_buf[i + 1] = 0xFF80;
 1213              		.loc 1 77 5 is_stmt 1 discriminator 3 view .LVU313
  77:Src/main.c    ****     my_data_buf[i + 1] = 0xFF80;
 1214              		.loc 1 77 24 is_stmt 0 discriminator 3 view .LVU314
 1215 0050 394A     		ldr	r2, .L45+4
 1216 0052 5900     		lsls	r1, r3, #1
 1217 0054 0320     		movs	r0, #3
 1218 0056 8852     		strh	r0, [r1, r2]
  78:Src/main.c    ****     my_data_buf[i + 2] = 0x0001;
 1219              		.loc 1 78 5 is_stmt 1 discriminator 3 view .LVU315
  78:Src/main.c    ****     my_data_buf[i + 2] = 0x0001;
 1220              		.loc 1 78 19 is_stmt 0 discriminator 3 view .LVU316
 1221 0058 591C     		adds	r1, r3, #1
  78:Src/main.c    ****     my_data_buf[i + 2] = 0x0001;
 1222              		.loc 1 78 24 discriminator 3 view .LVU317
ARM GAS  /tmp/cczUoBVm.s 			page 52


 1223 005a 4900     		lsls	r1, r1, #1
 1224 005c 8338     		subs	r0, r0, #131
 1225 005e 8852     		strh	r0, [r1, r2]
  79:Src/main.c    ****     my_data_buf[i + 3] = 0xFF04;
 1226              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU318
  79:Src/main.c    ****     my_data_buf[i + 3] = 0xFF04;
 1227              		.loc 1 79 19 is_stmt 0 discriminator 3 view .LVU319
 1228 0060 991C     		adds	r1, r3, #2
  79:Src/main.c    ****     my_data_buf[i + 3] = 0xFF04;
 1229              		.loc 1 79 24 discriminator 3 view .LVU320
 1230 0062 4900     		lsls	r1, r1, #1
 1231 0064 8130     		adds	r0, r0, #129
 1232 0066 8852     		strh	r0, [r1, r2]
  80:Src/main.c    ****     my_data_buf[i + 4] = 0x0001;
 1233              		.loc 1 80 5 is_stmt 1 discriminator 3 view .LVU321
  80:Src/main.c    ****     my_data_buf[i + 4] = 0x0001;
 1234              		.loc 1 80 19 is_stmt 0 discriminator 3 view .LVU322
 1235 0068 D91C     		adds	r1, r3, #3
  80:Src/main.c    ****     my_data_buf[i + 4] = 0x0001;
 1236              		.loc 1 80 24 discriminator 3 view .LVU323
 1237 006a 4900     		lsls	r1, r1, #1
 1238 006c FC24     		movs	r4, #252
 1239 006e 6442     		rsbs	r4, r4, #0
 1240 0070 8C52     		strh	r4, [r1, r2]
  81:Src/main.c    ****     my_data_buf[i + 5] = 0xFF08;
 1241              		.loc 1 81 5 is_stmt 1 discriminator 3 view .LVU324
  81:Src/main.c    ****     my_data_buf[i + 5] = 0xFF08;
 1242              		.loc 1 81 19 is_stmt 0 discriminator 3 view .LVU325
 1243 0072 191D     		adds	r1, r3, #4
  81:Src/main.c    ****     my_data_buf[i + 5] = 0xFF08;
 1244              		.loc 1 81 24 discriminator 3 view .LVU326
 1245 0074 4900     		lsls	r1, r1, #1
 1246 0076 8852     		strh	r0, [r1, r2]
  82:Src/main.c    ****     my_data_buf[i + 6] = 0x0001;
 1247              		.loc 1 82 5 is_stmt 1 discriminator 3 view .LVU327
  82:Src/main.c    ****     my_data_buf[i + 6] = 0x0001;
 1248              		.loc 1 82 19 is_stmt 0 discriminator 3 view .LVU328
 1249 0078 591D     		adds	r1, r3, #5
  82:Src/main.c    ****     my_data_buf[i + 6] = 0x0001;
 1250              		.loc 1 82 24 discriminator 3 view .LVU329
 1251 007a 4900     		lsls	r1, r1, #1
 1252 007c 0434     		adds	r4, r4, #4
 1253 007e 8C52     		strh	r4, [r1, r2]
  83:Src/main.c    ****     my_data_buf[i + 7] = 0xFF40;
 1254              		.loc 1 83 5 is_stmt 1 discriminator 3 view .LVU330
  83:Src/main.c    ****     my_data_buf[i + 7] = 0xFF40;
 1255              		.loc 1 83 19 is_stmt 0 discriminator 3 view .LVU331
 1256 0080 991D     		adds	r1, r3, #6
  83:Src/main.c    ****     my_data_buf[i + 7] = 0xFF40;
 1257              		.loc 1 83 24 discriminator 3 view .LVU332
 1258 0082 4900     		lsls	r1, r1, #1
 1259 0084 8852     		strh	r0, [r1, r2]
  84:Src/main.c    ****   }
 1260              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU333
  84:Src/main.c    ****   }
 1261              		.loc 1 84 19 is_stmt 0 discriminator 3 view .LVU334
 1262 0086 D91D     		adds	r1, r3, #7
ARM GAS  /tmp/cczUoBVm.s 			page 53


  84:Src/main.c    ****   }
 1263              		.loc 1 84 24 discriminator 3 view .LVU335
 1264 0088 4900     		lsls	r1, r1, #1
 1265 008a C138     		subs	r0, r0, #193
 1266 008c 8852     		strh	r0, [r1, r2]
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1267              		.loc 1 76 44 discriminator 3 view .LVU336
 1268 008e 0833     		adds	r3, r3, #8
 1269              	.LVL75:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1270              		.loc 1 76 44 discriminator 3 view .LVU337
 1271 0090 9BB2     		uxth	r3, r3
 1272              	.LVL76:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1273              		.loc 1 76 44 discriminator 3 view .LVU338
 1274 0092 DBE7     		b	.L36
 1275              	.L42:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0x0003;
 1276              		.loc 1 76 44 discriminator 3 view .LVU339
 1277              	.LBE28:
  87:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
 1278              		.loc 1 87 3 is_stmt 1 view .LVU340
 1279 0094 C822     		movs	r2, #200
 1280 0096 0021     		movs	r1, #0
 1281 0098 2748     		ldr	r0, .L45+4
 1282 009a FFF7FEFF 		bl	memset
 1283              	.LVL77:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1284              		.loc 1 88 3 view .LVU341
 1285              	.LBB29:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1286              		.loc 1 88 8 view .LVU342
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1287              		.loc 1 88 17 is_stmt 0 view .LVU343
 1288 009e 0023     		movs	r3, #0
 1289              	.LVL78:
 1290              	.L38:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1291              		.loc 1 88 3 discriminator 1 view .LVU344
 1292 00a0 C62B     		cmp	r3, #198
 1293 00a2 15D8     		bhi	.L43
  89:Src/main.c    ****     my_data_buf_fire[i + 1] = 0x00;
 1294              		.loc 1 89 5 is_stmt 1 discriminator 3 view .LVU345
  89:Src/main.c    ****     my_data_buf_fire[i + 1] = 0x00;
 1295              		.loc 1 89 29 is_stmt 0 discriminator 3 view .LVU346
 1296 00a4 254A     		ldr	r2, .L45+8
 1297 00a6 0221     		movs	r1, #2
 1298 00a8 D154     		strb	r1, [r2, r3]
  90:Src/main.c    ****     my_data_buf_fire[i + 2] = 0x00;
 1299              		.loc 1 90 5 is_stmt 1 discriminator 3 view .LVU347
  90:Src/main.c    ****     my_data_buf_fire[i + 2] = 0x00;
 1300              		.loc 1 90 24 is_stmt 0 discriminator 3 view .LVU348
 1301 00aa 581C     		adds	r0, r3, #1
  90:Src/main.c    ****     my_data_buf_fire[i + 2] = 0x00;
 1302              		.loc 1 90 29 discriminator 3 view .LVU349
 1303 00ac 0021     		movs	r1, #0
 1304 00ae 1154     		strb	r1, [r2, r0]
ARM GAS  /tmp/cczUoBVm.s 			page 54


  91:Src/main.c    ****     my_data_buf_fire[i + 3] = 0x00;
 1305              		.loc 1 91 5 is_stmt 1 discriminator 3 view .LVU350
  91:Src/main.c    ****     my_data_buf_fire[i + 3] = 0x00;
 1306              		.loc 1 91 24 is_stmt 0 discriminator 3 view .LVU351
 1307 00b0 981C     		adds	r0, r3, #2
  91:Src/main.c    ****     my_data_buf_fire[i + 3] = 0x00;
 1308              		.loc 1 91 29 discriminator 3 view .LVU352
 1309 00b2 1154     		strb	r1, [r2, r0]
  92:Src/main.c    ****     my_data_buf_fire[i + 4] = 0x01;//01
 1310              		.loc 1 92 5 is_stmt 1 discriminator 3 view .LVU353
  92:Src/main.c    ****     my_data_buf_fire[i + 4] = 0x01;//01
 1311              		.loc 1 92 24 is_stmt 0 discriminator 3 view .LVU354
 1312 00b4 D81C     		adds	r0, r3, #3
  92:Src/main.c    ****     my_data_buf_fire[i + 4] = 0x01;//01
 1313              		.loc 1 92 29 discriminator 3 view .LVU355
 1314 00b6 1154     		strb	r1, [r2, r0]
  93:Src/main.c    ****     my_data_buf_fire[i + 5] = 0x00;
 1315              		.loc 1 93 5 is_stmt 1 discriminator 3 view .LVU356
  93:Src/main.c    ****     my_data_buf_fire[i + 5] = 0x00;
 1316              		.loc 1 93 24 is_stmt 0 discriminator 3 view .LVU357
 1317 00b8 181D     		adds	r0, r3, #4
  93:Src/main.c    ****     my_data_buf_fire[i + 5] = 0x00;
 1318              		.loc 1 93 29 discriminator 3 view .LVU358
 1319 00ba 0124     		movs	r4, #1
 1320 00bc 1454     		strb	r4, [r2, r0]
  94:Src/main.c    ****     my_data_buf_fire[i + 6] = 0x00;
 1321              		.loc 1 94 5 is_stmt 1 discriminator 3 view .LVU359
  94:Src/main.c    ****     my_data_buf_fire[i + 6] = 0x00;
 1322              		.loc 1 94 24 is_stmt 0 discriminator 3 view .LVU360
 1323 00be 581D     		adds	r0, r3, #5
  94:Src/main.c    ****     my_data_buf_fire[i + 6] = 0x00;
 1324              		.loc 1 94 29 discriminator 3 view .LVU361
 1325 00c0 1154     		strb	r1, [r2, r0]
  95:Src/main.c    ****     my_data_buf_fire[i + 7] = 0x00;
 1326              		.loc 1 95 5 is_stmt 1 discriminator 3 view .LVU362
  95:Src/main.c    ****     my_data_buf_fire[i + 7] = 0x00;
 1327              		.loc 1 95 24 is_stmt 0 discriminator 3 view .LVU363
 1328 00c2 981D     		adds	r0, r3, #6
  95:Src/main.c    ****     my_data_buf_fire[i + 7] = 0x00;
 1329              		.loc 1 95 29 discriminator 3 view .LVU364
 1330 00c4 1154     		strb	r1, [r2, r0]
  96:Src/main.c    ****   }
 1331              		.loc 1 96 5 is_stmt 1 discriminator 3 view .LVU365
  96:Src/main.c    ****   }
 1332              		.loc 1 96 24 is_stmt 0 discriminator 3 view .LVU366
 1333 00c6 D81D     		adds	r0, r3, #7
  96:Src/main.c    ****   }
 1334              		.loc 1 96 29 discriminator 3 view .LVU367
 1335 00c8 1154     		strb	r1, [r2, r0]
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1336              		.loc 1 88 44 discriminator 3 view .LVU368
 1337 00ca 0833     		adds	r3, r3, #8
 1338              	.LVL79:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1339              		.loc 1 88 44 discriminator 3 view .LVU369
 1340 00cc 9BB2     		uxth	r3, r3
 1341              	.LVL80:
ARM GAS  /tmp/cczUoBVm.s 			page 55


  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1342              		.loc 1 88 44 discriminator 3 view .LVU370
 1343 00ce E7E7     		b	.L38
 1344              	.L43:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1345              		.loc 1 88 44 discriminator 3 view .LVU371
 1346              	.LBE29:
  99:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1347              		.loc 1 99 3 is_stmt 1 view .LVU372
  99:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1348              		.loc 1 99 13 is_stmt 0 view .LVU373
 1349 00d0 1B4A     		ldr	r2, .L45+12
 1350 00d2 536A     		ldr	r3, [r2, #36]
 1351              	.LVL81:
  99:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1352              		.loc 1 99 48 view .LVU374
 1353 00d4 1B49     		ldr	r1, .L45+16
 1354 00d6 9962     		str	r1, [r3, #40]
 100:Src/main.c    **** 
 1355              		.loc 1 100 3 is_stmt 1 view .LVU375
 1356 00d8 1368     		ldr	r3, [r2]
 1357 00da D868     		ldr	r0, [r3, #12]
 1358 00dc 8021     		movs	r1, #128
 1359 00de 8900     		lsls	r1, r1, #2
 1360 00e0 0143     		orrs	r1, r0
 1361 00e2 D960     		str	r1, [r3, #12]
 102:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 1362              		.loc 1 102 3 view .LVU376
 102:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 1363              		.loc 1 102 13 is_stmt 0 view .LVU377
 1364 00e4 D16A     		ldr	r1, [r2, #44]
 102:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 1365              		.loc 1 102 48 view .LVU378
 1366 00e6 1848     		ldr	r0, .L45+20
 1367 00e8 8862     		str	r0, [r1, #40]
 103:Src/main.c    **** 
 1368              		.loc 1 103 3 is_stmt 1 view .LVU379
 1369 00ea D868     		ldr	r0, [r3, #12]
 1370 00ec 8021     		movs	r1, #128
 1371 00ee 0901     		lsls	r1, r1, #4
 1372 00f0 0143     		orrs	r1, r0
 1373 00f2 D960     		str	r1, [r3, #12]
 105:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1374              		.loc 1 105 3 view .LVU380
 105:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1375              		.loc 1 105 13 is_stmt 0 view .LVU381
 1376 00f4 126B     		ldr	r2, [r2, #48]
 105:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1377              		.loc 1 105 48 view .LVU382
 1378 00f6 1549     		ldr	r1, .L45+24
 1379 00f8 9162     		str	r1, [r2, #40]
 106:Src/main.c    **** 
 1380              		.loc 1 106 3 is_stmt 1 view .LVU383
 1381 00fa D968     		ldr	r1, [r3, #12]
 1382 00fc 8022     		movs	r2, #128
 1383 00fe 5201     		lsls	r2, r2, #5
 1384 0100 0A43     		orrs	r2, r1
ARM GAS  /tmp/cczUoBVm.s 			page 56


 1385 0102 DA60     		str	r2, [r3, #12]
 1386 0104 07E0     		b	.L40
 1387              	.L44:
 1388              	.LBB30:
 112:Src/main.c    ****       startDMA();
 1389              		.loc 1 112 7 view .LVU384
 1390 0106 8021     		movs	r1, #128
 1391 0108 0122     		movs	r2, #1
 1392 010a 4901     		lsls	r1, r1, #5
 1393 010c 2000     		movs	r0, r4
 1394 010e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1395              	.LVL82:
 113:Src/main.c    ****     }
 1396              		.loc 1 113 7 view .LVU385
 1397 0112 FFF7FEFF 		bl	startDMA
 1398              	.LVL83:
 1399              	.L40:
 1400              	.LBE30:
 108:Src/main.c    ****   {
 1401              		.loc 1 108 3 view .LVU386
 110:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 1402              		.loc 1 110 5 view .LVU387
 1403 0116 8021     		movs	r1, #128
 1404 0118 064C     		ldr	r4, .L45
 1405 011a 0122     		movs	r2, #1
 1406 011c 8901     		lsls	r1, r1, #6
 1407 011e 2000     		movs	r0, r4
 1408 0120 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1409              	.LVL84:
 111:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 1410              		.loc 1 111 5 view .LVU388
 111:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 1411              		.loc 1 111 8 is_stmt 0 view .LVU389
 1412 0124 8021     		movs	r1, #128
 1413 0126 4900     		lsls	r1, r1, #1
 1414 0128 2000     		movs	r0, r4
 1415 012a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1416              	.LVL85:
 111:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 1417              		.loc 1 111 7 view .LVU390
 1418 012e 0028     		cmp	r0, #0
 1419 0130 F1D0     		beq	.L40
 1420 0132 E8E7     		b	.L44
 1421              	.L46:
 1422              		.align	2
 1423              	.L45:
 1424 0134 00040048 		.word	1207960576
 1425 0138 00000000 		.word	my_data_buf
 1426 013c 00000000 		.word	my_data_buf_fire
 1427 0140 00000000 		.word	htim2
 1428 0144 00000000 		.word	dataTransmittedHandler0
 1429 0148 00000000 		.word	dataTransmittedHandler1
 1430 014c 00000000 		.word	dataTransmittedHandler2
 1431              		.cfi_endproc
 1432              	.LFE41:
 1434              		.section	.text.Error_Handler,"ax",%progbits
 1435              		.align	1
ARM GAS  /tmp/cczUoBVm.s 			page 57


 1436              		.global	Error_Handler
 1437              		.syntax unified
 1438              		.code	16
 1439              		.thumb_func
 1440              		.fpu softvfp
 1442              	Error_Handler:
 1443              	.LFB49:
 321:Src/main.c    **** 
 322:Src/main.c    **** void Error_Handler(void)
 323:Src/main.c    **** {
 1444              		.loc 1 323 1 is_stmt 1 view -0
 1445              		.cfi_startproc
 1446              		@ args = 0, pretend = 0, frame = 0
 1447              		@ frame_needed = 0, uses_anonymous_args = 0
 1448              		@ link register save eliminated.
 324:Src/main.c    **** 
 325:Src/main.c    **** }...
 1449              		.loc 1 325 1 view .LVU392
 1450              		@ sp needed
 1451 0000 7047     		bx	lr
 1452              		.cfi_endproc
 1453              	.LFE49:
 1455              		.comm	my_data_buf_fire,200,4
 1456              		.comm	my_data_buf,400,4
 1457              		.global	PER
 1458              		.comm	hdma_tim2_uev,68,4
 1459              		.comm	hdma_usart3_tx,68,4
 1460              		.comm	hdma_usart3_rx,68,4
 1461              		.comm	huart3,112,4
 1462              		.comm	hdma_tim2_ch3,68,4
 1463              		.comm	hdma_tim2_ch4,68,4
 1464              		.comm	hdma_tim2_ch1,68,4
 1465              		.comm	htim3,64,4
 1466              		.comm	htim2,64,4
 1467              		.comm	htim1,64,4
 1468              		.section	.data.PER,"aw"
 1469              		.align	1
 1470              		.set	.LANCHOR0,. + 0
 1473              	PER:
 1474 0000 1E00     		.short	30
 1475              		.text
 1476              	.Letext0:
 1477              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1478              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1479              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1480              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1481              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1482              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1483              		.file 10 "/usr/lib/gcc/arm-none-eabi/8.3.0/include/stddef.h"
 1484              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 1485              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1486              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1487              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1488              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1489              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1490              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1491              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
ARM GAS  /tmp/cczUoBVm.s 			page 58


 1492              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 1493              		.file 20 "/usr/arm-none-eabi/include/stdlib.h"
 1494              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1495              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1496              		.file 23 "Inc/usb_device.h"
 1497              		.file 24 "/usr/arm-none-eabi/include/string.h"
 1498              		.file 25 "<built-in>"
ARM GAS  /tmp/cczUoBVm.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cczUoBVm.s:16     .text.dataTransmittedHandler0:0000000000000000 $t
     /tmp/cczUoBVm.s:24     .text.dataTransmittedHandler0:0000000000000000 dataTransmittedHandler0
     /tmp/cczUoBVm.s:58     .text.dataTransmittedHandler0:0000000000000018 $d
                            *COM*:0000000000000040 htim2
     /tmp/cczUoBVm.s:64     .text.dataTransmittedHandler1:0000000000000000 $t
     /tmp/cczUoBVm.s:71     .text.dataTransmittedHandler1:0000000000000000 dataTransmittedHandler1
     /tmp/cczUoBVm.s:117    .text.dataTransmittedHandler1:0000000000000030 $d
     /tmp/cczUoBVm.s:124    .text.dataTransmittedHandler2:0000000000000000 $t
     /tmp/cczUoBVm.s:131    .text.dataTransmittedHandler2:0000000000000000 dataTransmittedHandler2
     /tmp/cczUoBVm.s:157    .text.dataTransmittedHandler2:000000000000000c $d
     /tmp/cczUoBVm.s:162    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cczUoBVm.s:168    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cczUoBVm.s:374    .text.MX_GPIO_Init:00000000000000e0 $d
     /tmp/cczUoBVm.s:384    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cczUoBVm.s:390    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cczUoBVm.s:446    .text.MX_DMA_Init:000000000000003c $d
     /tmp/cczUoBVm.s:451    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cczUoBVm.s:457    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cczUoBVm.s:549    .text.MX_TIM1_Init:000000000000004c $d
                            *COM*:0000000000000040 htim1
     /tmp/cczUoBVm.s:556    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cczUoBVm.s:562    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cczUoBVm.s:760    .text.MX_TIM2_Init:00000000000000e0 $d
     /tmp/cczUoBVm.s:766    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cczUoBVm.s:772    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cczUoBVm.s:828    .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart3
     /tmp/cczUoBVm.s:834    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/cczUoBVm.s:841    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/cczUoBVm.s:912    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/cczUoBVm.s:924    .text.startDMA:0000000000000000 $t
     /tmp/cczUoBVm.s:931    .text.startDMA:0000000000000000 startDMA
     /tmp/cczUoBVm.s:1022   .text.startDMA:0000000000000070 $d
                            *COM*:0000000000000190 my_data_buf
                            *COM*:00000000000000c8 my_data_buf_fire
     /tmp/cczUoBVm.s:1032   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cczUoBVm.s:1039   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cczUoBVm.s:1134   .text.main:0000000000000000 $t
     /tmp/cczUoBVm.s:1141   .text.main:0000000000000000 main
     /tmp/cczUoBVm.s:1424   .text.main:0000000000000134 $d
     /tmp/cczUoBVm.s:1435   .text.Error_Handler:0000000000000000 $t
     /tmp/cczUoBVm.s:1442   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cczUoBVm.s:1473   .data.PER:0000000000000000 PER
                            *COM*:0000000000000044 hdma_tim2_uev
                            *COM*:0000000000000044 hdma_usart3_tx
                            *COM*:0000000000000044 hdma_usart3_rx
                            *COM*:0000000000000044 hdma_tim2_ch3
                            *COM*:0000000000000044 hdma_tim2_ch4
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000040 htim3
     /tmp/cczUoBVm.s:1469   .data.PER:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_TIM_PWM_Stop
ARM GAS  /tmp/cczUoBVm.s 			page 60


memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_uidiv
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_UART_Init
HAL_DMA_GetState
HAL_DMA_Start_IT
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
HAL_GPIO_ReadPin
