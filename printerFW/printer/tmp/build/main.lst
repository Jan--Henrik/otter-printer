ARM GAS  /tmp/ccoISNnH.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.dataTransmittedHandler0,"ax",%progbits
  16              		.align	1
  17              		.global	dataTransmittedHandler0
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	dataTransmittedHandler0:
  24              	.LFB38:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** #include "main.h"
   2:Src/main.c    **** #include "usb_device.h"
   3:Src/main.c    **** 
   4:Src/main.c    **** TIM_HandleTypeDef htim1;
   5:Src/main.c    **** TIM_HandleTypeDef htim2;
   6:Src/main.c    **** TIM_HandleTypeDef htim3;
   7:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch1;
   8:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch4;
   9:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch3;
  10:Src/main.c    **** 
  11:Src/main.c    **** UART_HandleTypeDef huart3;
  12:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_rx;
  13:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_tx;
  14:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_uev;
  15:Src/main.c    **** 
  16:Src/main.c    **** uint16_t PER = 30;
  17:Src/main.c    **** 
  18:Src/main.c    **** void SystemClock_Config(void);
  19:Src/main.c    **** static void MX_GPIO_Init(void);
  20:Src/main.c    **** static void MX_DMA_Init(void);
  21:Src/main.c    **** static void MX_TIM1_Init(void);
  22:Src/main.c    **** static void MX_TIM2_Init(void);
  23:Src/main.c    **** static void MX_USART3_UART_Init(void);
  24:Src/main.c    **** void transmit_error_handler(DMA_HandleTypeDef * hdma);
  25:Src/main.c    **** void data_tramsmitted_handler(DMA_HandleTypeDef * hdma);
  26:Src/main.c    **** void dma_init();
  27:Src/main.c    **** 
  28:Src/main.c    **** void dfu_otter_bootloader(void)
  29:Src/main.c    **** {
  30:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
  31:Src/main.c    ****   NVIC_SystemReset();
  32:Src/main.c    **** }
  33:Src/main.c    **** 
ARM GAS  /tmp/ccoISNnH.s 			page 2


  34:Src/main.c    **** #define data_len 200
  35:Src/main.c    **** uint16_t my_data_buf[data_len];
  36:Src/main.c    **** 
  37:Src/main.c    **** uint8_t my_data_buf_fire[data_len];
  38:Src/main.c    **** 
  39:Src/main.c    **** void dataTransmittedHandler0(DMA_HandleTypeDef *hdma) {
  26              		.loc 1 39 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
  40:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 0);
  36              		.loc 1 40 0
  37 0002 8021     		movs	r1, #128
  38 0004 0022     		movs	r2, #0
  39 0006 4901     		lsls	r1, r1, #5
  40 0008 0348     		ldr	r0, .L2
  41              	.LVL1:
  42 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  43              	.LVL2:
  41:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
  44              		.loc 1 41 0
  45 000e 0021     		movs	r1, #0
  46 0010 0248     		ldr	r0, .L2+4
  47 0012 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  48              	.LVL3:
  42:Src/main.c    **** }
  49              		.loc 1 42 0
  50              		@ sp needed
  51 0016 10BD     		pop	{r4, pc}
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 0018 00040048 		.word	1207960576
  56 001c 00000000 		.word	htim2
  57              		.cfi_endproc
  58              	.LFE38:
  60              		.section	.text.dataTransmittedHandler1,"ax",%progbits
  61              		.align	1
  62              		.global	dataTransmittedHandler1
  63              		.syntax unified
  64              		.code	16
  65              		.thumb_func
  66              		.fpu softvfp
  68              	dataTransmittedHandler1:
  69              	.LFB39:
  43:Src/main.c    **** 
  44:Src/main.c    **** void dataTransmittedHandler1(DMA_HandleTypeDef *hdma) {
  70              		.loc 1 44 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccoISNnH.s 			page 3


  74              	.LVL4:
  75 0000 10B5     		push	{r4, lr}
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
  45:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 0);
  80              		.loc 1 45 0
  81 0002 8021     		movs	r1, #128
  82 0004 0022     		movs	r2, #0
  83 0006 8901     		lsls	r1, r1, #6
  84 0008 0948     		ldr	r0, .L5
  85              	.LVL5:
  86 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL6:
  46:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
  88              		.loc 1 46 0
  89 000e 0821     		movs	r1, #8
  90 0010 0848     		ldr	r0, .L5+4
  91 0012 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  92              	.LVL7:
  47:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, F5_Pin, 0);
  93              		.loc 1 47 0
  94 0016 084C     		ldr	r4, .L5+8
  95 0018 0022     		movs	r2, #0
  96 001a 0221     		movs	r1, #2
  97 001c 2000     		movs	r0, r4
  98 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
  99              	.LVL8:
  48:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, F3_Pin, 0);
 100              		.loc 1 48 0
 101 0022 0022     		movs	r2, #0
 102 0024 0121     		movs	r1, #1
 103 0026 2000     		movs	r0, r4
 104 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 105              	.LVL9:
  49:Src/main.c    **** }
 106              		.loc 1 49 0
 107              		@ sp needed
 108 002c 10BD     		pop	{r4, pc}
 109              	.L6:
 110 002e C046     		.align	2
 111              	.L5:
 112 0030 00040048 		.word	1207960576
 113 0034 00000000 		.word	htim2
 114 0038 00080048 		.word	1207961600
 115              		.cfi_endproc
 116              	.LFE39:
 118              		.section	.text.dataTransmittedHandler2,"ax",%progbits
 119              		.align	1
 120              		.global	dataTransmittedHandler2
 121              		.syntax unified
 122              		.code	16
 123              		.thumb_func
 124              		.fpu softvfp
 126              	dataTransmittedHandler2:
 127              	.LFB40:
ARM GAS  /tmp/ccoISNnH.s 			page 4


  50:Src/main.c    **** 
  51:Src/main.c    **** void dataTransmittedHandler2(DMA_HandleTypeDef *hdma) {
 128              		.loc 1 51 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL10:
 133 0000 10B5     		push	{r4, lr}
 134              	.LCFI2:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
 137              		.cfi_offset 14, -4
  52:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 138              		.loc 1 52 0
 139 0002 0C21     		movs	r1, #12
 140 0004 0148     		ldr	r0, .L8
 141              	.LVL11:
 142 0006 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 143              	.LVL12:
  53:Src/main.c    **** }
 144              		.loc 1 53 0
 145              		@ sp needed
 146 000a 10BD     		pop	{r4, pc}
 147              	.L9:
 148              		.align	2
 149              	.L8:
 150 000c 00000000 		.word	htim2
 151              		.cfi_endproc
 152              	.LFE40:
 154              		.section	.text.MX_GPIO_Init,"ax",%progbits
 155              		.align	1
 156              		.syntax unified
 157              		.code	16
 158              		.thumb_func
 159              		.fpu softvfp
 161              	MX_GPIO_Init:
 162              	.LFB48:
  54:Src/main.c    **** 
  55:Src/main.c    **** int main(void)
  56:Src/main.c    **** {
  57:Src/main.c    **** 
  58:Src/main.c    ****   HAL_Init();
  59:Src/main.c    **** 
  60:Src/main.c    ****   SystemClock_Config();
  61:Src/main.c    **** 
  62:Src/main.c    ****   MX_GPIO_Init();
  63:Src/main.c    ****   MX_DMA_Init();
  64:Src/main.c    ****   MX_TIM1_Init();
  65:Src/main.c    ****   MX_TIM2_Init();
  66:Src/main.c    ****   MX_USART3_UART_Init();
  67:Src/main.c    ****   MX_USB_DEVICE_Init();
  68:Src/main.c    **** 
  69:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
  70:Src/main.c    ****     dfu_otter_bootloader();
  71:Src/main.c    ****   }
  72:Src/main.c    **** 
  73:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
ARM GAS  /tmp/ccoISNnH.s 			page 5


  74:Src/main.c    **** 
  75:Src/main.c    ****   memset(my_data_buf, 0xFF, data_len);
  76:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
  77:Src/main.c    ****     my_data_buf[i + 0] = 0xFF83;
  78:Src/main.c    ****     my_data_buf[i + 1] = 0xFF00;
  79:Src/main.c    ****     my_data_buf[i + 2] = 0x0005;
  80:Src/main.c    ****     my_data_buf[i + 3] = 0xFF00;
  81:Src/main.c    ****     my_data_buf[i + 4] = 0x0009;
  82:Src/main.c    ****     my_data_buf[i + 5] = 0x0000;
  83:Src/main.c    ****     my_data_buf[i + 6] = 0xFF41;
  84:Src/main.c    ****     my_data_buf[i + 7] = 0x0000;
  85:Src/main.c    ****   }
  86:Src/main.c    **** 
  87:Src/main.c    ****   memset(my_data_buf, 0x00, data_len);
  88:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
  89:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
  90:Src/main.c    ****     my_data_buf_fire[i + 1] = 0x00;
  91:Src/main.c    ****     my_data_buf_fire[i + 2] = 0x00;
  92:Src/main.c    ****     my_data_buf_fire[i + 3] = 0x00;
  93:Src/main.c    ****     my_data_buf_fire[i + 4] = 0x01;//01
  94:Src/main.c    ****     my_data_buf_fire[i + 5] = 0x00;
  95:Src/main.c    ****     my_data_buf_fire[i + 6] = 0x00;
  96:Src/main.c    ****     my_data_buf_fire[i + 7] = 0x00;
  97:Src/main.c    ****   }
  98:Src/main.c    **** 
  99:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dataTransmittedHandler0;
 100:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 101:Src/main.c    **** 
 102:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dataTransmittedHandler1;
 103:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 104:Src/main.c    **** 
 105:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dataTransmittedHandler2;
 106:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 107:Src/main.c    **** 
 108:Src/main.c    ****   while (1)
 109:Src/main.c    ****   {
 110:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
 111:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 112:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 113:Src/main.c    ****       startDMA();
 114:Src/main.c    ****     }
 115:Src/main.c    ****   }
 116:Src/main.c    **** }
 117:Src/main.c    **** void startDMA() {
 118:Src/main.c    **** 
 119:Src/main.c    **** 
 120:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC1]) == HAL_DMA_STATE_BUSY) {
 121:Src/main.c    ****     return;
 122:Src/main.c    ****   }
 123:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC3]) == HAL_DMA_STATE_BUSY) {
 124:Src/main.c    ****     return;
 125:Src/main.c    ****   }
 126:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC4]) == HAL_DMA_STATE_BUSY) {
 127:Src/main.c    ****     return;
 128:Src/main.c    ****   }
 129:Src/main.c    **** 
 130:Src/main.c    **** 
ARM GAS  /tmp/ccoISNnH.s 			page 6


 131:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC1], (uint32_t)my_data_buf, (uint32_t)&GPIOA->ODR, data_l
 132:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC3], (uint32_t)my_data_buf_fire, (uint32_t)&GPIOB->ODR, d
 133:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf, (uint32_t)&GPIOC->ODR, data_l
 134:Src/main.c    **** 
 135:Src/main.c    ****   TIM2->CNT = 0u;
 136:Src/main.c    **** 
 137:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 138:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 139:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 140:Src/main.c    **** }
 141:Src/main.c    **** 
 142:Src/main.c    **** void SystemClock_Config(void)
 143:Src/main.c    **** {
 144:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 145:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 146:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 147:Src/main.c    **** 
 148:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 149:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 150:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 151:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 152:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 153:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 154:Src/main.c    **** 
 155:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 156:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 157:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 158:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 159:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 160:Src/main.c    **** 
 161:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 162:Src/main.c    **** 
 163:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 164:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 165:Src/main.c    **** 
 166:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 167:Src/main.c    **** 
 168:Src/main.c    **** }
 169:Src/main.c    **** 
 170:Src/main.c    **** static void MX_TIM1_Init(void)
 171:Src/main.c    **** {
 172:Src/main.c    **** 
 173:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 174:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 175:Src/main.c    **** 
 176:Src/main.c    ****   htim1.Instance = TIM1;
 177:Src/main.c    ****   htim1.Init.Prescaler = 0;
 178:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 179:Src/main.c    ****   htim1.Init.Period = 0;
 180:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 181:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 182:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 183:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 184:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 185:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 186:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 187:Src/main.c    ****   sConfig.IC1Filter = 0;
ARM GAS  /tmp/ccoISNnH.s 			page 7


 188:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 189:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 190:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 191:Src/main.c    ****   sConfig.IC2Filter = 0;
 192:Src/main.c    ****   HAL_TIM_Encoder_Init(&htim1, &sConfig);
 193:Src/main.c    ****   
 194:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 195:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 196:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 197:Src/main.c    ****   
 198:Src/main.c    **** 
 199:Src/main.c    **** }
 200:Src/main.c    **** 
 201:Src/main.c    **** static void MX_TIM2_Init(void)
 202:Src/main.c    **** {
 203:Src/main.c    **** 
 204:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 205:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 206:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 207:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 208:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 209:Src/main.c    **** 
 210:Src/main.c    ****   htim2.Instance = TIM2;
 211:Src/main.c    ****   htim2.Init.Prescaler = 0;
 212:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 213:Src/main.c    ****   htim2.Init.Period = PER;
 214:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 215:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 216:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 217:Src/main.c    ****   
 218:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 219:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 220:Src/main.c    ****  
 221:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 222:Src/main.c    **** 
 223:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 224:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 225:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 226:Src/main.c    **** 
 227:Src/main.c    ****   sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 228:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 229:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 230:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 231:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 232:Src/main.c    ****  
 233:Src/main.c    ****   sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 234:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 235:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 236:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 237:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 238:Src/main.c    **** 
 239:Src/main.c    ****   sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 240:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 241:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 242:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 243:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3);
 244:Src/main.c    **** }
ARM GAS  /tmp/ccoISNnH.s 			page 8


 245:Src/main.c    **** 
 246:Src/main.c    **** static void MX_USART3_UART_Init(void)
 247:Src/main.c    **** {
 248:Src/main.c    ****   huart3.Instance = USART3;
 249:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 250:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 251:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 252:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 253:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 254:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 255:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 256:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 257:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 258:Src/main.c    ****   HAL_UART_Init(&huart3);
 259:Src/main.c    **** }
 260:Src/main.c    **** 
 261:Src/main.c    **** static void MX_DMA_Init(void)
 262:Src/main.c    **** {
 263:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 264:Src/main.c    **** 
 265:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 266:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 267:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 268:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** static void MX_GPIO_Init(void)
 272:Src/main.c    **** {
 163              		.loc 1 272 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 32
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 168              	.LCFI3:
 169              		.cfi_def_cfa_offset 20
 170              		.cfi_offset 4, -20
 171              		.cfi_offset 5, -16
 172              		.cfi_offset 6, -12
 173              		.cfi_offset 7, -8
 174              		.cfi_offset 14, -4
 175 0002 89B0     		sub	sp, sp, #36
 176              	.LCFI4:
 177              		.cfi_def_cfa_offset 56
 273:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 178              		.loc 1 273 0
 179 0004 1422     		movs	r2, #20
 180 0006 0021     		movs	r1, #0
 181 0008 03A8     		add	r0, sp, #12
 182 000a FFF7FEFF 		bl	memset
 183              	.LVL13:
 184              	.LBB8:
 274:Src/main.c    **** 
 275:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 185              		.loc 1 275 0
 186 000e 344B     		ldr	r3, .L11
 187 0010 5969     		ldr	r1, [r3, #20]
 188 0012 8020     		movs	r0, #128
ARM GAS  /tmp/ccoISNnH.s 			page 9


 189 0014 0003     		lsls	r0, r0, #12
 190 0016 0143     		orrs	r1, r0
 191 0018 5961     		str	r1, [r3, #20]
 192 001a 5A69     		ldr	r2, [r3, #20]
 193 001c 0240     		ands	r2, r0
 194 001e 0092     		str	r2, [sp]
 195 0020 009A     		ldr	r2, [sp]
 196              	.LBE8:
 197              	.LBB9:
 276:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 198              		.loc 1 276 0
 199 0022 5969     		ldr	r1, [r3, #20]
 200 0024 8020     		movs	r0, #128
 201 0026 8002     		lsls	r0, r0, #10
 202 0028 0143     		orrs	r1, r0
 203 002a 5961     		str	r1, [r3, #20]
 204 002c 5A69     		ldr	r2, [r3, #20]
 205 002e 0240     		ands	r2, r0
 206 0030 0192     		str	r2, [sp, #4]
 207 0032 019A     		ldr	r2, [sp, #4]
 208              	.LBE9:
 209              	.LBB10:
 277:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 210              		.loc 1 277 0
 211 0034 5A69     		ldr	r2, [r3, #20]
 212 0036 8021     		movs	r1, #128
 213 0038 C902     		lsls	r1, r1, #11
 214 003a 0A43     		orrs	r2, r1
 215 003c 5A61     		str	r2, [r3, #20]
 216 003e 5B69     		ldr	r3, [r3, #20]
 217 0040 0B40     		ands	r3, r1
 218 0042 0293     		str	r3, [sp, #8]
 219 0044 029B     		ldr	r3, [sp, #8]
 220              	.LBE10:
 278:Src/main.c    **** 
 279:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, D1_Pin | D2_Pin | D3_Pin, GPIO_PIN_RESET);
 221              		.loc 1 279 0
 222 0046 E024     		movs	r4, #224
 223 0048 2402     		lsls	r4, r4, #8
 224 004a 0022     		movs	r2, #0
 225 004c 2100     		movs	r1, r4
 226 004e 2548     		ldr	r0, .L11+4
 227 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 228              	.LVL14:
 280:Src/main.c    **** 
 281:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 229              		.loc 1 281 0
 230 0054 0022     		movs	r2, #0
 231 0056 2449     		ldr	r1, .L11+8
 232 0058 9020     		movs	r0, #144
 233 005a C005     		lsls	r0, r0, #23
 234 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 235              	.LVL15:
 282:Src/main.c    ****                     | S4_Pin | S1_Pin | LED_STATUSA15_Pin, GPIO_PIN_RESET);
 283:Src/main.c    **** 
 284:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin | LED_POWER_Pin | CSYNC_Pin  | F3_Pin | F5_Pin, GPIO_PIN_
 236              		.loc 1 284 0
ARM GAS  /tmp/ccoISNnH.s 			page 10


 237 0060 224D     		ldr	r5, .L11+12
 238 0062 0022     		movs	r2, #0
 239 0064 2900     		movs	r1, r5
 240 0066 2248     		ldr	r0, .L11+16
 241 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 242              	.LVL16:
 285:Src/main.c    **** 
 286:Src/main.c    ****   GPIO_InitStruct.Pin = D1_Pin | D2_Pin | D3_Pin;
 243              		.loc 1 286 0
 244 006c 0394     		str	r4, [sp, #12]
 287:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 245              		.loc 1 287 0
 246 006e 0127     		movs	r7, #1
 247 0070 0497     		str	r7, [sp, #16]
 288:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 248              		.loc 1 288 0
 249 0072 0024     		movs	r4, #0
 250 0074 0594     		str	r4, [sp, #20]
 289:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 251              		.loc 1 289 0
 252 0076 0326     		movs	r6, #3
 253 0078 0696     		str	r6, [sp, #24]
 290:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 254              		.loc 1 290 0
 255 007a 03A9     		add	r1, sp, #12
 256 007c 1948     		ldr	r0, .L11+4
 257 007e FFF7FEFF 		bl	HAL_GPIO_Init
 258              	.LVL17:
 291:Src/main.c    **** 
 292:Src/main.c    ****   GPIO_InitStruct.Pin = DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 259              		.loc 1 292 0
 260 0082 CF23     		movs	r3, #207
 261 0084 0393     		str	r3, [sp, #12]
 293:Src/main.c    ****                         | S4_Pin | S1_Pin;
 294:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 262              		.loc 1 294 0
 263 0086 0497     		str	r7, [sp, #16]
 295:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 264              		.loc 1 295 0
 265 0088 0594     		str	r4, [sp, #20]
 296:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 266              		.loc 1 296 0
 267 008a 0696     		str	r6, [sp, #24]
 297:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 268              		.loc 1 297 0
 269 008c 03A9     		add	r1, sp, #12
 270 008e 9020     		movs	r0, #144
 271 0090 C005     		lsls	r0, r0, #23
 272 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 273              	.LVL18:
 298:Src/main.c    **** 
 299:Src/main.c    ****   GPIO_InitStruct.Pin = INT_IN_Pin;
 274              		.loc 1 299 0
 275 0096 0423     		movs	r3, #4
 276 0098 0393     		str	r3, [sp, #12]
 300:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 277              		.loc 1 300 0
ARM GAS  /tmp/ccoISNnH.s 			page 11


 278 009a 164B     		ldr	r3, .L11+20
 279 009c 0493     		str	r3, [sp, #16]
 301:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 280              		.loc 1 301 0
 281 009e 0594     		str	r4, [sp, #20]
 302:Src/main.c    ****   HAL_GPIO_Init(INT_IN_GPIO_Port, &GPIO_InitStruct);
 282              		.loc 1 302 0
 283 00a0 03A9     		add	r1, sp, #12
 284 00a2 1348     		ldr	r0, .L11+16
 285 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 286              	.LVL19:
 303:Src/main.c    **** 
 304:Src/main.c    ****   GPIO_InitStruct.Pin =  F3_Pin | F5_Pin | LED_STATUS_Pin | LED_POWER_Pin | CSYNC_Pin;
 287              		.loc 1 304 0
 288 00a8 0395     		str	r5, [sp, #12]
 305:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 289              		.loc 1 305 0
 290 00aa 0497     		str	r7, [sp, #16]
 306:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 291              		.loc 1 306 0
 292 00ac 0594     		str	r4, [sp, #20]
 307:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 293              		.loc 1 307 0
 294 00ae 0696     		str	r6, [sp, #24]
 308:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 295              		.loc 1 308 0
 296 00b0 03A9     		add	r1, sp, #12
 297 00b2 0F48     		ldr	r0, .L11+16
 298 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL20:
 309:Src/main.c    **** 
 310:Src/main.c    ****   GPIO_InitStruct.Pin = INDEX_Pin | BUTTON_Pin;
 300              		.loc 1 310 0
 301 00b8 8123     		movs	r3, #129
 302 00ba 1B02     		lsls	r3, r3, #8
 303 00bc 0393     		str	r3, [sp, #12]
 311:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 304              		.loc 1 311 0
 305 00be 0494     		str	r4, [sp, #16]
 312:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 306              		.loc 1 312 0
 307 00c0 0223     		movs	r3, #2
 308 00c2 0593     		str	r3, [sp, #20]
 313:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 309              		.loc 1 313 0
 310 00c4 03A9     		add	r1, sp, #12
 311 00c6 0A48     		ldr	r0, .L11+16
 312 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 313              	.LVL21:
 314:Src/main.c    **** 
 315:Src/main.c    ****   GPIO_InitStruct.Pin = ANALOG_INPUT3_Pin | ANALOG_INPUT2_Pin | ANALOG_INPUT1_Pin;
 314              		.loc 1 315 0
 315 00cc 3823     		movs	r3, #56
 316 00ce 0393     		str	r3, [sp, #12]
 316:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 317              		.loc 1 316 0
 318 00d0 0496     		str	r6, [sp, #16]
ARM GAS  /tmp/ccoISNnH.s 			page 12


 317:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 319              		.loc 1 317 0
 320 00d2 0594     		str	r4, [sp, #20]
 318:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 321              		.loc 1 318 0
 322 00d4 03A9     		add	r1, sp, #12
 323 00d6 0648     		ldr	r0, .L11+16
 324 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 325              	.LVL22:
 319:Src/main.c    **** 
 320:Src/main.c    **** }
 326              		.loc 1 320 0
 327 00dc 09B0     		add	sp, sp, #36
 328              		@ sp needed
 329 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 330              	.L12:
 331              		.align	2
 332              	.L11:
 333 00e0 00100240 		.word	1073876992
 334 00e4 00080048 		.word	1207961600
 335 00e8 CF800000 		.word	32975
 336 00ec 03320000 		.word	12803
 337 00f0 00040048 		.word	1207960576
 338 00f4 00001110 		.word	269549568
 339              		.cfi_endproc
 340              	.LFE48:
 342              		.section	.text.MX_DMA_Init,"ax",%progbits
 343              		.align	1
 344              		.syntax unified
 345              		.code	16
 346              		.thumb_func
 347              		.fpu softvfp
 349              	MX_DMA_Init:
 350              	.LFB47:
 262:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 351              		.loc 1 262 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 8
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355 0000 00B5     		push	{lr}
 356              	.LCFI5:
 357              		.cfi_def_cfa_offset 4
 358              		.cfi_offset 14, -4
 359 0002 83B0     		sub	sp, sp, #12
 360              	.LCFI6:
 361              		.cfi_def_cfa_offset 16
 362              	.LBB11:
 263:Src/main.c    **** 
 363              		.loc 1 263 0
 364 0004 0D4A     		ldr	r2, .L14
 365 0006 5169     		ldr	r1, [r2, #20]
 366 0008 0123     		movs	r3, #1
 367 000a 1943     		orrs	r1, r3
 368 000c 5161     		str	r1, [r2, #20]
 369 000e 5269     		ldr	r2, [r2, #20]
 370 0010 1340     		ands	r3, r2
 371 0012 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccoISNnH.s 			page 13


 372 0014 019B     		ldr	r3, [sp, #4]
 373              	.LBE11:
 265:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 374              		.loc 1 265 0
 375 0016 0022     		movs	r2, #0
 376 0018 0021     		movs	r1, #0
 377 001a 0920     		movs	r0, #9
 378 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 379              	.LVL23:
 266:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 380              		.loc 1 266 0
 381 0020 0920     		movs	r0, #9
 382 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 383              	.LVL24:
 267:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 384              		.loc 1 267 0
 385 0026 0022     		movs	r2, #0
 386 0028 0021     		movs	r1, #0
 387 002a 0B20     		movs	r0, #11
 388 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 389              	.LVL25:
 268:Src/main.c    **** }
 390              		.loc 1 268 0
 391 0030 0B20     		movs	r0, #11
 392 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 393              	.LVL26:
 269:Src/main.c    **** 
 394              		.loc 1 269 0
 395 0036 03B0     		add	sp, sp, #12
 396              		@ sp needed
 397 0038 00BD     		pop	{pc}
 398              	.L15:
 399 003a C046     		.align	2
 400              	.L14:
 401 003c 00100240 		.word	1073876992
 402              		.cfi_endproc
 403              	.LFE47:
 405              		.section	.text.MX_TIM1_Init,"ax",%progbits
 406              		.align	1
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 410              		.fpu softvfp
 412              	MX_TIM1_Init:
 413              	.LFB44:
 171:Src/main.c    **** 
 414              		.loc 1 171 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 48
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418 0000 30B5     		push	{r4, r5, lr}
 419              	.LCFI7:
 420              		.cfi_def_cfa_offset 12
 421              		.cfi_offset 4, -12
 422              		.cfi_offset 5, -8
 423              		.cfi_offset 14, -4
 424 0002 8DB0     		sub	sp, sp, #52
ARM GAS  /tmp/ccoISNnH.s 			page 14


 425              	.LCFI8:
 426              		.cfi_def_cfa_offset 64
 173:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 427              		.loc 1 173 0
 428 0004 2022     		movs	r2, #32
 429 0006 0021     		movs	r1, #0
 430 0008 04A8     		add	r0, sp, #16
 431 000a FFF7FEFF 		bl	memset
 432              	.LVL27:
 174:Src/main.c    **** 
 433              		.loc 1 174 0
 434 000e 0822     		movs	r2, #8
 435 0010 0021     		movs	r1, #0
 436 0012 01A8     		add	r0, sp, #4
 437 0014 FFF7FEFF 		bl	memset
 438              	.LVL28:
 176:Src/main.c    ****   htim1.Init.Prescaler = 0;
 439              		.loc 1 176 0
 440 0018 0C4C     		ldr	r4, .L17
 441 001a 0D4B     		ldr	r3, .L17+4
 442 001c 2360     		str	r3, [r4]
 177:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 443              		.loc 1 177 0
 444 001e 0025     		movs	r5, #0
 445 0020 6560     		str	r5, [r4, #4]
 178:Src/main.c    ****   htim1.Init.Period = 0;
 446              		.loc 1 178 0
 447 0022 A560     		str	r5, [r4, #8]
 179:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 448              		.loc 1 179 0
 449 0024 E560     		str	r5, [r4, #12]
 180:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 450              		.loc 1 180 0
 451 0026 2561     		str	r5, [r4, #16]
 181:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 452              		.loc 1 181 0
 453 0028 6561     		str	r5, [r4, #20]
 182:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 454              		.loc 1 182 0
 455 002a A561     		str	r5, [r4, #24]
 183:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 456              		.loc 1 183 0
 457 002c 0123     		movs	r3, #1
 458 002e 0393     		str	r3, [sp, #12]
 185:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 459              		.loc 1 185 0
 460 0030 0593     		str	r3, [sp, #20]
 189:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 461              		.loc 1 189 0
 462 0032 0993     		str	r3, [sp, #36]
 192:Src/main.c    ****   
 463              		.loc 1 192 0
 464 0034 03A9     		add	r1, sp, #12
 465 0036 2000     		movs	r0, r4
 466 0038 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 467              	.LVL29:
 194:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccoISNnH.s 			page 15


 468              		.loc 1 194 0
 469 003c 0195     		str	r5, [sp, #4]
 195:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 470              		.loc 1 195 0
 471 003e 0295     		str	r5, [sp, #8]
 196:Src/main.c    ****   
 472              		.loc 1 196 0
 473 0040 01A9     		add	r1, sp, #4
 474 0042 2000     		movs	r0, r4
 475 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 476              	.LVL30:
 199:Src/main.c    **** 
 477              		.loc 1 199 0
 478 0048 0DB0     		add	sp, sp, #52
 479              		@ sp needed
 480 004a 30BD     		pop	{r4, r5, pc}
 481              	.L18:
 482              		.align	2
 483              	.L17:
 484 004c 00000000 		.word	htim1
 485 0050 002C0140 		.word	1073818624
 486              		.cfi_endproc
 487              	.LFE44:
 489              		.global	__aeabi_uidiv
 490              		.section	.text.MX_TIM2_Init,"ax",%progbits
 491              		.align	1
 492              		.syntax unified
 493              		.code	16
 494              		.thumb_func
 495              		.fpu softvfp
 497              	MX_TIM2_Init:
 498              	.LFB45:
 202:Src/main.c    **** 
 499              		.loc 1 202 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 112
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 504              	.LCFI9:
 505              		.cfi_def_cfa_offset 20
 506              		.cfi_offset 4, -20
 507              		.cfi_offset 5, -16
 508              		.cfi_offset 6, -12
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 C646     		mov	lr, r8
 512 0004 00B5     		push	{lr}
 513              	.LCFI10:
 514              		.cfi_def_cfa_offset 24
 515              		.cfi_offset 8, -24
 516 0006 9CB0     		sub	sp, sp, #112
 517              	.LCFI11:
 518              		.cfi_def_cfa_offset 136
 204:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 519              		.loc 1 204 0
 520 0008 1022     		movs	r2, #16
 521 000a 0021     		movs	r1, #0
ARM GAS  /tmp/ccoISNnH.s 			page 16


 522 000c 18A8     		add	r0, sp, #96
 523 000e FFF7FEFF 		bl	memset
 524              	.LVL31:
 205:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 525              		.loc 1 205 0
 526 0012 0822     		movs	r2, #8
 527 0014 0021     		movs	r1, #0
 528 0016 16A8     		add	r0, sp, #88
 529 0018 FFF7FEFF 		bl	memset
 530              	.LVL32:
 206:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 531              		.loc 1 206 0
 532 001c 1C22     		movs	r2, #28
 533 001e 0021     		movs	r1, #0
 534 0020 0FA8     		add	r0, sp, #60
 535 0022 FFF7FEFF 		bl	memset
 536              	.LVL33:
 207:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 537              		.loc 1 207 0
 538 0026 1C22     		movs	r2, #28
 539 0028 0021     		movs	r1, #0
 540 002a 08A8     		add	r0, sp, #32
 541 002c FFF7FEFF 		bl	memset
 542              	.LVL34:
 208:Src/main.c    **** 
 543              		.loc 1 208 0
 544 0030 1C22     		movs	r2, #28
 545 0032 0021     		movs	r1, #0
 546 0034 01A8     		add	r0, sp, #4
 547 0036 FFF7FEFF 		bl	memset
 548              	.LVL35:
 210:Src/main.c    ****   htim2.Init.Prescaler = 0;
 549              		.loc 1 210 0
 550 003a 294C     		ldr	r4, .L20
 551 003c 8023     		movs	r3, #128
 552 003e DB05     		lsls	r3, r3, #23
 553 0040 2360     		str	r3, [r4]
 211:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 554              		.loc 1 211 0
 555 0042 0025     		movs	r5, #0
 556 0044 6560     		str	r5, [r4, #4]
 212:Src/main.c    ****   htim2.Init.Period = PER;
 557              		.loc 1 212 0
 558 0046 A560     		str	r5, [r4, #8]
 213:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 559              		.loc 1 213 0
 560 0048 264E     		ldr	r6, .L20+4
 561 004a 3388     		ldrh	r3, [r6]
 562 004c E360     		str	r3, [r4, #12]
 214:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 563              		.loc 1 214 0
 564 004e 2561     		str	r5, [r4, #16]
 215:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 565              		.loc 1 215 0
 566 0050 A561     		str	r5, [r4, #24]
 216:Src/main.c    ****   
 567              		.loc 1 216 0
ARM GAS  /tmp/ccoISNnH.s 			page 17


 568 0052 2000     		movs	r0, r4
 569 0054 FFF7FEFF 		bl	HAL_TIM_Base_Init
 570              	.LVL36:
 218:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 571              		.loc 1 218 0
 572 0058 8023     		movs	r3, #128
 573 005a 5B01     		lsls	r3, r3, #5
 574 005c 1893     		str	r3, [sp, #96]
 219:Src/main.c    ****  
 575              		.loc 1 219 0
 576 005e 18A9     		add	r1, sp, #96
 577 0060 2000     		movs	r0, r4
 578 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 579              	.LVL37:
 221:Src/main.c    **** 
 580              		.loc 1 221 0
 581 0066 2000     		movs	r0, r4
 582 0068 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 583              	.LVL38:
 223:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 584              		.loc 1 223 0
 585 006c 1695     		str	r5, [sp, #88]
 224:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 586              		.loc 1 224 0
 587 006e 1795     		str	r5, [sp, #92]
 225:Src/main.c    **** 
 588              		.loc 1 225 0
 589 0070 16A9     		add	r1, sp, #88
 590 0072 2000     		movs	r0, r4
 591 0074 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 592              	.LVL39:
 227:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 593              		.loc 1 227 0
 594 0078 6023     		movs	r3, #96
 595 007a 9846     		mov	r8, r3
 596 007c 0F93     		str	r3, [sp, #60]
 228:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 597              		.loc 1 228 0
 598 007e 3088     		ldrh	r0, [r6]
 599 0080 0321     		movs	r1, #3
 600 0082 FFF7FEFF 		bl	__aeabi_uidiv
 601              	.LVL40:
 602 0086 80B2     		uxth	r0, r0
 603 0088 1090     		str	r0, [sp, #64]
 229:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 604              		.loc 1 229 0
 605 008a 0227     		movs	r7, #2
 606 008c 1197     		str	r7, [sp, #68]
 230:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 607              		.loc 1 230 0
 608 008e 1395     		str	r5, [sp, #76]
 231:Src/main.c    ****  
 609              		.loc 1 231 0
 610 0090 0022     		movs	r2, #0
 611 0092 0FA9     		add	r1, sp, #60
 612 0094 2000     		movs	r0, r4
 613 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/ccoISNnH.s 			page 18


 614              	.LVL41:
 233:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 615              		.loc 1 233 0
 616 009a 4346     		mov	r3, r8
 617 009c 0893     		str	r3, [sp, #32]
 234:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 618              		.loc 1 234 0
 619 009e 3088     		ldrh	r0, [r6]
 620 00a0 0321     		movs	r1, #3
 621 00a2 FFF7FEFF 		bl	__aeabi_uidiv
 622              	.LVL42:
 623 00a6 80B2     		uxth	r0, r0
 624 00a8 4000     		lsls	r0, r0, #1
 625 00aa 0990     		str	r0, [sp, #36]
 235:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 626              		.loc 1 235 0
 627 00ac 0A97     		str	r7, [sp, #40]
 236:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 628              		.loc 1 236 0
 629 00ae 0C95     		str	r5, [sp, #48]
 237:Src/main.c    **** 
 630              		.loc 1 237 0
 631 00b0 0C22     		movs	r2, #12
 632 00b2 08A9     		add	r1, sp, #32
 633 00b4 2000     		movs	r0, r4
 634 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 635              	.LVL43:
 239:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 636              		.loc 1 239 0
 637 00ba 4346     		mov	r3, r8
 638 00bc 0193     		str	r3, [sp, #4]
 240:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 639              		.loc 1 240 0
 640 00be 3088     		ldrh	r0, [r6]
 641 00c0 0321     		movs	r1, #3
 642 00c2 FFF7FEFF 		bl	__aeabi_uidiv
 643              	.LVL44:
 644 00c6 80B2     		uxth	r0, r0
 645 00c8 0290     		str	r0, [sp, #8]
 241:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 646              		.loc 1 241 0
 647 00ca 0397     		str	r7, [sp, #12]
 242:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3);
 648              		.loc 1 242 0
 649 00cc 0595     		str	r5, [sp, #20]
 243:Src/main.c    **** }
 650              		.loc 1 243 0
 651 00ce 0822     		movs	r2, #8
 652 00d0 01A9     		add	r1, sp, #4
 653 00d2 2000     		movs	r0, r4
 654 00d4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 655              	.LVL45:
 244:Src/main.c    **** 
 656              		.loc 1 244 0
 657 00d8 1CB0     		add	sp, sp, #112
 658              		@ sp needed
 659 00da 04BC     		pop	{r2}
ARM GAS  /tmp/ccoISNnH.s 			page 19


 660 00dc 9046     		mov	r8, r2
 661 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 662              	.L21:
 663              		.align	2
 664              	.L20:
 665 00e0 00000000 		.word	htim2
 666 00e4 00000000 		.word	.LANCHOR0
 667              		.cfi_endproc
 668              	.LFE45:
 670              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 671              		.align	1
 672              		.syntax unified
 673              		.code	16
 674              		.thumb_func
 675              		.fpu softvfp
 677              	MX_USART3_UART_Init:
 678              	.LFB46:
 247:Src/main.c    ****   huart3.Instance = USART3;
 679              		.loc 1 247 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683 0000 10B5     		push	{r4, lr}
 684              	.LCFI12:
 685              		.cfi_def_cfa_offset 8
 686              		.cfi_offset 4, -8
 687              		.cfi_offset 14, -4
 248:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 688              		.loc 1 248 0
 689 0002 0948     		ldr	r0, .L23
 690 0004 094B     		ldr	r3, .L23+4
 691 0006 0360     		str	r3, [r0]
 249:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 692              		.loc 1 249 0
 693 0008 E123     		movs	r3, #225
 694 000a 5B02     		lsls	r3, r3, #9
 695 000c 4360     		str	r3, [r0, #4]
 250:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 696              		.loc 1 250 0
 697 000e 0023     		movs	r3, #0
 698 0010 8360     		str	r3, [r0, #8]
 251:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 699              		.loc 1 251 0
 700 0012 C360     		str	r3, [r0, #12]
 252:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 701              		.loc 1 252 0
 702 0014 0361     		str	r3, [r0, #16]
 253:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 703              		.loc 1 253 0
 704 0016 0C22     		movs	r2, #12
 705 0018 4261     		str	r2, [r0, #20]
 254:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 706              		.loc 1 254 0
 707 001a 8361     		str	r3, [r0, #24]
 255:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 708              		.loc 1 255 0
 709 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccoISNnH.s 			page 20


 256:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 710              		.loc 1 256 0
 711 001e 0362     		str	r3, [r0, #32]
 257:Src/main.c    ****   HAL_UART_Init(&huart3);
 712              		.loc 1 257 0
 713 0020 4362     		str	r3, [r0, #36]
 258:Src/main.c    **** }
 714              		.loc 1 258 0
 715 0022 FFF7FEFF 		bl	HAL_UART_Init
 716              	.LVL46:
 259:Src/main.c    **** 
 717              		.loc 1 259 0
 718              		@ sp needed
 719 0026 10BD     		pop	{r4, pc}
 720              	.L24:
 721              		.align	2
 722              	.L23:
 723 0028 00000000 		.word	huart3
 724 002c 00480040 		.word	1073760256
 725              		.cfi_endproc
 726              	.LFE46:
 728              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 729              		.align	1
 730              		.global	dfu_otter_bootloader
 731              		.syntax unified
 732              		.code	16
 733              		.thumb_func
 734              		.fpu softvfp
 736              	dfu_otter_bootloader:
 737              	.LFB37:
  29:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 738              		.loc 1 29 0
 739              		.cfi_startproc
 740              		@ Volatile: function does not return.
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
  30:Src/main.c    ****   NVIC_SystemReset();
 744              		.loc 1 30 0
 745 0000 054B     		ldr	r3, .L27
 746 0002 064A     		ldr	r2, .L27+4
 747 0004 1A60     		str	r2, [r3]
 748              	.LBB20:
 749              	.LBB21:
 750              	.LBB22:
 751              	.LBB23:
 752              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
ARM GAS  /tmp/ccoISNnH.s 			page 21


  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
ARM GAS  /tmp/ccoISNnH.s 			page 22


  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccoISNnH.s 			page 23


 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccoISNnH.s 			page 24


 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccoISNnH.s 			page 25


 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
ARM GAS  /tmp/ccoISNnH.s 			page 26


 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  /tmp/ccoISNnH.s 			page 27


 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccoISNnH.s 			page 28


 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 753              		.loc 2 429 0
 754              		.syntax divided
 755              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 756 0006 BFF34F8F 		dsb 0xF
 757              	@ 0 "" 2
 758              		.thumb
 759              		.syntax unified
 760              	.LBE23:
 761              	.LBE22:
 762              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
ARM GAS  /tmp/ccoISNnH.s 			page 29


  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
ARM GAS  /tmp/ccoISNnH.s 			page 30


  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
ARM GAS  /tmp/ccoISNnH.s 			page 31


 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccoISNnH.s 			page 32


 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
ARM GAS  /tmp/ccoISNnH.s 			page 33


 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
ARM GAS  /tmp/ccoISNnH.s 			page 34


 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
ARM GAS  /tmp/ccoISNnH.s 			page 35


 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
ARM GAS  /tmp/ccoISNnH.s 			page 36


 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
ARM GAS  /tmp/ccoISNnH.s 			page 37


 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
ARM GAS  /tmp/ccoISNnH.s 			page 38


 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
ARM GAS  /tmp/ccoISNnH.s 			page 39


 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
ARM GAS  /tmp/ccoISNnH.s 			page 40


 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccoISNnH.s 			page 41


 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 763              		.loc 3 734 0
 764 000a 054B     		ldr	r3, .L27+8
 765 000c 054A     		ldr	r2, .L27+12
 766 000e DA60     		str	r2, [r3, #12]
 767              	.LBB24:
 768              	.LBB25:
 769              		.loc 2 429 0
 770              		.syntax divided
 771              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 772 0010 BFF34F8F 		dsb 0xF
 773              	@ 0 "" 2
 774              		.thumb
 775              		.syntax unified
 776              	.L26:
 777              	.LBE25:
 778              	.LBE24:
 779              	.LBB26:
 780              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 781              		.loc 2 375 0
 782              		.syntax divided
 783              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 784 0014 C046     		nop
 785              	@ 0 "" 2
 786              		.thumb
 787              		.syntax unified
 788 0016 FDE7     		b	.L26
 789              	.L28:
 790              		.align	2
 791              	.L27:
 792 0018 F03F0020 		.word	536887280
 793 001c EFBEADDE 		.word	-559038737
 794 0020 00ED00E0 		.word	-536810240
 795 0024 0400FA05 		.word	100270084
ARM GAS  /tmp/ccoISNnH.s 			page 42


 796              	.LBE27:
 797              	.LBE26:
 798              	.LBE21:
 799              	.LBE20:
 800              		.cfi_endproc
 801              	.LFE37:
 803              		.section	.text.startDMA,"ax",%progbits
 804              		.align	1
 805              		.global	startDMA
 806              		.syntax unified
 807              		.code	16
 808              		.thumb_func
 809              		.fpu softvfp
 811              	startDMA:
 812              	.LFB42:
 117:Src/main.c    **** 
 813              		.loc 1 117 0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817 0000 70B5     		push	{r4, r5, r6, lr}
 818              	.LCFI13:
 819              		.cfi_def_cfa_offset 16
 820              		.cfi_offset 4, -16
 821              		.cfi_offset 5, -12
 822              		.cfi_offset 6, -8
 823              		.cfi_offset 14, -4
 120:Src/main.c    ****     return;
 824              		.loc 1 120 0
 825 0002 1B4B     		ldr	r3, .L31
 826 0004 586A     		ldr	r0, [r3, #36]
 827 0006 FFF7FEFF 		bl	HAL_DMA_GetState
 828              	.LVL47:
 829 000a 0228     		cmp	r0, #2
 830 000c 2FD0     		beq	.L29
 123:Src/main.c    ****     return;
 831              		.loc 1 123 0
 832 000e 184B     		ldr	r3, .L31
 833 0010 D86A     		ldr	r0, [r3, #44]
 834 0012 FFF7FEFF 		bl	HAL_DMA_GetState
 835              	.LVL48:
 836 0016 0228     		cmp	r0, #2
 837 0018 29D0     		beq	.L29
 126:Src/main.c    ****     return;
 838              		.loc 1 126 0
 839 001a 154B     		ldr	r3, .L31
 840 001c 186B     		ldr	r0, [r3, #48]
 841 001e FFF7FEFF 		bl	HAL_DMA_GetState
 842              	.LVL49:
 843 0022 0228     		cmp	r0, #2
 844 0024 23D0     		beq	.L29
 131:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC3], (uint32_t)my_data_buf_fire, (uint32_t)&GPIOB->ODR, d
 845              		.loc 1 131 0
 846 0026 134D     		ldr	r5, .L31+4
 847 0028 114C     		ldr	r4, .L31
 848 002a C823     		movs	r3, #200
 849 002c 124A     		ldr	r2, .L31+8
ARM GAS  /tmp/ccoISNnH.s 			page 43


 850 002e 2900     		movs	r1, r5
 851 0030 606A     		ldr	r0, [r4, #36]
 852 0032 FFF7FEFF 		bl	HAL_DMA_Start_IT
 853              	.LVL50:
 132:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf, (uint32_t)&GPIOC->ODR, data_l
 854              		.loc 1 132 0
 855 0036 C823     		movs	r3, #200
 856 0038 104A     		ldr	r2, .L31+12
 857 003a 1149     		ldr	r1, .L31+16
 858 003c E06A     		ldr	r0, [r4, #44]
 859 003e FFF7FEFF 		bl	HAL_DMA_Start_IT
 860              	.LVL51:
 133:Src/main.c    **** 
 861              		.loc 1 133 0
 862 0042 C823     		movs	r3, #200
 863 0044 0F4A     		ldr	r2, .L31+20
 864 0046 2900     		movs	r1, r5
 865 0048 206B     		ldr	r0, [r4, #48]
 866 004a FFF7FEFF 		bl	HAL_DMA_Start_IT
 867              	.LVL52:
 135:Src/main.c    **** 
 868              		.loc 1 135 0
 869 004e 8023     		movs	r3, #128
 870 0050 DB05     		lsls	r3, r3, #23
 871 0052 0022     		movs	r2, #0
 872 0054 5A62     		str	r2, [r3, #36]
 137:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 873              		.loc 1 137 0
 874 0056 0021     		movs	r1, #0
 875 0058 2000     		movs	r0, r4
 876 005a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 877              	.LVL53:
 138:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 878              		.loc 1 138 0
 879 005e 0821     		movs	r1, #8
 880 0060 2000     		movs	r0, r4
 881 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 882              	.LVL54:
 139:Src/main.c    **** }
 883              		.loc 1 139 0
 884 0066 0C21     		movs	r1, #12
 885 0068 2000     		movs	r0, r4
 886 006a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 887              	.LVL55:
 888              	.L29:
 140:Src/main.c    **** 
 889              		.loc 1 140 0
 890              		@ sp needed
 891 006e 70BD     		pop	{r4, r5, r6, pc}
 892              	.L32:
 893              		.align	2
 894              	.L31:
 895 0070 00000000 		.word	htim2
 896 0074 00000000 		.word	my_data_buf
 897 0078 14000048 		.word	1207959572
 898 007c 14040048 		.word	1207960596
 899 0080 00000000 		.word	my_data_buf_fire
ARM GAS  /tmp/ccoISNnH.s 			page 44


 900 0084 14080048 		.word	1207961620
 901              		.cfi_endproc
 902              	.LFE42:
 904              		.section	.text.SystemClock_Config,"ax",%progbits
 905              		.align	1
 906              		.global	SystemClock_Config
 907              		.syntax unified
 908              		.code	16
 909              		.thumb_func
 910              		.fpu softvfp
 912              	SystemClock_Config:
 913              	.LFB43:
 143:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 914              		.loc 1 143 0
 915              		.cfi_startproc
 916              		@ args = 0, pretend = 0, frame = 96
 917              		@ frame_needed = 0, uses_anonymous_args = 0
 918 0000 10B5     		push	{r4, lr}
 919              	.LCFI14:
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 4, -8
 922              		.cfi_offset 14, -4
 923 0002 98B0     		sub	sp, sp, #96
 924              	.LCFI15:
 925              		.cfi_def_cfa_offset 104
 144:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 926              		.loc 1 144 0
 927 0004 3022     		movs	r2, #48
 928 0006 0021     		movs	r1, #0
 929 0008 0CA8     		add	r0, sp, #48
 930 000a FFF7FEFF 		bl	memset
 931              	.LVL56:
 145:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 932              		.loc 1 145 0
 933 000e 1022     		movs	r2, #16
 934 0010 0021     		movs	r1, #0
 935 0012 07A8     		add	r0, sp, #28
 936 0014 FFF7FEFF 		bl	memset
 937              	.LVL57:
 146:Src/main.c    **** 
 938              		.loc 1 146 0
 939 0018 1C22     		movs	r2, #28
 940 001a 0021     		movs	r1, #0
 941 001c 6846     		mov	r0, sp
 942 001e FFF7FEFF 		bl	memset
 943              	.LVL58:
 148:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 944              		.loc 1 148 0
 945 0022 2223     		movs	r3, #34
 946 0024 0B93     		str	r3, [sp, #44]
 149:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 947              		.loc 1 149 0
 948 0026 213B     		subs	r3, r3, #33
 949 0028 0E93     		str	r3, [sp, #56]
 150:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 950              		.loc 1 150 0
 951 002a 1393     		str	r3, [sp, #76]
ARM GAS  /tmp/ccoISNnH.s 			page 45


 151:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 952              		.loc 1 151 0
 953 002c 0F33     		adds	r3, r3, #15
 954 002e 0F93     		str	r3, [sp, #60]
 153:Src/main.c    **** 
 955              		.loc 1 153 0
 956 0030 0BA8     		add	r0, sp, #44
 957 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 958              	.LVL59:
 155:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 959              		.loc 1 155 0
 960 0036 0723     		movs	r3, #7
 961 0038 0793     		str	r3, [sp, #28]
 157:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 962              		.loc 1 157 0
 963 003a 043B     		subs	r3, r3, #4
 964 003c 0893     		str	r3, [sp, #32]
 158:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 965              		.loc 1 158 0
 966 003e 0024     		movs	r4, #0
 967 0040 0994     		str	r4, [sp, #36]
 159:Src/main.c    **** 
 968              		.loc 1 159 0
 969 0042 0A94     		str	r4, [sp, #40]
 161:Src/main.c    **** 
 970              		.loc 1 161 0
 971 0044 0121     		movs	r1, #1
 972 0046 07A8     		add	r0, sp, #28
 973 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 974              	.LVL60:
 163:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 975              		.loc 1 163 0
 976 004c 8023     		movs	r3, #128
 977 004e 9B02     		lsls	r3, r3, #10
 978 0050 0093     		str	r3, [sp]
 164:Src/main.c    **** 
 979              		.loc 1 164 0
 980 0052 0694     		str	r4, [sp, #24]
 166:Src/main.c    **** 
 981              		.loc 1 166 0
 982 0054 6846     		mov	r0, sp
 983 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 984              	.LVL61:
 168:Src/main.c    **** 
 985              		.loc 1 168 0
 986 005a 18B0     		add	sp, sp, #96
 987              		@ sp needed
 988 005c 10BD     		pop	{r4, pc}
 989              		.cfi_endproc
 990              	.LFE43:
 992              		.section	.text.main,"ax",%progbits
 993              		.align	1
 994              		.global	main
 995              		.syntax unified
 996              		.code	16
 997              		.thumb_func
 998              		.fpu softvfp
ARM GAS  /tmp/ccoISNnH.s 			page 46


 1000              	main:
 1001              	.LFB41:
  56:Src/main.c    **** 
 1002              		.loc 1 56 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006 0000 10B5     		push	{r4, lr}
 1007              	.LCFI16:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
  58:Src/main.c    **** 
 1011              		.loc 1 58 0
 1012 0002 FFF7FEFF 		bl	HAL_Init
 1013              	.LVL62:
  60:Src/main.c    **** 
 1014              		.loc 1 60 0
 1015 0006 FFF7FEFF 		bl	SystemClock_Config
 1016              	.LVL63:
  62:Src/main.c    ****   MX_DMA_Init();
 1017              		.loc 1 62 0
 1018 000a FFF7FEFF 		bl	MX_GPIO_Init
 1019              	.LVL64:
  63:Src/main.c    ****   MX_TIM1_Init();
 1020              		.loc 1 63 0
 1021 000e FFF7FEFF 		bl	MX_DMA_Init
 1022              	.LVL65:
  64:Src/main.c    ****   MX_TIM2_Init();
 1023              		.loc 1 64 0
 1024 0012 FFF7FEFF 		bl	MX_TIM1_Init
 1025              	.LVL66:
  65:Src/main.c    ****   MX_USART3_UART_Init();
 1026              		.loc 1 65 0
 1027 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1028              	.LVL67:
  66:Src/main.c    ****   MX_USB_DEVICE_Init();
 1029              		.loc 1 66 0
 1030 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 1031              	.LVL68:
  67:Src/main.c    **** 
 1032              		.loc 1 67 0
 1033 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1034              	.LVL69:
  69:Src/main.c    ****     dfu_otter_bootloader();
 1035              		.loc 1 69 0
 1036 0022 8021     		movs	r1, #128
 1037 0024 4900     		lsls	r1, r1, #1
 1038 0026 4348     		ldr	r0, .L42
 1039 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1040              	.LVL70:
 1041 002c 0028     		cmp	r0, #0
 1042 002e 01D0     		beq	.L35
  70:Src/main.c    ****   }
 1043              		.loc 1 70 0
 1044 0030 FFF7FEFF 		bl	dfu_otter_bootloader
 1045              	.LVL71:
ARM GAS  /tmp/ccoISNnH.s 			page 47


 1046              	.L35:
  73:Src/main.c    **** 
 1047              		.loc 1 73 0
 1048 0034 8021     		movs	r1, #128
 1049 0036 0122     		movs	r2, #1
 1050 0038 8901     		lsls	r1, r1, #6
 1051 003a 3E48     		ldr	r0, .L42
 1052 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1053              	.LVL72:
  75:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
 1054              		.loc 1 75 0
 1055 0040 C822     		movs	r2, #200
 1056 0042 FF21     		movs	r1, #255
 1057 0044 3C48     		ldr	r0, .L42+4
 1058 0046 FFF7FEFF 		bl	memset
 1059              	.LVL73:
 1060              	.LBB28:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0xFF83;
 1061              		.loc 1 76 0
 1062 004a 0023     		movs	r3, #0
 1063 004c 21E0     		b	.L36
 1064              	.LVL74:
 1065              	.L37:
  77:Src/main.c    ****     my_data_buf[i + 1] = 0xFF00;
 1066              		.loc 1 77 0 discriminator 3
 1067 004e 3A4A     		ldr	r2, .L42+4
 1068 0050 5900     		lsls	r1, r3, #1
 1069 0052 7D20     		movs	r0, #125
 1070 0054 4042     		rsbs	r0, r0, #0
 1071 0056 8852     		strh	r0, [r1, r2]
  78:Src/main.c    ****     my_data_buf[i + 2] = 0x0005;
 1072              		.loc 1 78 0 discriminator 3
 1073 0058 591C     		adds	r1, r3, #1
 1074 005a 4900     		lsls	r1, r1, #1
 1075 005c 3748     		ldr	r0, .L42+8
 1076 005e 8852     		strh	r0, [r1, r2]
  79:Src/main.c    ****     my_data_buf[i + 3] = 0xFF00;
 1077              		.loc 1 79 0 discriminator 3
 1078 0060 991C     		adds	r1, r3, #2
 1079 0062 4900     		lsls	r1, r1, #1
 1080 0064 0524     		movs	r4, #5
 1081 0066 8C52     		strh	r4, [r1, r2]
  80:Src/main.c    ****     my_data_buf[i + 4] = 0x0009;
 1082              		.loc 1 80 0 discriminator 3
 1083 0068 D91C     		adds	r1, r3, #3
 1084 006a 4900     		lsls	r1, r1, #1
 1085 006c 8852     		strh	r0, [r1, r2]
  81:Src/main.c    ****     my_data_buf[i + 5] = 0x0000;
 1086              		.loc 1 81 0 discriminator 3
 1087 006e 191D     		adds	r1, r3, #4
 1088 0070 4900     		lsls	r1, r1, #1
 1089 0072 0A30     		adds	r0, r0, #10
 1090 0074 FF30     		adds	r0, r0, #255
 1091 0076 8852     		strh	r0, [r1, r2]
  82:Src/main.c    ****     my_data_buf[i + 6] = 0xFF41;
 1092              		.loc 1 82 0 discriminator 3
 1093 0078 591D     		adds	r1, r3, #5
ARM GAS  /tmp/ccoISNnH.s 			page 48


 1094 007a 4900     		lsls	r1, r1, #1
 1095 007c 0020     		movs	r0, #0
 1096 007e 8852     		strh	r0, [r1, r2]
  83:Src/main.c    ****     my_data_buf[i + 7] = 0x0000;
 1097              		.loc 1 83 0 discriminator 3
 1098 0080 991D     		adds	r1, r3, #6
 1099 0082 4900     		lsls	r1, r1, #1
 1100 0084 C43C     		subs	r4, r4, #196
 1101 0086 8C52     		strh	r4, [r1, r2]
  84:Src/main.c    ****   }
 1102              		.loc 1 84 0 discriminator 3
 1103 0088 D91D     		adds	r1, r3, #7
 1104 008a 4900     		lsls	r1, r1, #1
 1105 008c 8852     		strh	r0, [r1, r2]
  76:Src/main.c    ****     my_data_buf[i + 0] = 0xFF83;
 1106              		.loc 1 76 0 discriminator 3
 1107 008e 0833     		adds	r3, r3, #8
 1108              	.LVL75:
 1109 0090 9BB2     		uxth	r3, r3
 1110              	.LVL76:
 1111              	.L36:
  76:Src/main.c    ****     my_data_buf[i + 0] = 0xFF83;
 1112              		.loc 1 76 0 is_stmt 0 discriminator 1
 1113 0092 C62B     		cmp	r3, #198
 1114 0094 DBD9     		bls	.L37
 1115              	.LBE28:
  87:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
 1116              		.loc 1 87 0 is_stmt 1
 1117 0096 C822     		movs	r2, #200
 1118 0098 0021     		movs	r1, #0
 1119 009a 2748     		ldr	r0, .L42+4
 1120 009c FFF7FEFF 		bl	memset
 1121              	.LVL77:
 1122              	.LBB29:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1123              		.loc 1 88 0
 1124 00a0 0023     		movs	r3, #0
 1125 00a2 14E0     		b	.L38
 1126              	.LVL78:
 1127              	.L39:
  89:Src/main.c    ****     my_data_buf_fire[i + 1] = 0x00;
 1128              		.loc 1 89 0 discriminator 3
 1129 00a4 264A     		ldr	r2, .L42+12
 1130 00a6 0221     		movs	r1, #2
 1131 00a8 D154     		strb	r1, [r2, r3]
  90:Src/main.c    ****     my_data_buf_fire[i + 2] = 0x00;
 1132              		.loc 1 90 0 discriminator 3
 1133 00aa 581C     		adds	r0, r3, #1
 1134 00ac 0021     		movs	r1, #0
 1135 00ae 1154     		strb	r1, [r2, r0]
  91:Src/main.c    ****     my_data_buf_fire[i + 3] = 0x00;
 1136              		.loc 1 91 0 discriminator 3
 1137 00b0 981C     		adds	r0, r3, #2
 1138 00b2 1154     		strb	r1, [r2, r0]
  92:Src/main.c    ****     my_data_buf_fire[i + 4] = 0x01;//01
 1139              		.loc 1 92 0 discriminator 3
 1140 00b4 D81C     		adds	r0, r3, #3
ARM GAS  /tmp/ccoISNnH.s 			page 49


 1141 00b6 1154     		strb	r1, [r2, r0]
  93:Src/main.c    ****     my_data_buf_fire[i + 5] = 0x00;
 1142              		.loc 1 93 0 discriminator 3
 1143 00b8 181D     		adds	r0, r3, #4
 1144 00ba 0124     		movs	r4, #1
 1145 00bc 1454     		strb	r4, [r2, r0]
  94:Src/main.c    ****     my_data_buf_fire[i + 6] = 0x00;
 1146              		.loc 1 94 0 discriminator 3
 1147 00be 581D     		adds	r0, r3, #5
 1148 00c0 1154     		strb	r1, [r2, r0]
  95:Src/main.c    ****     my_data_buf_fire[i + 7] = 0x00;
 1149              		.loc 1 95 0 discriminator 3
 1150 00c2 981D     		adds	r0, r3, #6
 1151 00c4 1154     		strb	r1, [r2, r0]
  96:Src/main.c    ****   }
 1152              		.loc 1 96 0 discriminator 3
 1153 00c6 D81D     		adds	r0, r3, #7
 1154 00c8 1154     		strb	r1, [r2, r0]
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1155              		.loc 1 88 0 discriminator 3
 1156 00ca 0833     		adds	r3, r3, #8
 1157              	.LVL79:
 1158 00cc 9BB2     		uxth	r3, r3
 1159              	.LVL80:
 1160              	.L38:
  88:Src/main.c    ****     my_data_buf_fire[i + 0] = 0x02;//02
 1161              		.loc 1 88 0 is_stmt 0 discriminator 1
 1162 00ce C62B     		cmp	r3, #198
 1163 00d0 E8D9     		bls	.L39
 1164              	.LBE29:
  99:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1165              		.loc 1 99 0 is_stmt 1
 1166 00d2 1C4A     		ldr	r2, .L42+16
 1167 00d4 536A     		ldr	r3, [r2, #36]
 1168              	.LVL81:
 1169 00d6 1C49     		ldr	r1, .L42+20
 1170 00d8 9962     		str	r1, [r3, #40]
 100:Src/main.c    **** 
 1171              		.loc 1 100 0
 1172 00da 1368     		ldr	r3, [r2]
 1173 00dc D868     		ldr	r0, [r3, #12]
 1174 00de 8021     		movs	r1, #128
 1175 00e0 8900     		lsls	r1, r1, #2
 1176 00e2 0143     		orrs	r1, r0
 1177 00e4 D960     		str	r1, [r3, #12]
 102:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 1178              		.loc 1 102 0
 1179 00e6 D16A     		ldr	r1, [r2, #44]
 1180 00e8 1848     		ldr	r0, .L42+24
 1181 00ea 8862     		str	r0, [r1, #40]
 103:Src/main.c    **** 
 1182              		.loc 1 103 0
 1183 00ec D868     		ldr	r0, [r3, #12]
 1184 00ee 8021     		movs	r1, #128
 1185 00f0 0901     		lsls	r1, r1, #4
 1186 00f2 0143     		orrs	r1, r0
 1187 00f4 D960     		str	r1, [r3, #12]
ARM GAS  /tmp/ccoISNnH.s 			page 50


 105:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1188              		.loc 1 105 0
 1189 00f6 126B     		ldr	r2, [r2, #48]
 1190 00f8 1549     		ldr	r1, .L42+28
 1191 00fa 9162     		str	r1, [r2, #40]
 106:Src/main.c    **** 
 1192              		.loc 1 106 0
 1193 00fc D968     		ldr	r1, [r3, #12]
 1194 00fe 8022     		movs	r2, #128
 1195 0100 5201     		lsls	r2, r2, #5
 1196 0102 0A43     		orrs	r2, r1
 1197 0104 DA60     		str	r2, [r3, #12]
 1198              	.L40:
 110:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 1199              		.loc 1 110 0
 1200 0106 8021     		movs	r1, #128
 1201 0108 0A4C     		ldr	r4, .L42
 1202 010a 0122     		movs	r2, #1
 1203 010c 8901     		lsls	r1, r1, #6
 1204 010e 2000     		movs	r0, r4
 1205 0110 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1206              	.LVL82:
 111:Src/main.c    ****       HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 1207              		.loc 1 111 0
 1208 0114 8021     		movs	r1, #128
 1209 0116 4900     		lsls	r1, r1, #1
 1210 0118 2000     		movs	r0, r4
 1211 011a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1212              	.LVL83:
 1213 011e 0028     		cmp	r0, #0
 1214 0120 F1D0     		beq	.L40
 1215              	.LBB30:
 112:Src/main.c    ****       startDMA();
 1216              		.loc 1 112 0
 1217 0122 8021     		movs	r1, #128
 1218 0124 0122     		movs	r2, #1
 1219 0126 4901     		lsls	r1, r1, #5
 1220 0128 2000     		movs	r0, r4
 1221 012a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1222              	.LVL84:
 113:Src/main.c    ****     }
 1223              		.loc 1 113 0
 1224 012e FFF7FEFF 		bl	startDMA
 1225              	.LVL85:
 1226 0132 E8E7     		b	.L40
 1227              	.L43:
 1228              		.align	2
 1229              	.L42:
 1230 0134 00040048 		.word	1207960576
 1231 0138 00000000 		.word	my_data_buf
 1232 013c 00FFFFFF 		.word	-256
 1233 0140 00000000 		.word	my_data_buf_fire
 1234 0144 00000000 		.word	htim2
 1235 0148 00000000 		.word	dataTransmittedHandler0
 1236 014c 00000000 		.word	dataTransmittedHandler1
 1237 0150 00000000 		.word	dataTransmittedHandler2
 1238              	.LBE30:
ARM GAS  /tmp/ccoISNnH.s 			page 51


 1239              		.cfi_endproc
 1240              	.LFE41:
 1242              		.section	.text.Error_Handler,"ax",%progbits
 1243              		.align	1
 1244              		.global	Error_Handler
 1245              		.syntax unified
 1246              		.code	16
 1247              		.thumb_func
 1248              		.fpu softvfp
 1250              	Error_Handler:
 1251              	.LFB49:
 321:Src/main.c    **** 
 322:Src/main.c    **** void Error_Handler(void)
 323:Src/main.c    **** {
 1252              		.loc 1 323 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              		@ link register save eliminated.
 324:Src/main.c    **** 
 325:Src/main.c    **** }...
 1257              		.loc 1 325 0
 1258              		@ sp needed
 1259 0000 7047     		bx	lr
 1260              		.cfi_endproc
 1261              	.LFE49:
 1263              		.comm	my_data_buf_fire,200,4
 1264              		.comm	my_data_buf,400,4
 1265              		.global	PER
 1266              		.comm	hdma_tim2_uev,68,4
 1267              		.comm	hdma_usart3_tx,68,4
 1268              		.comm	hdma_usart3_rx,68,4
 1269              		.comm	huart3,112,4
 1270              		.comm	hdma_tim2_ch3,68,4
 1271              		.comm	hdma_tim2_ch4,68,4
 1272              		.comm	hdma_tim2_ch1,68,4
 1273              		.comm	htim3,64,4
 1274              		.comm	htim2,64,4
 1275              		.comm	htim1,64,4
 1276              		.section	.data.PER,"aw",%progbits
 1277              		.align	1
 1278              		.set	.LANCHOR0,. + 0
 1281              	PER:
 1282 0000 1E00     		.short	30
 1283              		.text
 1284              	.Letext0:
 1285              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1286              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1287              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1288              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1289              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1290              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1291              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1292              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 1293              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1294              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1295              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
ARM GAS  /tmp/ccoISNnH.s 			page 52


 1296              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1297              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1298              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1299              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1300              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 1301              		.file 20 "/usr/arm-none-eabi/include/stdlib.h"
 1302              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1303              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1304              		.file 23 "Inc/usb_device.h"
 1305              		.file 24 "/usr/arm-none-eabi/include/string.h"
 1306              		.file 25 "<built-in>"
ARM GAS  /tmp/ccoISNnH.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccoISNnH.s:16     .text.dataTransmittedHandler0:0000000000000000 $t
     /tmp/ccoISNnH.s:23     .text.dataTransmittedHandler0:0000000000000000 dataTransmittedHandler0
     /tmp/ccoISNnH.s:55     .text.dataTransmittedHandler0:0000000000000018 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccoISNnH.s:61     .text.dataTransmittedHandler1:0000000000000000 $t
     /tmp/ccoISNnH.s:68     .text.dataTransmittedHandler1:0000000000000000 dataTransmittedHandler1
     /tmp/ccoISNnH.s:112    .text.dataTransmittedHandler1:0000000000000030 $d
     /tmp/ccoISNnH.s:119    .text.dataTransmittedHandler2:0000000000000000 $t
     /tmp/ccoISNnH.s:126    .text.dataTransmittedHandler2:0000000000000000 dataTransmittedHandler2
     /tmp/ccoISNnH.s:150    .text.dataTransmittedHandler2:000000000000000c $d
     /tmp/ccoISNnH.s:155    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccoISNnH.s:161    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccoISNnH.s:333    .text.MX_GPIO_Init:00000000000000e0 $d
     /tmp/ccoISNnH.s:343    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccoISNnH.s:349    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccoISNnH.s:401    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccoISNnH.s:406    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccoISNnH.s:412    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccoISNnH.s:484    .text.MX_TIM1_Init:000000000000004c $d
                            *COM*:0000000000000040 htim1
     /tmp/ccoISNnH.s:491    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccoISNnH.s:497    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccoISNnH.s:665    .text.MX_TIM2_Init:00000000000000e0 $d
     /tmp/ccoISNnH.s:671    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccoISNnH.s:677    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccoISNnH.s:723    .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart3
     /tmp/ccoISNnH.s:729    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/ccoISNnH.s:736    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/ccoISNnH.s:792    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/ccoISNnH.s:804    .text.startDMA:0000000000000000 $t
     /tmp/ccoISNnH.s:811    .text.startDMA:0000000000000000 startDMA
     /tmp/ccoISNnH.s:895    .text.startDMA:0000000000000070 $d
                            *COM*:0000000000000190 my_data_buf
                            *COM*:00000000000000c8 my_data_buf_fire
     /tmp/ccoISNnH.s:905    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccoISNnH.s:912    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccoISNnH.s:993    .text.main:0000000000000000 $t
     /tmp/ccoISNnH.s:1000   .text.main:0000000000000000 main
     /tmp/ccoISNnH.s:1230   .text.main:0000000000000134 $d
     /tmp/ccoISNnH.s:1243   .text.Error_Handler:0000000000000000 $t
     /tmp/ccoISNnH.s:1250   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccoISNnH.s:1281   .data.PER:0000000000000000 PER
                            *COM*:0000000000000044 hdma_tim2_uev
                            *COM*:0000000000000044 hdma_usart3_tx
                            *COM*:0000000000000044 hdma_usart3_rx
                            *COM*:0000000000000044 hdma_tim2_ch3
                            *COM*:0000000000000044 hdma_tim2_ch4
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000040 htim3
     /tmp/ccoISNnH.s:1277   .data.PER:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_TIM_PWM_Stop
ARM GAS  /tmp/ccoISNnH.s 			page 54


memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_uidiv
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_UART_Init
HAL_DMA_GetState
HAL_DMA_Start_IT
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
HAL_GPIO_ReadPin
