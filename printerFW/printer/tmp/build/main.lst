ARM GAS  /tmp/ccDNc6CK.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.dataTransmittedHandler0,"ax",%progbits
  16              		.align	1
  17              		.global	dataTransmittedHandler0
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	dataTransmittedHandler0:
  24              	.LFB38:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * Copyright (c) 2019 STMicroelectronics International N.V.
  14:Src/main.c    ****   * All rights reserved.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without
  17:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  18:Src/main.c    ****   *
  19:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice,
  20:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  21:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  23:Src/main.c    ****   *    and/or other materials provided with the distribution.
  24:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other
  25:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products
  26:Src/main.c    ****   *    derived from this software without specific written permission.
  27:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this
  28:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  29:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  30:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under
  31:Src/main.c    ****   *    this license is void and will automatically terminate your rights under
  32:Src/main.c    ****   *    this license.
  33:Src/main.c    ****   *
ARM GAS  /tmp/ccDNc6CK.s 			page 2


  34:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS"
  35:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT
  36:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  37:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  38:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT
  39:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  40:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  41:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  42:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  43:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  44:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  45:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  46:Src/main.c    ****   *
  47:Src/main.c    ****   ******************************************************************************
  48:Src/main.c    ****   */
  49:Src/main.c    **** /* USER CODE END Header */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  52:Src/main.c    **** #include "main.h"
  53:Src/main.c    **** #include "usb_device.h"
  54:Src/main.c    **** 
  55:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  56:Src/main.c    **** /* USER CODE BEGIN Includes */
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE END Includes */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  61:Src/main.c    **** /* USER CODE BEGIN PTD */
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE END PTD */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  66:Src/main.c    **** /* USER CODE BEGIN PD */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PM */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PM */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  76:Src/main.c    **** TIM_HandleTypeDef htim1;
  77:Src/main.c    **** TIM_HandleTypeDef htim2;
  78:Src/main.c    **** TIM_HandleTypeDef htim3;
  79:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch1;
  80:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch4;
  81:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch3;
  82:Src/main.c    **** 
  83:Src/main.c    **** UART_HandleTypeDef huart3;
  84:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_rx;
  85:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_tx;
  86:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_uev;
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE BEGIN PV */
  89:Src/main.c    **** uint16_t PER = 300;
  90:Src/main.c    **** /* USER CODE END PV */
ARM GAS  /tmp/ccDNc6CK.s 			page 3


  91:Src/main.c    **** 
  92:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  93:Src/main.c    **** void SystemClock_Config(void);
  94:Src/main.c    **** static void MX_GPIO_Init(void);
  95:Src/main.c    **** static void MX_DMA_Init(void);
  96:Src/main.c    **** static void MX_TIM1_Init(void);
  97:Src/main.c    **** static void MX_TIM2_Init(void);
  98:Src/main.c    **** static void MX_USART3_UART_Init(void);
  99:Src/main.c    **** void transmit_error_handler(DMA_HandleTypeDef * hdma);
 100:Src/main.c    **** void data_tramsmitted_handler(DMA_HandleTypeDef * hdma);
 101:Src/main.c    **** void dma_init();
 102:Src/main.c    **** 
 103:Src/main.c    **** void dfu_otter_bootloader(void)
 104:Src/main.c    **** {
 105:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 106:Src/main.c    ****   NVIC_SystemReset();
 107:Src/main.c    **** }
 108:Src/main.c    **** 
 109:Src/main.c    **** /* USER CODE BEGIN PFP */
 110:Src/main.c    **** 
 111:Src/main.c    **** /* USER CODE END PFP */
 112:Src/main.c    **** 
 113:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 114:Src/main.c    **** /* USER CODE BEGIN 0 */
 115:Src/main.c    **** #define data_len 112
 116:Src/main.c    **** uint16_t my_data_buf[data_len];
 117:Src/main.c    **** 
 118:Src/main.c    **** uint16_t my_data_buf_fire[8];
 119:Src/main.c    **** /* USER CODE END 0 */
 120:Src/main.c    **** 
 121:Src/main.c    **** void dataTransmittedHandler0(DMA_HandleTypeDef *hdma) {
  26              		.loc 1 121 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
 122:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 0);
  36              		.loc 1 122 0
  37 0002 8021     		movs	r1, #128
  38 0004 0022     		movs	r2, #0
  39 0006 4901     		lsls	r1, r1, #5
  40 0008 0348     		ldr	r0, .L2
  41              	.LVL1:
  42 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  43              	.LVL2:
 123:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
  44              		.loc 1 123 0
  45 000e 0021     		movs	r1, #0
  46 0010 0248     		ldr	r0, .L2+4
  47 0012 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  48              	.LVL3:
 124:Src/main.c    **** }
ARM GAS  /tmp/ccDNc6CK.s 			page 4


  49              		.loc 1 124 0
  50              		@ sp needed
  51 0016 10BD     		pop	{r4, pc}
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 0018 00040048 		.word	1207960576
  56 001c 00000000 		.word	htim2
  57              		.cfi_endproc
  58              	.LFE38:
  60              		.section	.text.dataTransmittedHandler1,"ax",%progbits
  61              		.align	1
  62              		.global	dataTransmittedHandler1
  63              		.syntax unified
  64              		.code	16
  65              		.thumb_func
  66              		.fpu softvfp
  68              	dataTransmittedHandler1:
  69              	.LFB39:
 125:Src/main.c    **** void dataTransmittedHandler1(DMA_HandleTypeDef *hdma) {
  70              		.loc 1 125 0
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 0, uses_anonymous_args = 0
  74              	.LVL4:
  75 0000 10B5     		push	{r4, lr}
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 8
  78              		.cfi_offset 4, -8
  79              		.cfi_offset 14, -4
 126:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 0);
  80              		.loc 1 126 0
  81 0002 8021     		movs	r1, #128
  82 0004 0022     		movs	r2, #0
  83 0006 8901     		lsls	r1, r1, #6
  84 0008 0348     		ldr	r0, .L5
  85              	.LVL5:
  86 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL6:
 127:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
  88              		.loc 1 127 0
  89 000e 0821     		movs	r1, #8
  90 0010 0248     		ldr	r0, .L5+4
  91 0012 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  92              	.LVL7:
 128:Src/main.c    **** }
  93              		.loc 1 128 0
  94              		@ sp needed
  95 0016 10BD     		pop	{r4, pc}
  96              	.L6:
  97              		.align	2
  98              	.L5:
  99 0018 00040048 		.word	1207960576
 100 001c 00000000 		.word	htim2
 101              		.cfi_endproc
 102              	.LFE39:
 104              		.section	.text.dataTransmittedHandler2,"ax",%progbits
ARM GAS  /tmp/ccDNc6CK.s 			page 5


 105              		.align	1
 106              		.global	dataTransmittedHandler2
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 110              		.fpu softvfp
 112              	dataTransmittedHandler2:
 113              	.LFB40:
 129:Src/main.c    **** void dataTransmittedHandler2(DMA_HandleTypeDef *hdma) {
 114              		.loc 1 129 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              	.LVL8:
 119 0000 10B5     		push	{r4, lr}
 120              	.LCFI2:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 4, -8
 123              		.cfi_offset 14, -4
 130:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 124              		.loc 1 130 0
 125 0002 0C21     		movs	r1, #12
 126 0004 0148     		ldr	r0, .L8
 127              	.LVL9:
 128 0006 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
 129              	.LVL10:
 131:Src/main.c    **** }
 130              		.loc 1 131 0
 131              		@ sp needed
 132 000a 10BD     		pop	{r4, pc}
 133              	.L9:
 134              		.align	2
 135              	.L8:
 136 000c 00000000 		.word	htim2
 137              		.cfi_endproc
 138              	.LFE40:
 140              		.section	.text.MX_GPIO_Init,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.code	16
 144              		.thumb_func
 145              		.fpu softvfp
 147              	MX_GPIO_Init:
 148              	.LFB48:
 132:Src/main.c    **** 
 133:Src/main.c    **** /**
 134:Src/main.c    ****   * @brief  The application entry point.
 135:Src/main.c    ****   * @retval int
 136:Src/main.c    ****   */
 137:Src/main.c    **** int main(void)
 138:Src/main.c    **** {
 139:Src/main.c    ****   /* USER CODE BEGIN 1 */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE END 1 */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 144:Src/main.c    **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 6


 145:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 146:Src/main.c    ****   HAL_Init();
 147:Src/main.c    **** 
 148:Src/main.c    ****   /* USER CODE BEGIN Init */
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* USER CODE END Init */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* Configure the system clock */
 153:Src/main.c    ****   SystemClock_Config();
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE END SysInit */
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* Initialize all configured peripherals */
 160:Src/main.c    ****   MX_GPIO_Init();
 161:Src/main.c    ****   MX_DMA_Init();
 162:Src/main.c    ****   MX_TIM1_Init();
 163:Src/main.c    ****   MX_TIM2_Init();
 164:Src/main.c    ****   MX_USART3_UART_Init();
 165:Src/main.c    ****   MX_USB_DEVICE_Init();
 166:Src/main.c    ****   //MX_TIM3_Init();
 167:Src/main.c    ****   /* USER CODE BEGIN 2 */
 168:Src/main.c    **** 
 169:Src/main.c    ****   /* USER CODE END 2 */
 170:Src/main.c    **** 
 171:Src/main.c    ****   /* Infinite loop */
 172:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 173:Src/main.c    **** 
 174:Src/main.c    ****   if (HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 175:Src/main.c    ****     dfu_otter_bootloader();
 176:Src/main.c    ****   }
 177:Src/main.c    **** 
 178:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
 179:Src/main.c    **** 
 180:Src/main.c    ****   memset(my_data_buf, 0xFF, data_len);
 181:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
 182:Src/main.c    ****     my_data_buf[i]      = 0xFF01;
 183:Src/main.c    ****     my_data_buf[i + 1]  = 0xFF80;
 184:Src/main.c    ****     my_data_buf[i + 2]  = 0xFF01;
 185:Src/main.c    ****     my_data_buf[i + 3]  = 0xFF04;
 186:Src/main.c    ****     my_data_buf[i + 4]  = 0xFF01;
 187:Src/main.c    ****     my_data_buf[i + 5]  = 0xFF08;
 188:Src/main.c    ****     my_data_buf[i + 6]  = 0xFF01;
 189:Src/main.c    ****     my_data_buf[i + 7]  = 0xFF40;
 190:Src/main.c    ****   }
 191:Src/main.c    **** 
 192:Src/main.c    ****   memset(my_data_buf, 0x00, 8);
 193:Src/main.c    ****   my_data_buf_fire[0] = 0x0002;
 194:Src/main.c    ****   my_data_buf_fire[1] = 0x0002;
 195:Src/main.c    ****   my_data_buf_fire[2] = 0x0000;
 196:Src/main.c    ****   my_data_buf_fire[3] = 0x0000;
 197:Src/main.c    ****   my_data_buf_fire[4] = 0x0001;
 198:Src/main.c    ****   my_data_buf_fire[5] = 0x0001;
 199:Src/main.c    ****   my_data_buf_fire[6] = 0x0000;
 200:Src/main.c    ****   my_data_buf_fire[7] = 0x0000;
 201:Src/main.c    **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 7


 202:Src/main.c    **** 
 203:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dataTransmittedHandler0;
 204:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 205:Src/main.c    **** 
 206:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dataTransmittedHandler1;
 207:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 208:Src/main.c    **** 
 209:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dataTransmittedHandler2;
 210:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 211:Src/main.c    **** 
 212:Src/main.c    ****   startDMA();
 213:Src/main.c    **** 
 214:Src/main.c    ****   while (1)
 215:Src/main.c    ****   {
 216:Src/main.c    ****     HAL_Delay(500);
 217:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 218:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
 219:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOB,  F3_Pin);
 220:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOB,  F5_Pin);
 221:Src/main.c    ****     startDMA();
 222:Src/main.c    ****   }
 223:Src/main.c    **** }
 224:Src/main.c    **** void startDMA() {
 225:Src/main.c    **** 
 226:Src/main.c    **** 
 227:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC1]) == HAL_DMA_STATE_BUSY) {
 228:Src/main.c    ****     return;
 229:Src/main.c    ****   }
 230:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC3]) == HAL_DMA_STATE_BUSY) {
 231:Src/main.c    ****     return;
 232:Src/main.c    ****   }
 233:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC4]) == HAL_DMA_STATE_BUSY) {
 234:Src/main.c    ****     return;
 235:Src/main.c    ****   }
 236:Src/main.c    **** 
 237:Src/main.c    **** 
 238:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC1], (uint32_t)my_data_buf, (uint32_t)&GPIOA->ODR, data_l
 239:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC3], (uint32_t)my_data_buf, (uint32_t)&GPIOB->ODR, 8);
 240:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf, (uint32_t)&GPIOC->ODR, data_l
 241:Src/main.c    **** 
 242:Src/main.c    ****   TIM2->CNT = 0u;
 243:Src/main.c    **** 
 244:Src/main.c    ****   if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK) {
 245:Src/main.c    ****   }
 246:Src/main.c    ****   if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK) {
 247:Src/main.c    ****   }
 248:Src/main.c    ****   if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK) {
 249:Src/main.c    ****   }
 250:Src/main.c    **** }
 251:Src/main.c    **** 
 252:Src/main.c    **** 
 253:Src/main.c    **** 
 254:Src/main.c    **** /**
 255:Src/main.c    ****   * @brief System Clock Configuration
 256:Src/main.c    ****   * @retval None
 257:Src/main.c    ****   */
 258:Src/main.c    **** void SystemClock_Config(void)
ARM GAS  /tmp/ccDNc6CK.s 			page 8


 259:Src/main.c    **** {
 260:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 261:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 262:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 263:Src/main.c    **** 
 264:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 265:Src/main.c    ****   */
 266:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 267:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 268:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 269:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 270:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 271:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks
 276:Src/main.c    ****   */
 277:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 278:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 279:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 280:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 281:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 282:Src/main.c    **** 
 283:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 284:Src/main.c    ****   {
 285:Src/main.c    ****     Error_Handler();
 286:Src/main.c    ****   }
 287:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 288:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 289:Src/main.c    **** 
 290:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 291:Src/main.c    ****   {
 292:Src/main.c    ****     Error_Handler();
 293:Src/main.c    ****   }
 294:Src/main.c    **** }
 295:Src/main.c    **** 
 296:Src/main.c    **** 
 297:Src/main.c    **** /**
 298:Src/main.c    ****   * @brief TIM1 Initialization Function
 299:Src/main.c    ****   * @param None
 300:Src/main.c    ****   * @retval None
 301:Src/main.c    ****   */
 302:Src/main.c    **** static void MX_TIM1_Init(void)
 303:Src/main.c    **** {
 304:Src/main.c    **** 
 305:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 306:Src/main.c    **** 
 307:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 308:Src/main.c    **** 
 309:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 310:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 311:Src/main.c    **** 
 312:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 313:Src/main.c    **** 
 314:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 315:Src/main.c    ****   htim1.Instance = TIM1;
ARM GAS  /tmp/ccDNc6CK.s 			page 9


 316:Src/main.c    ****   htim1.Init.Prescaler = 0;
 317:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 318:Src/main.c    ****   htim1.Init.Period = 0;
 319:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 320:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 321:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 322:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 323:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 324:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 325:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 326:Src/main.c    ****   sConfig.IC1Filter = 0;
 327:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 328:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 329:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 330:Src/main.c    ****   sConfig.IC2Filter = 0;
 331:Src/main.c    ****   if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 332:Src/main.c    ****   {
 333:Src/main.c    ****     Error_Handler();
 334:Src/main.c    ****   }
 335:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 336:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 337:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 338:Src/main.c    ****   {
 339:Src/main.c    ****     Error_Handler();
 340:Src/main.c    ****   }
 341:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 342:Src/main.c    **** 
 343:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 344:Src/main.c    **** 
 345:Src/main.c    **** }
 346:Src/main.c    **** 
 347:Src/main.c    **** /**
 348:Src/main.c    ****   * @brief TIM2 Initialization Function
 349:Src/main.c    ****   * @param None
 350:Src/main.c    ****   * @retval None
 351:Src/main.c    ****   */
 352:Src/main.c    **** static void MX_TIM2_Init(void)
 353:Src/main.c    **** {
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 356:Src/main.c    **** 
 357:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 358:Src/main.c    **** 
 359:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 360:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 361:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 362:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 363:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 364:Src/main.c    **** 
 365:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 366:Src/main.c    **** 
 367:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 368:Src/main.c    ****   htim2.Instance = TIM2;
 369:Src/main.c    ****   htim2.Init.Prescaler = 0;
 370:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 371:Src/main.c    ****   htim2.Init.Period = PER;
 372:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccDNc6CK.s 			page 10


 373:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 374:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 375:Src/main.c    ****   {
 376:Src/main.c    ****     Error_Handler();
 377:Src/main.c    ****   }
 378:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 379:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 380:Src/main.c    ****   {
 381:Src/main.c    ****     Error_Handler();
 382:Src/main.c    ****   }
 383:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     Error_Handler();
 386:Src/main.c    ****   }
 387:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 388:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 389:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 390:Src/main.c    ****   {
 391:Src/main.c    ****     Error_Handler();
 392:Src/main.c    ****   }
 393:Src/main.c    ****   sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 394:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 395:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 396:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 397:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 398:Src/main.c    ****   {
 399:Src/main.c    ****     Error_Handler();
 400:Src/main.c    ****   }
 401:Src/main.c    ****   sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 402:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 403:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 404:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 405:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 406:Src/main.c    ****   {
 407:Src/main.c    ****     Error_Handler();
 408:Src/main.c    ****   }
 409:Src/main.c    **** 
 410:Src/main.c    ****   sConfigOC3.OCMode = TIM_OCMODE_PWM1;
 411:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 412:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 413:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 414:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 415:Src/main.c    ****   {
 416:Src/main.c    ****     Error_Handler();
 417:Src/main.c    ****   }
 418:Src/main.c    **** }
 419:Src/main.c    **** 
 420:Src/main.c    **** /**
 421:Src/main.c    ****   * @brief USART3 Initialization Function
 422:Src/main.c    ****   * @param None
 423:Src/main.c    ****   * @retval None
 424:Src/main.c    ****   */
 425:Src/main.c    **** static void MX_USART3_UART_Init(void)
 426:Src/main.c    **** {
 427:Src/main.c    **** 
 428:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 429:Src/main.c    **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 11


 430:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 431:Src/main.c    **** 
 432:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 433:Src/main.c    **** 
 434:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 435:Src/main.c    ****   huart3.Instance = USART3;
 436:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 437:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 438:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 439:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 440:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 441:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 442:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 443:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 444:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 445:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 446:Src/main.c    ****   {
 447:Src/main.c    ****     Error_Handler();
 448:Src/main.c    ****   }
 449:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 450:Src/main.c    **** 
 451:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 452:Src/main.c    **** 
 453:Src/main.c    **** }
 454:Src/main.c    **** 
 455:Src/main.c    **** /**
 456:Src/main.c    ****   * Enable DMA controller clock
 457:Src/main.c    ****   */
 458:Src/main.c    **** static void MX_DMA_Init(void)
 459:Src/main.c    **** {
 460:Src/main.c    ****   /* DMA controller clock enable */
 461:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 462:Src/main.c    **** 
 463:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 464:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 465:Src/main.c    ****   /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
 466:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 467:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 468:Src/main.c    **** }
 469:Src/main.c    **** 
 470:Src/main.c    **** /**
 471:Src/main.c    ****   * @brief GPIO Initialization Function
 472:Src/main.c    ****   * @param None
 473:Src/main.c    ****   * @retval None
 474:Src/main.c    ****   */
 475:Src/main.c    **** static void MX_GPIO_Init(void)
 476:Src/main.c    **** {
 149              		.loc 1 476 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 32
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 20
 156              		.cfi_offset 4, -20
 157              		.cfi_offset 5, -16
 158              		.cfi_offset 6, -12
ARM GAS  /tmp/ccDNc6CK.s 			page 12


 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 0002 89B0     		sub	sp, sp, #36
 162              	.LCFI4:
 163              		.cfi_def_cfa_offset 56
 477:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 164              		.loc 1 477 0
 165 0004 1422     		movs	r2, #20
 166 0006 0021     		movs	r1, #0
 167 0008 03A8     		add	r0, sp, #12
 168 000a FFF7FEFF 		bl	memset
 169              	.LVL11:
 170              	.LBB8:
 478:Src/main.c    **** 
 479:Src/main.c    ****   /* GPIO Ports Clock Enable */
 480:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 171              		.loc 1 480 0
 172 000e 344B     		ldr	r3, .L11
 173 0010 5969     		ldr	r1, [r3, #20]
 174 0012 8020     		movs	r0, #128
 175 0014 0003     		lsls	r0, r0, #12
 176 0016 0143     		orrs	r1, r0
 177 0018 5961     		str	r1, [r3, #20]
 178 001a 5A69     		ldr	r2, [r3, #20]
 179 001c 0240     		ands	r2, r0
 180 001e 0092     		str	r2, [sp]
 181 0020 009A     		ldr	r2, [sp]
 182              	.LBE8:
 183              	.LBB9:
 481:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 184              		.loc 1 481 0
 185 0022 5969     		ldr	r1, [r3, #20]
 186 0024 8020     		movs	r0, #128
 187 0026 8002     		lsls	r0, r0, #10
 188 0028 0143     		orrs	r1, r0
 189 002a 5961     		str	r1, [r3, #20]
 190 002c 5A69     		ldr	r2, [r3, #20]
 191 002e 0240     		ands	r2, r0
 192 0030 0192     		str	r2, [sp, #4]
 193 0032 019A     		ldr	r2, [sp, #4]
 194              	.LBE9:
 195              	.LBB10:
 482:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 196              		.loc 1 482 0
 197 0034 5A69     		ldr	r2, [r3, #20]
 198 0036 8021     		movs	r1, #128
 199 0038 C902     		lsls	r1, r1, #11
 200 003a 0A43     		orrs	r2, r1
 201 003c 5A61     		str	r2, [r3, #20]
 202 003e 5B69     		ldr	r3, [r3, #20]
 203 0040 0B40     		ands	r3, r1
 204 0042 0293     		str	r3, [sp, #8]
 205 0044 029B     		ldr	r3, [sp, #8]
 206              	.LBE10:
 483:Src/main.c    **** 
 484:Src/main.c    ****   /*Configure GPIO pin Output Level */
 485:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, D1_Pin | D2_Pin | D3_Pin, GPIO_PIN_RESET);
ARM GAS  /tmp/ccDNc6CK.s 			page 13


 207              		.loc 1 485 0
 208 0046 E024     		movs	r4, #224
 209 0048 2402     		lsls	r4, r4, #8
 210 004a 0022     		movs	r2, #0
 211 004c 2100     		movs	r1, r4
 212 004e 2548     		ldr	r0, .L11+4
 213 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 214              	.LVL12:
 486:Src/main.c    **** 
 487:Src/main.c    ****   /*Configure GPIO pin Output Level */
 488:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 215              		.loc 1 488 0
 216 0054 0022     		movs	r2, #0
 217 0056 2449     		ldr	r1, .L11+8
 218 0058 9020     		movs	r0, #144
 219 005a C005     		lsls	r0, r0, #23
 220 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 221              	.LVL13:
 489:Src/main.c    ****                     | S4_Pin | S1_Pin | LED_STATUSA15_Pin, GPIO_PIN_RESET);
 490:Src/main.c    **** 
 491:Src/main.c    ****   /*Configure GPIO pin Output Level */
 492:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin | LED_POWER_Pin | CSYNC_Pin  | F3_Pin | F5_Pin, GPIO_PIN_
 222              		.loc 1 492 0
 223 0060 224D     		ldr	r5, .L11+12
 224 0062 0022     		movs	r2, #0
 225 0064 2900     		movs	r1, r5
 226 0066 2248     		ldr	r0, .L11+16
 227 0068 FFF7FEFF 		bl	HAL_GPIO_WritePin
 228              	.LVL14:
 493:Src/main.c    **** 
 494:Src/main.c    ****   /*Configure GPIO pins : D1_Pin D2_Pin D3_Pin */
 495:Src/main.c    ****   GPIO_InitStruct.Pin = D1_Pin | D2_Pin | D3_Pin;
 229              		.loc 1 495 0
 230 006c 0394     		str	r4, [sp, #12]
 496:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 231              		.loc 1 496 0
 232 006e 0127     		movs	r7, #1
 233 0070 0497     		str	r7, [sp, #16]
 497:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 234              		.loc 1 497 0
 235 0072 0024     		movs	r4, #0
 236 0074 0594     		str	r4, [sp, #20]
 498:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 237              		.loc 1 498 0
 238 0076 0326     		movs	r6, #3
 239 0078 0696     		str	r6, [sp, #24]
 499:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 240              		.loc 1 499 0
 241 007a 03A9     		add	r1, sp, #12
 242 007c 1948     		ldr	r0, .L11+4
 243 007e FFF7FEFF 		bl	HAL_GPIO_Init
 244              	.LVL15:
 500:Src/main.c    **** 
 501:Src/main.c    ****   /*Configure GPIO pins : DCLCK_Pin S5_Pin S2_Pin S3_Pin
 502:Src/main.c    ****                            S4_Pin S1_Pin LED_STATUSA15_Pin */
 503:Src/main.c    ****   GPIO_InitStruct.Pin = DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 245              		.loc 1 503 0
ARM GAS  /tmp/ccDNc6CK.s 			page 14


 246 0082 CF23     		movs	r3, #207
 247 0084 0393     		str	r3, [sp, #12]
 504:Src/main.c    ****                         | S4_Pin | S1_Pin;
 505:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 248              		.loc 1 505 0
 249 0086 0497     		str	r7, [sp, #16]
 506:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 250              		.loc 1 506 0
 251 0088 0594     		str	r4, [sp, #20]
 507:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 252              		.loc 1 507 0
 253 008a 0696     		str	r6, [sp, #24]
 508:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 254              		.loc 1 508 0
 255 008c 03A9     		add	r1, sp, #12
 256 008e 9020     		movs	r0, #144
 257 0090 C005     		lsls	r0, r0, #23
 258 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 259              	.LVL16:
 509:Src/main.c    **** 
 510:Src/main.c    ****   /*Configure GPIO pin : INT_IN_Pin */
 511:Src/main.c    ****   GPIO_InitStruct.Pin = INT_IN_Pin;
 260              		.loc 1 511 0
 261 0096 0423     		movs	r3, #4
 262 0098 0393     		str	r3, [sp, #12]
 512:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 263              		.loc 1 512 0
 264 009a 164B     		ldr	r3, .L11+20
 265 009c 0493     		str	r3, [sp, #16]
 513:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 266              		.loc 1 513 0
 267 009e 0594     		str	r4, [sp, #20]
 514:Src/main.c    ****   HAL_GPIO_Init(INT_IN_GPIO_Port, &GPIO_InitStruct);
 268              		.loc 1 514 0
 269 00a0 03A9     		add	r1, sp, #12
 270 00a2 1348     		ldr	r0, .L11+16
 271 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 272              	.LVL17:
 515:Src/main.c    **** 
 516:Src/main.c    ****   /*Configure GPIO pins : LED_STATUS_Pin LED_POWER_Pin CSYNC_Pin */
 517:Src/main.c    ****   GPIO_InitStruct.Pin =  F3_Pin | F5_Pin | LED_STATUS_Pin | LED_POWER_Pin | CSYNC_Pin;
 273              		.loc 1 517 0
 274 00a8 0395     		str	r5, [sp, #12]
 518:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 275              		.loc 1 518 0
 276 00aa 0497     		str	r7, [sp, #16]
 519:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 277              		.loc 1 519 0
 278 00ac 0594     		str	r4, [sp, #20]
 520:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 279              		.loc 1 520 0
 280 00ae 0696     		str	r6, [sp, #24]
 521:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 281              		.loc 1 521 0
 282 00b0 03A9     		add	r1, sp, #12
 283 00b2 0F48     		ldr	r0, .L11+16
 284 00b4 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccDNc6CK.s 			page 15


 285              	.LVL18:
 522:Src/main.c    **** 
 523:Src/main.c    ****   /*Configure GPIO pins : INDEX_Pin BUTTON_Pin */
 524:Src/main.c    ****   GPIO_InitStruct.Pin = INDEX_Pin | BUTTON_Pin;
 286              		.loc 1 524 0
 287 00b8 8123     		movs	r3, #129
 288 00ba 1B02     		lsls	r3, r3, #8
 289 00bc 0393     		str	r3, [sp, #12]
 525:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 290              		.loc 1 525 0
 291 00be 0494     		str	r4, [sp, #16]
 526:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 292              		.loc 1 526 0
 293 00c0 0223     		movs	r3, #2
 294 00c2 0593     		str	r3, [sp, #20]
 527:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 295              		.loc 1 527 0
 296 00c4 03A9     		add	r1, sp, #12
 297 00c6 0A48     		ldr	r0, .L11+16
 298 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 299              	.LVL19:
 528:Src/main.c    **** 
 529:Src/main.c    ****   /*Configure GPIO pins : ANALOG_INPUT3_Pin ANALOG_INPUT2_Pin ANALOG_INPUT1_Pin */
 530:Src/main.c    ****   GPIO_InitStruct.Pin = ANALOG_INPUT3_Pin | ANALOG_INPUT2_Pin | ANALOG_INPUT1_Pin;
 300              		.loc 1 530 0
 301 00cc 3823     		movs	r3, #56
 302 00ce 0393     		str	r3, [sp, #12]
 531:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 303              		.loc 1 531 0
 304 00d0 0496     		str	r6, [sp, #16]
 532:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 305              		.loc 1 532 0
 306 00d2 0594     		str	r4, [sp, #20]
 533:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 307              		.loc 1 533 0
 308 00d4 03A9     		add	r1, sp, #12
 309 00d6 0648     		ldr	r0, .L11+16
 310 00d8 FFF7FEFF 		bl	HAL_GPIO_Init
 311              	.LVL20:
 534:Src/main.c    **** 
 535:Src/main.c    **** }
 312              		.loc 1 535 0
 313 00dc 09B0     		add	sp, sp, #36
 314              		@ sp needed
 315 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 316              	.L12:
 317              		.align	2
 318              	.L11:
 319 00e0 00100240 		.word	1073876992
 320 00e4 00080048 		.word	1207961600
 321 00e8 CF800000 		.word	32975
 322 00ec 03320000 		.word	12803
 323 00f0 00040048 		.word	1207960576
 324 00f4 00001110 		.word	269549568
 325              		.cfi_endproc
 326              	.LFE48:
 328              		.section	.text.MX_DMA_Init,"ax",%progbits
ARM GAS  /tmp/ccDNc6CK.s 			page 16


 329              		.align	1
 330              		.syntax unified
 331              		.code	16
 332              		.thumb_func
 333              		.fpu softvfp
 335              	MX_DMA_Init:
 336              	.LFB47:
 459:Src/main.c    ****   /* DMA controller clock enable */
 337              		.loc 1 459 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 00B5     		push	{lr}
 342              	.LCFI5:
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 14, -4
 345 0002 83B0     		sub	sp, sp, #12
 346              	.LCFI6:
 347              		.cfi_def_cfa_offset 16
 348              	.LBB11:
 461:Src/main.c    **** 
 349              		.loc 1 461 0
 350 0004 0D4A     		ldr	r2, .L14
 351 0006 5169     		ldr	r1, [r2, #20]
 352 0008 0123     		movs	r3, #1
 353 000a 1943     		orrs	r1, r3
 354 000c 5161     		str	r1, [r2, #20]
 355 000e 5269     		ldr	r2, [r2, #20]
 356 0010 1340     		ands	r3, r2
 357 0012 0193     		str	r3, [sp, #4]
 358 0014 019B     		ldr	r3, [sp, #4]
 359              	.LBE11:
 463:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 360              		.loc 1 463 0
 361 0016 0022     		movs	r2, #0
 362 0018 0021     		movs	r1, #0
 363 001a 0920     		movs	r0, #9
 364 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL21:
 464:Src/main.c    ****   /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
 366              		.loc 1 464 0
 367 0020 0920     		movs	r0, #9
 368 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL22:
 466:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 370              		.loc 1 466 0
 371 0026 0022     		movs	r2, #0
 372 0028 0021     		movs	r1, #0
 373 002a 0B20     		movs	r0, #11
 374 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL23:
 467:Src/main.c    **** }
 376              		.loc 1 467 0
 377 0030 0B20     		movs	r0, #11
 378 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL24:
 468:Src/main.c    **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 17


 380              		.loc 1 468 0
 381 0036 03B0     		add	sp, sp, #12
 382              		@ sp needed
 383 0038 00BD     		pop	{pc}
 384              	.L15:
 385 003a C046     		.align	2
 386              	.L14:
 387 003c 00100240 		.word	1073876992
 388              		.cfi_endproc
 389              	.LFE47:
 391              		.section	.text.MX_TIM1_Init,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.code	16
 395              		.thumb_func
 396              		.fpu softvfp
 398              	MX_TIM1_Init:
 399              	.LFB44:
 303:Src/main.c    **** 
 400              		.loc 1 303 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 48
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404 0000 30B5     		push	{r4, r5, lr}
 405              	.LCFI7:
 406              		.cfi_def_cfa_offset 12
 407              		.cfi_offset 4, -12
 408              		.cfi_offset 5, -8
 409              		.cfi_offset 14, -4
 410 0002 8DB0     		sub	sp, sp, #52
 411              	.LCFI8:
 412              		.cfi_def_cfa_offset 64
 309:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 413              		.loc 1 309 0
 414 0004 2022     		movs	r2, #32
 415 0006 0021     		movs	r1, #0
 416 0008 04A8     		add	r0, sp, #16
 417 000a FFF7FEFF 		bl	memset
 418              	.LVL25:
 310:Src/main.c    **** 
 419              		.loc 1 310 0
 420 000e 0822     		movs	r2, #8
 421 0010 0021     		movs	r1, #0
 422 0012 01A8     		add	r0, sp, #4
 423 0014 FFF7FEFF 		bl	memset
 424              	.LVL26:
 315:Src/main.c    ****   htim1.Init.Prescaler = 0;
 425              		.loc 1 315 0
 426 0018 0C4C     		ldr	r4, .L17
 427 001a 0D4B     		ldr	r3, .L17+4
 428 001c 2360     		str	r3, [r4]
 316:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 429              		.loc 1 316 0
 430 001e 0025     		movs	r5, #0
 431 0020 6560     		str	r5, [r4, #4]
 317:Src/main.c    ****   htim1.Init.Period = 0;
 432              		.loc 1 317 0
ARM GAS  /tmp/ccDNc6CK.s 			page 18


 433 0022 A560     		str	r5, [r4, #8]
 318:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 434              		.loc 1 318 0
 435 0024 E560     		str	r5, [r4, #12]
 319:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 436              		.loc 1 319 0
 437 0026 2561     		str	r5, [r4, #16]
 320:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 438              		.loc 1 320 0
 439 0028 6561     		str	r5, [r4, #20]
 321:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 440              		.loc 1 321 0
 441 002a A561     		str	r5, [r4, #24]
 322:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 442              		.loc 1 322 0
 443 002c 0123     		movs	r3, #1
 444 002e 0393     		str	r3, [sp, #12]
 324:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 445              		.loc 1 324 0
 446 0030 0593     		str	r3, [sp, #20]
 328:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 447              		.loc 1 328 0
 448 0032 0993     		str	r3, [sp, #36]
 331:Src/main.c    ****   {
 449              		.loc 1 331 0
 450 0034 03A9     		add	r1, sp, #12
 451 0036 2000     		movs	r0, r4
 452 0038 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 453              	.LVL27:
 335:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 454              		.loc 1 335 0
 455 003c 0195     		str	r5, [sp, #4]
 336:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 456              		.loc 1 336 0
 457 003e 0295     		str	r5, [sp, #8]
 337:Src/main.c    ****   {
 458              		.loc 1 337 0
 459 0040 01A9     		add	r1, sp, #4
 460 0042 2000     		movs	r0, r4
 461 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 462              	.LVL28:
 345:Src/main.c    **** 
 463              		.loc 1 345 0
 464 0048 0DB0     		add	sp, sp, #52
 465              		@ sp needed
 466 004a 30BD     		pop	{r4, r5, pc}
 467              	.L18:
 468              		.align	2
 469              	.L17:
 470 004c 00000000 		.word	htim1
 471 0050 002C0140 		.word	1073818624
 472              		.cfi_endproc
 473              	.LFE44:
 475              		.global	__aeabi_uidiv
 476              		.section	.text.MX_TIM2_Init,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
ARM GAS  /tmp/ccDNc6CK.s 			page 19


 479              		.code	16
 480              		.thumb_func
 481              		.fpu softvfp
 483              	MX_TIM2_Init:
 484              	.LFB45:
 353:Src/main.c    **** 
 485              		.loc 1 353 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 112
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 490              	.LCFI9:
 491              		.cfi_def_cfa_offset 20
 492              		.cfi_offset 4, -20
 493              		.cfi_offset 5, -16
 494              		.cfi_offset 6, -12
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 C646     		mov	lr, r8
 498 0004 00B5     		push	{lr}
 499              	.LCFI10:
 500              		.cfi_def_cfa_offset 24
 501              		.cfi_offset 8, -24
 502 0006 9CB0     		sub	sp, sp, #112
 503              	.LCFI11:
 504              		.cfi_def_cfa_offset 136
 359:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 505              		.loc 1 359 0
 506 0008 1022     		movs	r2, #16
 507 000a 0021     		movs	r1, #0
 508 000c 18A8     		add	r0, sp, #96
 509 000e FFF7FEFF 		bl	memset
 510              	.LVL29:
 360:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 511              		.loc 1 360 0
 512 0012 0822     		movs	r2, #8
 513 0014 0021     		movs	r1, #0
 514 0016 16A8     		add	r0, sp, #88
 515 0018 FFF7FEFF 		bl	memset
 516              	.LVL30:
 361:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 517              		.loc 1 361 0
 518 001c 1C22     		movs	r2, #28
 519 001e 0021     		movs	r1, #0
 520 0020 0FA8     		add	r0, sp, #60
 521 0022 FFF7FEFF 		bl	memset
 522              	.LVL31:
 362:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 523              		.loc 1 362 0
 524 0026 1C22     		movs	r2, #28
 525 0028 0021     		movs	r1, #0
 526 002a 08A8     		add	r0, sp, #32
 527 002c FFF7FEFF 		bl	memset
 528              	.LVL32:
 363:Src/main.c    **** 
 529              		.loc 1 363 0
 530 0030 1C22     		movs	r2, #28
ARM GAS  /tmp/ccDNc6CK.s 			page 20


 531 0032 0021     		movs	r1, #0
 532 0034 01A8     		add	r0, sp, #4
 533 0036 FFF7FEFF 		bl	memset
 534              	.LVL33:
 368:Src/main.c    ****   htim2.Init.Prescaler = 0;
 535              		.loc 1 368 0
 536 003a 294C     		ldr	r4, .L20
 537 003c 8023     		movs	r3, #128
 538 003e DB05     		lsls	r3, r3, #23
 539 0040 2360     		str	r3, [r4]
 369:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 540              		.loc 1 369 0
 541 0042 0025     		movs	r5, #0
 542 0044 6560     		str	r5, [r4, #4]
 370:Src/main.c    ****   htim2.Init.Period = PER;
 543              		.loc 1 370 0
 544 0046 A560     		str	r5, [r4, #8]
 371:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 545              		.loc 1 371 0
 546 0048 264E     		ldr	r6, .L20+4
 547 004a 3388     		ldrh	r3, [r6]
 548 004c E360     		str	r3, [r4, #12]
 372:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 549              		.loc 1 372 0
 550 004e 2561     		str	r5, [r4, #16]
 373:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 551              		.loc 1 373 0
 552 0050 A561     		str	r5, [r4, #24]
 374:Src/main.c    ****   {
 553              		.loc 1 374 0
 554 0052 2000     		movs	r0, r4
 555 0054 FFF7FEFF 		bl	HAL_TIM_Base_Init
 556              	.LVL34:
 378:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 557              		.loc 1 378 0
 558 0058 8023     		movs	r3, #128
 559 005a 5B01     		lsls	r3, r3, #5
 560 005c 1893     		str	r3, [sp, #96]
 379:Src/main.c    ****   {
 561              		.loc 1 379 0
 562 005e 18A9     		add	r1, sp, #96
 563 0060 2000     		movs	r0, r4
 564 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 565              	.LVL35:
 383:Src/main.c    ****   {
 566              		.loc 1 383 0
 567 0066 2000     		movs	r0, r4
 568 0068 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 569              	.LVL36:
 387:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 570              		.loc 1 387 0
 571 006c 1695     		str	r5, [sp, #88]
 388:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 572              		.loc 1 388 0
 573 006e 1795     		str	r5, [sp, #92]
 389:Src/main.c    ****   {
 574              		.loc 1 389 0
ARM GAS  /tmp/ccDNc6CK.s 			page 21


 575 0070 16A9     		add	r1, sp, #88
 576 0072 2000     		movs	r0, r4
 577 0074 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 578              	.LVL37:
 393:Src/main.c    ****   sConfigOC1.Pulse = PER / 3;
 579              		.loc 1 393 0
 580 0078 6023     		movs	r3, #96
 581 007a 9846     		mov	r8, r3
 582 007c 0F93     		str	r3, [sp, #60]
 394:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 583              		.loc 1 394 0
 584 007e 3088     		ldrh	r0, [r6]
 585 0080 0321     		movs	r1, #3
 586 0082 FFF7FEFF 		bl	__aeabi_uidiv
 587              	.LVL38:
 588 0086 80B2     		uxth	r0, r0
 589 0088 1090     		str	r0, [sp, #64]
 395:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 590              		.loc 1 395 0
 591 008a 0227     		movs	r7, #2
 592 008c 1197     		str	r7, [sp, #68]
 396:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1) != HAL_OK)
 593              		.loc 1 396 0
 594 008e 1395     		str	r5, [sp, #76]
 397:Src/main.c    ****   {
 595              		.loc 1 397 0
 596 0090 0022     		movs	r2, #0
 597 0092 0FA9     		add	r1, sp, #60
 598 0094 2000     		movs	r0, r4
 599 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 600              	.LVL39:
 401:Src/main.c    ****   sConfigOC4.Pulse = (PER / 3) * 2;
 601              		.loc 1 401 0
 602 009a 4346     		mov	r3, r8
 603 009c 0893     		str	r3, [sp, #32]
 402:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_HIGH;
 604              		.loc 1 402 0
 605 009e 3088     		ldrh	r0, [r6]
 606 00a0 0321     		movs	r1, #3
 607 00a2 FFF7FEFF 		bl	__aeabi_uidiv
 608              	.LVL40:
 609 00a6 80B2     		uxth	r0, r0
 610 00a8 4000     		lsls	r0, r0, #1
 611 00aa 0990     		str	r0, [sp, #36]
 403:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 612              		.loc 1 403 0
 613 00ac 0A95     		str	r5, [sp, #40]
 404:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4) != HAL_OK)
 614              		.loc 1 404 0
 615 00ae 0C95     		str	r5, [sp, #48]
 405:Src/main.c    ****   {
 616              		.loc 1 405 0
 617 00b0 0C22     		movs	r2, #12
 618 00b2 08A9     		add	r1, sp, #32
 619 00b4 2000     		movs	r0, r4
 620 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 621              	.LVL41:
ARM GAS  /tmp/ccDNc6CK.s 			page 22


 410:Src/main.c    ****   sConfigOC3.Pulse = PER / 3;
 622              		.loc 1 410 0
 623 00ba 4346     		mov	r3, r8
 624 00bc 0193     		str	r3, [sp, #4]
 411:Src/main.c    ****   sConfigOC3.OCPolarity = TIM_OCPOLARITY_LOW;
 625              		.loc 1 411 0
 626 00be 3088     		ldrh	r0, [r6]
 627 00c0 0321     		movs	r1, #3
 628 00c2 FFF7FEFF 		bl	__aeabi_uidiv
 629              	.LVL42:
 630 00c6 80B2     		uxth	r0, r0
 631 00c8 0290     		str	r0, [sp, #8]
 412:Src/main.c    ****   sConfigOC3.OCFastMode = TIM_OCFAST_DISABLE;
 632              		.loc 1 412 0
 633 00ca 0397     		str	r7, [sp, #12]
 413:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC3, TIM_CHANNEL_3) != HAL_OK)
 634              		.loc 1 413 0
 635 00cc 0595     		str	r5, [sp, #20]
 414:Src/main.c    ****   {
 636              		.loc 1 414 0
 637 00ce 0822     		movs	r2, #8
 638 00d0 01A9     		add	r1, sp, #4
 639 00d2 2000     		movs	r0, r4
 640 00d4 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 641              	.LVL43:
 418:Src/main.c    **** 
 642              		.loc 1 418 0
 643 00d8 1CB0     		add	sp, sp, #112
 644              		@ sp needed
 645 00da 04BC     		pop	{r2}
 646 00dc 9046     		mov	r8, r2
 647 00de F0BD     		pop	{r4, r5, r6, r7, pc}
 648              	.L21:
 649              		.align	2
 650              	.L20:
 651 00e0 00000000 		.word	htim2
 652 00e4 00000000 		.word	.LANCHOR0
 653              		.cfi_endproc
 654              	.LFE45:
 656              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 657              		.align	1
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 661              		.fpu softvfp
 663              	MX_USART3_UART_Init:
 664              	.LFB46:
 426:Src/main.c    **** 
 665              		.loc 1 426 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669 0000 10B5     		push	{r4, lr}
 670              	.LCFI12:
 671              		.cfi_def_cfa_offset 8
 672              		.cfi_offset 4, -8
 673              		.cfi_offset 14, -4
ARM GAS  /tmp/ccDNc6CK.s 			page 23


 435:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 674              		.loc 1 435 0
 675 0002 0948     		ldr	r0, .L23
 676 0004 094B     		ldr	r3, .L23+4
 677 0006 0360     		str	r3, [r0]
 436:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 678              		.loc 1 436 0
 679 0008 E123     		movs	r3, #225
 680 000a 5B02     		lsls	r3, r3, #9
 681 000c 4360     		str	r3, [r0, #4]
 437:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 682              		.loc 1 437 0
 683 000e 0023     		movs	r3, #0
 684 0010 8360     		str	r3, [r0, #8]
 438:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 685              		.loc 1 438 0
 686 0012 C360     		str	r3, [r0, #12]
 439:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 687              		.loc 1 439 0
 688 0014 0361     		str	r3, [r0, #16]
 440:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 689              		.loc 1 440 0
 690 0016 0C22     		movs	r2, #12
 691 0018 4261     		str	r2, [r0, #20]
 441:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 692              		.loc 1 441 0
 693 001a 8361     		str	r3, [r0, #24]
 442:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 694              		.loc 1 442 0
 695 001c C361     		str	r3, [r0, #28]
 443:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 696              		.loc 1 443 0
 697 001e 0362     		str	r3, [r0, #32]
 444:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 698              		.loc 1 444 0
 699 0020 4362     		str	r3, [r0, #36]
 445:Src/main.c    ****   {
 700              		.loc 1 445 0
 701 0022 FFF7FEFF 		bl	HAL_UART_Init
 702              	.LVL44:
 453:Src/main.c    **** 
 703              		.loc 1 453 0
 704              		@ sp needed
 705 0026 10BD     		pop	{r4, pc}
 706              	.L24:
 707              		.align	2
 708              	.L23:
 709 0028 00000000 		.word	huart3
 710 002c 00480040 		.word	1073760256
 711              		.cfi_endproc
 712              	.LFE46:
 714              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 715              		.align	1
 716              		.global	dfu_otter_bootloader
 717              		.syntax unified
 718              		.code	16
 719              		.thumb_func
ARM GAS  /tmp/ccDNc6CK.s 			page 24


 720              		.fpu softvfp
 722              	dfu_otter_bootloader:
 723              	.LFB37:
 104:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 724              		.loc 1 104 0
 725              		.cfi_startproc
 726              		@ Volatile: function does not return.
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 105:Src/main.c    ****   NVIC_SystemReset();
 730              		.loc 1 105 0
 731 0000 054B     		ldr	r3, .L27
 732 0002 064A     		ldr	r2, .L27+4
 733 0004 1A60     		str	r2, [r3]
 734              	.LBB20:
 735              	.LBB21:
 736              	.LBB22:
 737              	.LBB23:
 738              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 25


  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
ARM GAS  /tmp/ccDNc6CK.s 			page 26


  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 27


 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccDNc6CK.s 			page 28


 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccDNc6CK.s 			page 29


 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
ARM GAS  /tmp/ccDNc6CK.s 			page 30


 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccDNc6CK.s 			page 31


 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 739              		.loc 2 429 0
 740              		.syntax divided
 741              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 742 0006 BFF34F8F 		dsb 0xF
 743              	@ 0 "" 2
 744              		.thumb
 745              		.syntax unified
ARM GAS  /tmp/ccDNc6CK.s 			page 32


 746              	.LBE23:
 747              	.LBE22:
 748              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
ARM GAS  /tmp/ccDNc6CK.s 			page 33


  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
ARM GAS  /tmp/ccDNc6CK.s 			page 34


 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/ccDNc6CK.s 			page 35


 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
ARM GAS  /tmp/ccDNc6CK.s 			page 36


 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
ARM GAS  /tmp/ccDNc6CK.s 			page 37


 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
ARM GAS  /tmp/ccDNc6CK.s 			page 38


 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
ARM GAS  /tmp/ccDNc6CK.s 			page 39


 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
ARM GAS  /tmp/ccDNc6CK.s 			page 40


 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccDNc6CK.s 			page 41


 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
ARM GAS  /tmp/ccDNc6CK.s 			page 42


 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccDNc6CK.s 			page 43


 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccDNc6CK.s 			page 44


 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 749              		.loc 3 734 0
 750 000a 054B     		ldr	r3, .L27+8
 751 000c 054A     		ldr	r2, .L27+12
 752 000e DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccDNc6CK.s 			page 45


 753              	.LBB24:
 754              	.LBB25:
 755              		.loc 2 429 0
 756              		.syntax divided
 757              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 758 0010 BFF34F8F 		dsb 0xF
 759              	@ 0 "" 2
 760              		.thumb
 761              		.syntax unified
 762              	.L26:
 763              	.LBE25:
 764              	.LBE24:
 765              	.LBB26:
 766              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 767              		.loc 2 375 0
 768              		.syntax divided
 769              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 770 0014 C046     		nop
 771              	@ 0 "" 2
 772              		.thumb
 773              		.syntax unified
 774 0016 FDE7     		b	.L26
 775              	.L28:
 776              		.align	2
 777              	.L27:
 778 0018 F03F0020 		.word	536887280
 779 001c EFBEADDE 		.word	-559038737
 780 0020 00ED00E0 		.word	-536810240
 781 0024 0400FA05 		.word	100270084
 782              	.LBE27:
 783              	.LBE26:
 784              	.LBE21:
 785              	.LBE20:
 786              		.cfi_endproc
 787              	.LFE37:
 789              		.section	.text.startDMA,"ax",%progbits
 790              		.align	1
 791              		.global	startDMA
 792              		.syntax unified
 793              		.code	16
 794              		.thumb_func
 795              		.fpu softvfp
 797              	startDMA:
 798              	.LFB42:
 224:Src/main.c    **** 
 799              		.loc 1 224 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 0
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803 0000 70B5     		push	{r4, r5, r6, lr}
 804              	.LCFI13:
 805              		.cfi_def_cfa_offset 16
 806              		.cfi_offset 4, -16
 807              		.cfi_offset 5, -12
 808              		.cfi_offset 6, -8
 809              		.cfi_offset 14, -4
ARM GAS  /tmp/ccDNc6CK.s 			page 46


 227:Src/main.c    ****     return;
 810              		.loc 1 227 0
 811 0002 1B4B     		ldr	r3, .L31
 812 0004 586A     		ldr	r0, [r3, #36]
 813 0006 FFF7FEFF 		bl	HAL_DMA_GetState
 814              	.LVL45:
 815 000a 0228     		cmp	r0, #2
 816 000c 2FD0     		beq	.L29
 230:Src/main.c    ****     return;
 817              		.loc 1 230 0
 818 000e 184B     		ldr	r3, .L31
 819 0010 D86A     		ldr	r0, [r3, #44]
 820 0012 FFF7FEFF 		bl	HAL_DMA_GetState
 821              	.LVL46:
 822 0016 0228     		cmp	r0, #2
 823 0018 29D0     		beq	.L29
 233:Src/main.c    ****     return;
 824              		.loc 1 233 0
 825 001a 154B     		ldr	r3, .L31
 826 001c 186B     		ldr	r0, [r3, #48]
 827 001e FFF7FEFF 		bl	HAL_DMA_GetState
 828              	.LVL47:
 829 0022 0228     		cmp	r0, #2
 830 0024 23D0     		beq	.L29
 238:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC3], (uint32_t)my_data_buf, (uint32_t)&GPIOB->ODR, 8);
 831              		.loc 1 238 0
 832 0026 134D     		ldr	r5, .L31+4
 833 0028 114C     		ldr	r4, .L31
 834 002a 7023     		movs	r3, #112
 835 002c 124A     		ldr	r2, .L31+8
 836 002e 2900     		movs	r1, r5
 837 0030 606A     		ldr	r0, [r4, #36]
 838 0032 FFF7FEFF 		bl	HAL_DMA_Start_IT
 839              	.LVL48:
 239:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf, (uint32_t)&GPIOC->ODR, data_l
 840              		.loc 1 239 0
 841 0036 0823     		movs	r3, #8
 842 0038 104A     		ldr	r2, .L31+12
 843 003a 2900     		movs	r1, r5
 844 003c E06A     		ldr	r0, [r4, #44]
 845 003e FFF7FEFF 		bl	HAL_DMA_Start_IT
 846              	.LVL49:
 240:Src/main.c    **** 
 847              		.loc 1 240 0
 848 0042 7023     		movs	r3, #112
 849 0044 0E4A     		ldr	r2, .L31+16
 850 0046 2900     		movs	r1, r5
 851 0048 206B     		ldr	r0, [r4, #48]
 852 004a FFF7FEFF 		bl	HAL_DMA_Start_IT
 853              	.LVL50:
 242:Src/main.c    **** 
 854              		.loc 1 242 0
 855 004e 8023     		movs	r3, #128
 856 0050 DB05     		lsls	r3, r3, #23
 857 0052 0022     		movs	r2, #0
 858 0054 5A62     		str	r2, [r3, #36]
 244:Src/main.c    ****   }
ARM GAS  /tmp/ccDNc6CK.s 			page 47


 859              		.loc 1 244 0
 860 0056 0021     		movs	r1, #0
 861 0058 2000     		movs	r0, r4
 862 005a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 863              	.LVL51:
 246:Src/main.c    ****   }
 864              		.loc 1 246 0
 865 005e 0821     		movs	r1, #8
 866 0060 2000     		movs	r0, r4
 867 0062 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 868              	.LVL52:
 248:Src/main.c    ****   }
 869              		.loc 1 248 0
 870 0066 0C21     		movs	r1, #12
 871 0068 2000     		movs	r0, r4
 872 006a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 873              	.LVL53:
 874              	.L29:
 250:Src/main.c    **** 
 875              		.loc 1 250 0
 876              		@ sp needed
 877 006e 70BD     		pop	{r4, r5, r6, pc}
 878              	.L32:
 879              		.align	2
 880              	.L31:
 881 0070 00000000 		.word	htim2
 882 0074 00000000 		.word	my_data_buf
 883 0078 14000048 		.word	1207959572
 884 007c 14040048 		.word	1207960596
 885 0080 14080048 		.word	1207961620
 886              		.cfi_endproc
 887              	.LFE42:
 889              		.section	.text.SystemClock_Config,"ax",%progbits
 890              		.align	1
 891              		.global	SystemClock_Config
 892              		.syntax unified
 893              		.code	16
 894              		.thumb_func
 895              		.fpu softvfp
 897              	SystemClock_Config:
 898              	.LFB43:
 259:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 899              		.loc 1 259 0
 900              		.cfi_startproc
 901              		@ args = 0, pretend = 0, frame = 96
 902              		@ frame_needed = 0, uses_anonymous_args = 0
 903 0000 10B5     		push	{r4, lr}
 904              	.LCFI14:
 905              		.cfi_def_cfa_offset 8
 906              		.cfi_offset 4, -8
 907              		.cfi_offset 14, -4
 908 0002 98B0     		sub	sp, sp, #96
 909              	.LCFI15:
 910              		.cfi_def_cfa_offset 104
 260:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 911              		.loc 1 260 0
 912 0004 3022     		movs	r2, #48
ARM GAS  /tmp/ccDNc6CK.s 			page 48


 913 0006 0021     		movs	r1, #0
 914 0008 0CA8     		add	r0, sp, #48
 915 000a FFF7FEFF 		bl	memset
 916              	.LVL54:
 261:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 917              		.loc 1 261 0
 918 000e 1022     		movs	r2, #16
 919 0010 0021     		movs	r1, #0
 920 0012 07A8     		add	r0, sp, #28
 921 0014 FFF7FEFF 		bl	memset
 922              	.LVL55:
 262:Src/main.c    **** 
 923              		.loc 1 262 0
 924 0018 1C22     		movs	r2, #28
 925 001a 0021     		movs	r1, #0
 926 001c 6846     		mov	r0, sp
 927 001e FFF7FEFF 		bl	memset
 928              	.LVL56:
 266:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 929              		.loc 1 266 0
 930 0022 2223     		movs	r3, #34
 931 0024 0B93     		str	r3, [sp, #44]
 267:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 932              		.loc 1 267 0
 933 0026 213B     		subs	r3, r3, #33
 934 0028 0E93     		str	r3, [sp, #56]
 268:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 935              		.loc 1 268 0
 936 002a 1393     		str	r3, [sp, #76]
 269:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 937              		.loc 1 269 0
 938 002c 0F33     		adds	r3, r3, #15
 939 002e 0F93     		str	r3, [sp, #60]
 271:Src/main.c    ****   {
 940              		.loc 1 271 0
 941 0030 0BA8     		add	r0, sp, #44
 942 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 943              	.LVL57:
 277:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 944              		.loc 1 277 0
 945 0036 0723     		movs	r3, #7
 946 0038 0793     		str	r3, [sp, #28]
 279:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 947              		.loc 1 279 0
 948 003a 043B     		subs	r3, r3, #4
 949 003c 0893     		str	r3, [sp, #32]
 280:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 950              		.loc 1 280 0
 951 003e 0024     		movs	r4, #0
 952 0040 0994     		str	r4, [sp, #36]
 281:Src/main.c    **** 
 953              		.loc 1 281 0
 954 0042 0A94     		str	r4, [sp, #40]
 283:Src/main.c    ****   {
 955              		.loc 1 283 0
 956 0044 0121     		movs	r1, #1
 957 0046 07A8     		add	r0, sp, #28
ARM GAS  /tmp/ccDNc6CK.s 			page 49


 958 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 959              	.LVL58:
 287:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 960              		.loc 1 287 0
 961 004c 8023     		movs	r3, #128
 962 004e 9B02     		lsls	r3, r3, #10
 963 0050 0093     		str	r3, [sp]
 288:Src/main.c    **** 
 964              		.loc 1 288 0
 965 0052 0694     		str	r4, [sp, #24]
 290:Src/main.c    ****   {
 966              		.loc 1 290 0
 967 0054 6846     		mov	r0, sp
 968 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 969              	.LVL59:
 294:Src/main.c    **** 
 970              		.loc 1 294 0
 971 005a 18B0     		add	sp, sp, #96
 972              		@ sp needed
 973 005c 10BD     		pop	{r4, pc}
 974              		.cfi_endproc
 975              	.LFE43:
 977              		.section	.text.main,"ax",%progbits
 978              		.align	1
 979              		.global	main
 980              		.syntax unified
 981              		.code	16
 982              		.thumb_func
 983              		.fpu softvfp
 985              	main:
 986              	.LFB41:
 138:Src/main.c    ****   /* USER CODE BEGIN 1 */
 987              		.loc 1 138 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991 0000 10B5     		push	{r4, lr}
 992              	.LCFI16:
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 4, -8
 995              		.cfi_offset 14, -4
 146:Src/main.c    **** 
 996              		.loc 1 146 0
 997 0002 FFF7FEFF 		bl	HAL_Init
 998              	.LVL60:
 153:Src/main.c    **** 
 999              		.loc 1 153 0
 1000 0006 FFF7FEFF 		bl	SystemClock_Config
 1001              	.LVL61:
 160:Src/main.c    ****   MX_DMA_Init();
 1002              		.loc 1 160 0
 1003 000a FFF7FEFF 		bl	MX_GPIO_Init
 1004              	.LVL62:
 161:Src/main.c    ****   MX_TIM1_Init();
 1005              		.loc 1 161 0
 1006 000e FFF7FEFF 		bl	MX_DMA_Init
 1007              	.LVL63:
ARM GAS  /tmp/ccDNc6CK.s 			page 50


 162:Src/main.c    ****   MX_TIM2_Init();
 1008              		.loc 1 162 0
 1009 0012 FFF7FEFF 		bl	MX_TIM1_Init
 1010              	.LVL64:
 163:Src/main.c    ****   MX_USART3_UART_Init();
 1011              		.loc 1 163 0
 1012 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1013              	.LVL65:
 164:Src/main.c    ****   MX_USB_DEVICE_Init();
 1014              		.loc 1 164 0
 1015 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 1016              	.LVL66:
 165:Src/main.c    ****   //MX_TIM3_Init();
 1017              		.loc 1 165 0
 1018 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1019              	.LVL67:
 174:Src/main.c    ****     dfu_otter_bootloader();
 1020              		.loc 1 174 0
 1021 0022 8021     		movs	r1, #128
 1022 0024 4900     		lsls	r1, r1, #1
 1023 0026 3C48     		ldr	r0, .L39
 1024 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1025              	.LVL68:
 1026 002c 0028     		cmp	r0, #0
 1027 002e 01D0     		beq	.L35
 175:Src/main.c    ****   }
 1028              		.loc 1 175 0
 1029 0030 FFF7FEFF 		bl	dfu_otter_bootloader
 1030              	.LVL69:
 1031              	.L35:
 178:Src/main.c    **** 
 1032              		.loc 1 178 0
 1033 0034 8021     		movs	r1, #128
 1034 0036 0122     		movs	r2, #1
 1035 0038 8901     		lsls	r1, r1, #6
 1036 003a 3748     		ldr	r0, .L39
 1037 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1038              	.LVL70:
 180:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 1; i += 8) {
 1039              		.loc 1 180 0
 1040 0040 7022     		movs	r2, #112
 1041 0042 FF21     		movs	r1, #255
 1042 0044 3548     		ldr	r0, .L39+4
 1043 0046 FFF7FEFF 		bl	memset
 1044              	.LVL71:
 1045              	.LBB28:
 181:Src/main.c    ****     my_data_buf[i]      = 0xFF01;
 1046              		.loc 1 181 0
 1047 004a 0023     		movs	r3, #0
 1048 004c 21E0     		b	.L36
 1049              	.LVL72:
 1050              	.L37:
 182:Src/main.c    ****     my_data_buf[i + 1]  = 0xFF80;
 1051              		.loc 1 182 0 discriminator 3
 1052 004e 334A     		ldr	r2, .L39+4
 1053 0050 5800     		lsls	r0, r3, #1
 1054 0052 FF21     		movs	r1, #255
ARM GAS  /tmp/ccDNc6CK.s 			page 51


 1055 0054 4942     		rsbs	r1, r1, #0
 1056 0056 8152     		strh	r1, [r0, r2]
 183:Src/main.c    ****     my_data_buf[i + 2]  = 0xFF01;
 1057              		.loc 1 183 0 discriminator 3
 1058 0058 581C     		adds	r0, r3, #1
 1059 005a 4000     		lsls	r0, r0, #1
 1060 005c 8024     		movs	r4, #128
 1061 005e 6442     		rsbs	r4, r4, #0
 1062 0060 8452     		strh	r4, [r0, r2]
 184:Src/main.c    ****     my_data_buf[i + 3]  = 0xFF04;
 1063              		.loc 1 184 0 discriminator 3
 1064 0062 981C     		adds	r0, r3, #2
 1065 0064 4000     		lsls	r0, r0, #1
 1066 0066 8152     		strh	r1, [r0, r2]
 185:Src/main.c    ****     my_data_buf[i + 4]  = 0xFF01;
 1067              		.loc 1 185 0 discriminator 3
 1068 0068 D81C     		adds	r0, r3, #3
 1069 006a 4000     		lsls	r0, r0, #1
 1070 006c 7C3C     		subs	r4, r4, #124
 1071 006e 8452     		strh	r4, [r0, r2]
 186:Src/main.c    ****     my_data_buf[i + 5]  = 0xFF08;
 1072              		.loc 1 186 0 discriminator 3
 1073 0070 181D     		adds	r0, r3, #4
 1074 0072 4000     		lsls	r0, r0, #1
 1075 0074 8152     		strh	r1, [r0, r2]
 187:Src/main.c    ****     my_data_buf[i + 6]  = 0xFF01;
 1076              		.loc 1 187 0 discriminator 3
 1077 0076 581D     		adds	r0, r3, #5
 1078 0078 4000     		lsls	r0, r0, #1
 1079 007a 0434     		adds	r4, r4, #4
 1080 007c 8452     		strh	r4, [r0, r2]
 188:Src/main.c    ****     my_data_buf[i + 7]  = 0xFF40;
 1081              		.loc 1 188 0 discriminator 3
 1082 007e 981D     		adds	r0, r3, #6
 1083 0080 4000     		lsls	r0, r0, #1
 1084 0082 8152     		strh	r1, [r0, r2]
 189:Src/main.c    ****   }
 1085              		.loc 1 189 0 discriminator 3
 1086 0084 D91D     		adds	r1, r3, #7
 1087 0086 4900     		lsls	r1, r1, #1
 1088 0088 C020     		movs	r0, #192
 1089 008a 4042     		rsbs	r0, r0, #0
 1090 008c 8852     		strh	r0, [r1, r2]
 181:Src/main.c    ****     my_data_buf[i]      = 0xFF01;
 1091              		.loc 1 181 0 discriminator 3
 1092 008e 0833     		adds	r3, r3, #8
 1093              	.LVL73:
 1094 0090 9BB2     		uxth	r3, r3
 1095              	.LVL74:
 1096              	.L36:
 181:Src/main.c    ****     my_data_buf[i]      = 0xFF01;
 1097              		.loc 1 181 0 is_stmt 0 discriminator 1
 1098 0092 6E2B     		cmp	r3, #110
 1099 0094 DBD9     		bls	.L37
 1100              	.LBE28:
 192:Src/main.c    ****   my_data_buf_fire[0] = 0x0002;
 1101              		.loc 1 192 0 is_stmt 1
ARM GAS  /tmp/ccDNc6CK.s 			page 52


 1102 0096 0822     		movs	r2, #8
 1103 0098 0021     		movs	r1, #0
 1104 009a 2048     		ldr	r0, .L39+4
 1105 009c FFF7FEFF 		bl	memset
 1106              	.LVL75:
 193:Src/main.c    ****   my_data_buf_fire[1] = 0x0002;
 1107              		.loc 1 193 0
 1108 00a0 1F4B     		ldr	r3, .L39+8
 1109 00a2 0222     		movs	r2, #2
 1110 00a4 1A80     		strh	r2, [r3]
 194:Src/main.c    ****   my_data_buf_fire[2] = 0x0000;
 1111              		.loc 1 194 0
 1112 00a6 5A80     		strh	r2, [r3, #2]
 195:Src/main.c    ****   my_data_buf_fire[3] = 0x0000;
 1113              		.loc 1 195 0
 1114 00a8 0022     		movs	r2, #0
 1115 00aa 9A80     		strh	r2, [r3, #4]
 196:Src/main.c    ****   my_data_buf_fire[4] = 0x0001;
 1116              		.loc 1 196 0
 1117 00ac DA80     		strh	r2, [r3, #6]
 197:Src/main.c    ****   my_data_buf_fire[5] = 0x0001;
 1118              		.loc 1 197 0
 1119 00ae 0121     		movs	r1, #1
 1120 00b0 1981     		strh	r1, [r3, #8]
 198:Src/main.c    ****   my_data_buf_fire[6] = 0x0000;
 1121              		.loc 1 198 0
 1122 00b2 5981     		strh	r1, [r3, #10]
 199:Src/main.c    ****   my_data_buf_fire[7] = 0x0000;
 1123              		.loc 1 199 0
 1124 00b4 9A81     		strh	r2, [r3, #12]
 200:Src/main.c    **** 
 1125              		.loc 1 200 0
 1126 00b6 DA81     		strh	r2, [r3, #14]
 203:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1127              		.loc 1 203 0
 1128 00b8 1A4A     		ldr	r2, .L39+12
 1129 00ba 536A     		ldr	r3, [r2, #36]
 1130 00bc 1A49     		ldr	r1, .L39+16
 1131 00be 9962     		str	r1, [r3, #40]
 204:Src/main.c    **** 
 1132              		.loc 1 204 0
 1133 00c0 1368     		ldr	r3, [r2]
 1134 00c2 D868     		ldr	r0, [r3, #12]
 1135 00c4 8021     		movs	r1, #128
 1136 00c6 8900     		lsls	r1, r1, #2
 1137 00c8 0143     		orrs	r1, r0
 1138 00ca D960     		str	r1, [r3, #12]
 206:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC3);
 1139              		.loc 1 206 0
 1140 00cc D16A     		ldr	r1, [r2, #44]
 1141 00ce 1748     		ldr	r0, .L39+20
 1142 00d0 8862     		str	r0, [r1, #40]
 207:Src/main.c    **** 
 1143              		.loc 1 207 0
 1144 00d2 D868     		ldr	r0, [r3, #12]
 1145 00d4 8021     		movs	r1, #128
 1146 00d6 0901     		lsls	r1, r1, #4
ARM GAS  /tmp/ccDNc6CK.s 			page 53


 1147 00d8 0143     		orrs	r1, r0
 1148 00da D960     		str	r1, [r3, #12]
 209:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1149              		.loc 1 209 0
 1150 00dc 126B     		ldr	r2, [r2, #48]
 1151 00de 1449     		ldr	r1, .L39+24
 1152 00e0 9162     		str	r1, [r2, #40]
 210:Src/main.c    **** 
 1153              		.loc 1 210 0
 1154 00e2 D968     		ldr	r1, [r3, #12]
 1155 00e4 8022     		movs	r2, #128
 1156 00e6 5201     		lsls	r2, r2, #5
 1157 00e8 0A43     		orrs	r2, r1
 1158 00ea DA60     		str	r2, [r3, #12]
 212:Src/main.c    **** 
 1159              		.loc 1 212 0
 1160 00ec FFF7FEFF 		bl	startDMA
 1161              	.LVL76:
 1162              	.L38:
 216:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 1163              		.loc 1 216 0 discriminator 1
 1164 00f0 FA20     		movs	r0, #250
 1165 00f2 4000     		lsls	r0, r0, #1
 1166 00f4 FFF7FEFF 		bl	HAL_Delay
 1167              	.LVL77:
 217:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
 1168              		.loc 1 217 0 discriminator 1
 1169 00f8 8021     		movs	r1, #128
 1170 00fa 074C     		ldr	r4, .L39
 1171 00fc 0122     		movs	r2, #1
 1172 00fe 4901     		lsls	r1, r1, #5
 1173 0100 2000     		movs	r0, r4
 1174 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1175              	.LVL78:
 218:Src/main.c    ****     //HAL_GPIO_TogglePin(GPIOB,  F3_Pin);
 1176              		.loc 1 218 0 discriminator 1
 1177 0106 8021     		movs	r1, #128
 1178 0108 0122     		movs	r2, #1
 1179 010a 8901     		lsls	r1, r1, #6
 1180 010c 2000     		movs	r0, r4
 1181 010e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1182              	.LVL79:
 221:Src/main.c    ****   }
 1183              		.loc 1 221 0 discriminator 1
 1184 0112 FFF7FEFF 		bl	startDMA
 1185              	.LVL80:
 1186 0116 EBE7     		b	.L38
 1187              	.L40:
 1188              		.align	2
 1189              	.L39:
 1190 0118 00040048 		.word	1207960576
 1191 011c 00000000 		.word	my_data_buf
 1192 0120 00000000 		.word	my_data_buf_fire
 1193 0124 00000000 		.word	htim2
 1194 0128 00000000 		.word	dataTransmittedHandler0
 1195 012c 00000000 		.word	dataTransmittedHandler1
 1196 0130 00000000 		.word	dataTransmittedHandler2
ARM GAS  /tmp/ccDNc6CK.s 			page 54


 1197              		.cfi_endproc
 1198              	.LFE41:
 1200              		.section	.text.Error_Handler,"ax",%progbits
 1201              		.align	1
 1202              		.global	Error_Handler
 1203              		.syntax unified
 1204              		.code	16
 1205              		.thumb_func
 1206              		.fpu softvfp
 1208              	Error_Handler:
 1209              	.LFB49:
 536:Src/main.c    **** 
 537:Src/main.c    **** /* USER CODE BEGIN 4 */
 538:Src/main.c    **** 
 539:Src/main.c    **** /* USER CODE END 4 */
 540:Src/main.c    **** 
 541:Src/main.c    **** /**
 542:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 543:Src/main.c    ****   * @retval None
 544:Src/main.c    ****   */
 545:Src/main.c    **** void Error_Handler(void)
 546:Src/main.c    **** {
 1210              		.loc 1 546 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              		@ link register save eliminated.
 547:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 548:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 549:Src/main.c    **** 
 550:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 551:Src/main.c    **** }
 1215              		.loc 1 551 0
 1216              		@ sp needed
 1217 0000 7047     		bx	lr
 1218              		.cfi_endproc
 1219              	.LFE49:
 1221              		.comm	my_data_buf_fire,16,4
 1222              		.comm	my_data_buf,224,4
 1223              		.global	PER
 1224              		.comm	hdma_tim2_uev,68,4
 1225              		.comm	hdma_usart3_tx,68,4
 1226              		.comm	hdma_usart3_rx,68,4
 1227              		.comm	huart3,112,4
 1228              		.comm	hdma_tim2_ch3,68,4
 1229              		.comm	hdma_tim2_ch4,68,4
 1230              		.comm	hdma_tim2_ch1,68,4
 1231              		.comm	htim3,64,4
 1232              		.comm	htim2,64,4
 1233              		.comm	htim1,64,4
 1234              		.section	.data.PER,"aw",%progbits
 1235              		.align	1
 1236              		.set	.LANCHOR0,. + 0
 1239              	PER:
 1240 0000 2C01     		.short	300
 1241              		.text
 1242              	.Letext0:
ARM GAS  /tmp/ccDNc6CK.s 			page 55


 1243              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1244              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1245              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 1246              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 1247              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1248              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1249              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1250              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 1251              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1252              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1253              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 1254              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1255              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 1256              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 1257              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 1258              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 1259              		.file 20 "/usr/arm-none-eabi/include/stdlib.h"
 1260              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 1261              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1262              		.file 23 "Inc/usb_device.h"
 1263              		.file 24 "/usr/arm-none-eabi/include/string.h"
 1264              		.file 25 "<built-in>"
ARM GAS  /tmp/ccDNc6CK.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccDNc6CK.s:16     .text.dataTransmittedHandler0:0000000000000000 $t
     /tmp/ccDNc6CK.s:23     .text.dataTransmittedHandler0:0000000000000000 dataTransmittedHandler0
     /tmp/ccDNc6CK.s:55     .text.dataTransmittedHandler0:0000000000000018 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccDNc6CK.s:61     .text.dataTransmittedHandler1:0000000000000000 $t
     /tmp/ccDNc6CK.s:68     .text.dataTransmittedHandler1:0000000000000000 dataTransmittedHandler1
     /tmp/ccDNc6CK.s:99     .text.dataTransmittedHandler1:0000000000000018 $d
     /tmp/ccDNc6CK.s:105    .text.dataTransmittedHandler2:0000000000000000 $t
     /tmp/ccDNc6CK.s:112    .text.dataTransmittedHandler2:0000000000000000 dataTransmittedHandler2
     /tmp/ccDNc6CK.s:136    .text.dataTransmittedHandler2:000000000000000c $d
     /tmp/ccDNc6CK.s:141    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccDNc6CK.s:147    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccDNc6CK.s:319    .text.MX_GPIO_Init:00000000000000e0 $d
     /tmp/ccDNc6CK.s:329    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccDNc6CK.s:335    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccDNc6CK.s:387    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccDNc6CK.s:392    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccDNc6CK.s:398    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccDNc6CK.s:470    .text.MX_TIM1_Init:000000000000004c $d
                            *COM*:0000000000000040 htim1
     /tmp/ccDNc6CK.s:477    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccDNc6CK.s:483    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccDNc6CK.s:651    .text.MX_TIM2_Init:00000000000000e0 $d
     /tmp/ccDNc6CK.s:657    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccDNc6CK.s:663    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccDNc6CK.s:709    .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart3
     /tmp/ccDNc6CK.s:715    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/ccDNc6CK.s:722    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/ccDNc6CK.s:778    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/ccDNc6CK.s:790    .text.startDMA:0000000000000000 $t
     /tmp/ccDNc6CK.s:797    .text.startDMA:0000000000000000 startDMA
     /tmp/ccDNc6CK.s:881    .text.startDMA:0000000000000070 $d
                            *COM*:00000000000000e0 my_data_buf
     /tmp/ccDNc6CK.s:890    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccDNc6CK.s:897    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccDNc6CK.s:978    .text.main:0000000000000000 $t
     /tmp/ccDNc6CK.s:985    .text.main:0000000000000000 main
     /tmp/ccDNc6CK.s:1190   .text.main:0000000000000118 $d
                            *COM*:0000000000000010 my_data_buf_fire
     /tmp/ccDNc6CK.s:1201   .text.Error_Handler:0000000000000000 $t
     /tmp/ccDNc6CK.s:1208   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccDNc6CK.s:1239   .data.PER:0000000000000000 PER
                            *COM*:0000000000000044 hdma_tim2_uev
                            *COM*:0000000000000044 hdma_usart3_tx
                            *COM*:0000000000000044 hdma_usart3_rx
                            *COM*:0000000000000044 hdma_tim2_ch3
                            *COM*:0000000000000044 hdma_tim2_ch4
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000040 htim3
     /tmp/ccDNc6CK.s:1235   .data.PER:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_TIM_PWM_Stop
ARM GAS  /tmp/ccDNc6CK.s 			page 57


memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_uidiv
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_UART_Init
HAL_DMA_GetState
HAL_DMA_Start_IT
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
HAL_GPIO_ReadPin
HAL_Delay
