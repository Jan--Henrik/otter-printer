ARM GAS  /tmp/ccnUMBHt.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.dataTransmittedHandler0,"ax",%progbits
  16              		.align	1
  17              		.global	dataTransmittedHandler0
  18              		.arch armv6s-m
  19              		.syntax unified
  20              		.code	16
  21              		.thumb_func
  22              		.fpu softvfp
  24              	dataTransmittedHandler0:
  25              	.LVL0:
  26              	.LFB38:
  27              		.file 1 "Src/main.c"
   1:Src/main.c    **** #include "main.h"
   2:Src/main.c    **** #include "usb_device.h"
   3:Src/main.c    **** 
   4:Src/main.c    **** TIM_HandleTypeDef htim1;
   5:Src/main.c    **** TIM_HandleTypeDef htim2;
   6:Src/main.c    **** TIM_HandleTypeDef htim3;
   7:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch1;
   8:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch4;
   9:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_ch3;
  10:Src/main.c    **** 
  11:Src/main.c    **** UART_HandleTypeDef huart3;
  12:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_rx;
  13:Src/main.c    **** DMA_HandleTypeDef hdma_usart3_tx;
  14:Src/main.c    **** DMA_HandleTypeDef hdma_tim2_uev;
  15:Src/main.c    **** 
  16:Src/main.c    **** void SystemClock_Config(void);
  17:Src/main.c    **** static void MX_GPIO_Init(void);
  18:Src/main.c    **** static void MX_DMA_Init(void);
  19:Src/main.c    **** static void MX_TIM1_Init(void);
  20:Src/main.c    **** static void MX_TIM2_Init(void);
  21:Src/main.c    **** static void MX_USART3_UART_Init(void);
  22:Src/main.c    **** void transmit_error_handler(DMA_HandleTypeDef * hdma);
  23:Src/main.c    **** void data_tramsmitted_handler(DMA_HandleTypeDef * hdma);
  24:Src/main.c    **** void dma_init();
  25:Src/main.c    **** void startDMA(void);
  26:Src/main.c    **** void setRow(uint8_t c);
  27:Src/main.c    **** void printcart_fire_nozzle_black(uint16_t *l, int p, int row);
  28:Src/main.c    **** void clearWav(uint16_t *d, uint16_t len);
  29:Src/main.c    **** 
  30:Src/main.c    **** void dfu_otter_bootloader(void)
  31:Src/main.c    **** {
ARM GAS  /tmp/ccnUMBHt.s 			page 2


  32:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
  33:Src/main.c    ****   NVIC_SystemReset();
  34:Src/main.c    **** }
  35:Src/main.c    **** 
  36:Src/main.c    **** uint16_t PER = 60; // NEVER SET TO A HIGHER VALUE!
  37:Src/main.c    **** 
  38:Src/main.c    **** enum color_t { CYAN, MAGENTA, YELLOW };
  39:Src/main.c    **** 
  40:Src/main.c    **** #define data_len ((14*8*2)+16)
  41:Src/main.c    **** uint16_t my_data_buf[data_len];
  42:Src/main.c    **** 
  43:Src/main.c    **** volatile uint8_t lock = 0;
  44:Src/main.c    **** 
  45:Src/main.c    **** void dataTransmittedHandler0(DMA_HandleTypeDef *hdma) {
  28              		.loc 1 45 55 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 45 55 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  46:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 0);
  38              		.loc 1 46 3 is_stmt 1 view .LVU2
  39 0002 0022     		movs	r2, #0
  40 0004 0121     		movs	r1, #1
  41 0006 0448     		ldr	r0, .L2
  42              	.LVL1:
  43              		.loc 1 46 3 is_stmt 0 view .LVU3
  44 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
  45              	.LVL2:
  47:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
  46              		.loc 1 47 3 is_stmt 1 view .LVU4
  47 000c 0021     		movs	r1, #0
  48 000e 0348     		ldr	r0, .L2+4
  49 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  50              	.LVL3:
  48:Src/main.c    **** }
  51              		.loc 1 48 1 is_stmt 0 view .LVU5
  52              		@ sp needed
  53 0014 10BD     		pop	{r4, pc}
  54              	.L3:
  55 0016 C046     		.align	2
  56              	.L2:
  57 0018 00040048 		.word	1207960576
  58 001c 00000000 		.word	htim2
  59              		.cfi_endproc
  60              	.LFE38:
  62              		.section	.text.dataTransmittedHandler2,"ax",%progbits
  63              		.align	1
  64              		.global	dataTransmittedHandler2
  65              		.syntax unified
  66              		.code	16
  67              		.thumb_func
  68              		.fpu softvfp
ARM GAS  /tmp/ccnUMBHt.s 			page 3


  70              	dataTransmittedHandler2:
  71              	.LVL4:
  72              	.LFB39:
  49:Src/main.c    **** 
  50:Src/main.c    **** void dataTransmittedHandler2(DMA_HandleTypeDef *hdma) {
  73              		.loc 1 50 55 is_stmt 1 view -0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		.loc 1 50 55 is_stmt 0 view .LVU7
  78 0000 10B5     		push	{r4, lr}
  79              	.LCFI1:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 4, -8
  82              		.cfi_offset 14, -4
  51:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 0);
  83              		.loc 1 51 3 is_stmt 1 view .LVU8
  84 0002 0022     		movs	r2, #0
  85 0004 0221     		movs	r1, #2
  86 0006 0B48     		ldr	r0, .L5
  87              	.LVL5:
  88              		.loc 1 51 3 is_stmt 0 view .LVU9
  89 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
  90              	.LVL6:
  52:Src/main.c    ****   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
  91              		.loc 1 52 3 is_stmt 1 view .LVU10
  92 000c 0C21     		movs	r1, #12
  93 000e 0A48     		ldr	r0, .L5+4
  94 0010 FFF7FEFF 		bl	HAL_TIM_PWM_Stop
  95              	.LVL7:
  53:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, F5_Pin, 0);
  96              		.loc 1 53 3 view .LVU11
  97 0014 094C     		ldr	r4, .L5+8
  98 0016 0022     		movs	r2, #0
  99 0018 4021     		movs	r1, #64
 100 001a 2000     		movs	r0, r4
 101 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 102              	.LVL8:
  54:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, F3_Pin, 0);
 103              		.loc 1 54 3 view .LVU12
 104 0020 0022     		movs	r2, #0
 105 0022 8021     		movs	r1, #128
 106 0024 2000     		movs	r0, r4
 107 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL9:
  55:Src/main.c    ****   lock = 0;
 109              		.loc 1 55 3 view .LVU13
 110              		.loc 1 55 8 is_stmt 0 view .LVU14
 111 002a 054B     		ldr	r3, .L5+12
 112 002c 0022     		movs	r2, #0
 113 002e 1A70     		strb	r2, [r3]
  56:Src/main.c    **** }
 114              		.loc 1 56 1 view .LVU15
 115              		@ sp needed
 116 0030 10BD     		pop	{r4, pc}
 117              	.L6:
 118 0032 C046     		.align	2
ARM GAS  /tmp/ccnUMBHt.s 			page 4


 119              	.L5:
 120 0034 00040048 		.word	1207960576
 121 0038 00000000 		.word	htim2
 122 003c 00080048 		.word	1207961600
 123 0040 00000000 		.word	.LANCHOR0
 124              		.cfi_endproc
 125              	.LFE39:
 127              		.section	.text.MX_GPIO_Init,"ax",%progbits
 128              		.align	1
 129              		.syntax unified
 130              		.code	16
 131              		.thumb_func
 132              		.fpu softvfp
 134              	MX_GPIO_Init:
 135              	.LFB51:
  57:Src/main.c    **** 
  58:Src/main.c    **** int main(void)
  59:Src/main.c    **** {
  60:Src/main.c    **** 
  61:Src/main.c    ****   HAL_Init();
  62:Src/main.c    **** 
  63:Src/main.c    ****   SystemClock_Config();
  64:Src/main.c    **** 
  65:Src/main.c    ****   MX_GPIO_Init();
  66:Src/main.c    ****   MX_DMA_Init();
  67:Src/main.c    ****   MX_TIM1_Init();
  68:Src/main.c    ****   MX_TIM2_Init();
  69:Src/main.c    ****   MX_USART3_UART_Init();
  70:Src/main.c    ****   MX_USB_DEVICE_Init();
  71:Src/main.c    **** 
  72:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
  73:Src/main.c    ****     dfu_otter_bootloader();
  74:Src/main.c    ****   }
  75:Src/main.c    **** 
  76:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
  77:Src/main.c    **** 
  78:Src/main.c    **** 
  79:Src/main.c    **** 
  80:Src/main.c    ****   /*
  81:Src/main.c    ****   my_data_buf[i + 0]  = 0b1110010000000001;
  82:Src/main.c    ****   my_data_buf[i + 1]  = 0b0000010000000001;
  83:Src/main.c    ****   my_data_buf[i + 2]  = 0b1110000000100000; // Start
  84:Src/main.c    ****   my_data_buf[i + 3]  = 0b0000010000100000;
  85:Src/main.c    ****   my_data_buf[i + 4]  = 0b1110000000000001;
  86:Src/main.c    ****   my_data_buf[i + 5]  = 0b0000000000000001;
  87:Src/main.c    ****   my_data_buf[i + 6]  = 0b1110000000001000;
  88:Src/main.c    ****   my_data_buf[i + 7]  = 0b0000000000001000;
  89:Src/main.c    ****   my_data_buf[i + 8]  = 0b1110000000000001;
  90:Src/main.c    ****   my_data_buf[i + 9]  = 0b0000000000000001; // End
  91:Src/main.c    ****   my_data_buf[i + 10] = 0b1110000000000010;
  92:Src/main.c    ****   my_data_buf[i + 11] = 0b0000000000000010;
  93:Src/main.c    ****   my_data_buf[i + 12] = 0b1110000000000001;
  94:Src/main.c    ****   my_data_buf[i + 13] = 0b0000000010000001;
  95:Src/main.c    ****   my_data_buf[i + 14] = 0b1110000010010000;
  96:Src/main.c    ****   my_data_buf[i + 15] = 0b0000000010011000;
  97:Src/main.c    **** 
  98:Src/main.c    ****   my_data_buf[i + 0]  = 0b0000010000000000;
ARM GAS  /tmp/ccnUMBHt.s 			page 5


  99:Src/main.c    ****   my_data_buf[i + 1]  = 0b1110010000000001;
 100:Src/main.c    ****   my_data_buf[i + 2]  = 0b0000000000100000; // Start
 101:Src/main.c    ****   my_data_buf[i + 3]  = 0b1110010000000001;
 102:Src/main.c    ****   my_data_buf[i + 4]  = 0b0000000000001000;
 103:Src/main.c    ****   my_data_buf[i + 5]  = 0b1110000000000001;
 104:Src/main.c    ****   my_data_buf[i + 6]  = 0b0000000010000010;
 105:Src/main.c    ****   my_data_buf[i + 7]  = 0b1110000010000001;
 106:Src/main.c    ****   my_data_buf[i + 8]  = 0b0000000010010000;
 107:Src/main.c    ****   my_data_buf[i + 9]  = 0b1110000000000100; // End
 108:Src/main.c    ****   my_data_buf[i + 10] = 0b0000000001000000;
 109:Src/main.c    ****   my_data_buf[i + 11] = 0b0000000001000000;
 110:Src/main.c    ****   my_data_buf[i + 12] = 0b0000000001000000;
 111:Src/main.c    ****   my_data_buf[i + 13] = 0b0000000000000000;
 112:Src/main.c    ****   my_data_buf[i + 14] = 0b0000000000000000;
 113:Src/main.c    ****   my_data_buf[i + 15] = 0b0000000000000000;
 114:Src/main.c    **** 
 115:Src/main.c    **** 
 116:Src/main.c    ****   my_data_buf[i + 0]  = 0b0000010000000000;
 117:Src/main.c    ****   my_data_buf[i + 1]  = 0b1110000000100001;
 118:Src/main.c    ****   my_data_buf[i + 2]  = 0b0000000000100000;
 119:Src/main.c    ****   my_data_buf[i + 3]  = 0b0000000000001001;
 120:Src/main.c    ****   my_data_buf[i + 4]  = 0b0000010000001000;
 121:Src/main.c    ****   my_data_buf[i + 5]  = 0b0000000000000011;
 122:Src/main.c    ****   my_data_buf[i + 6]  = 0b0000000010000010;
 123:Src/main.c    ****   my_data_buf[i + 7]  = 0b0000000010010001;
 124:Src/main.c    ****   my_data_buf[i + 8]  = 0b1110000010010000;
 125:Src/main.c    ****   my_data_buf[i + 9]  = 0b0000000000000100;
 126:Src/main.c    ****   my_data_buf[i + 10] = 0b0000000001000100;
 127:Src/main.c    ****   my_data_buf[i + 11] = 0b0000000001000000;
 128:Src/main.c    ****   my_data_buf[i + 12] = 0b0000000001000000;
 129:Src/main.c    ****   my_data_buf[i + 13] = 0b0000000000000000;
 130:Src/main.c    ****   my_data_buf[i + 14] = 0b0000000000000000;
 131:Src/main.c    **** my_data_buf[i + 15] = 0b0000000000000000;
 132:Src/main.c    ****   TUT
 133:Src/main.c    ****   my_data_buf[i + 0]  = 0b0000010000000000;
 134:Src/main.c    ****   my_data_buf[i + 1]  = 0b0110000000100001;
 135:Src/main.c    ****   my_data_buf[i + 2]  = 0b1010010000100000;
 136:Src/main.c    ****   my_data_buf[i + 3]  = 0b0110000000001001;
 137:Src/main.c    ****   my_data_buf[i + 4]  = 0b1100000000001000;
 138:Src/main.c    ****   my_data_buf[i + 5]  = 0b1010000000000011;
 139:Src/main.c    ****   my_data_buf[i + 6]  = 0b0110000010000010;
 140:Src/main.c    ****   my_data_buf[i + 7]  = 0b0000000010010001;
 141:Src/main.c    ****   my_data_buf[i + 8]  = 0b1110000010010000;
 142:Src/main.c    ****   my_data_buf[i + 9]  = 0b0000000000000100;
 143:Src/main.c    ****   my_data_buf[i + 10] = 0b0000000001000100;
 144:Src/main.c    ****   my_data_buf[i + 11] = 0b0000000001000000;
 145:Src/main.c    ****   my_data_buf[i + 12] = 0b0000000001000000;
 146:Src/main.c    ****   my_data_buf[i + 13] = 0b0000000000000000;
 147:Src/main.c    ****   my_data_buf[i + 14] = 0b0000000000000000;
 148:Src/main.c    ****   my_data_buf[i + 15] = 0b0000000000000000;
 149:Src/main.c    ****   */
 150:Src/main.c    **** 
 151:Src/main.c    ****   clearWav(my_data_buf,data_len);
 152:Src/main.c    **** 
 153:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dataTransmittedHandler0;
 154:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 155:Src/main.c    **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 6


 156:Src/main.c    ****   htim2.hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dataTransmittedHandler2;
 157:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 158:Src/main.c    **** 
 159:Src/main.c    ****   uint8_t color = 0;
 160:Src/main.c    ****   while (1)
 161:Src/main.c    ****   {
 162:Src/main.c    ****     HAL_GPIO_WritePin(GPIOB, LED_POWER_Pin, 1);
 163:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 164:Src/main.c    ****       //for (int row=0; row<2; row++) {
 165:Src/main.c    ****         for (int y=0; y<168; y++) {
 166:Src/main.c    ****         clearWav(my_data_buf,data_len);
 167:Src/main.c    **** 
 168:Src/main.c    ****         //printcart_fire_nozzle_black(my_data_buf, y, 0);
 169:Src/main.c    ****         printcart_fire_nozzle_color(my_data_buf,y,CYAN);
 170:Src/main.c    **** 
 171:Src/main.c    ****         HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin, 1);
 172:Src/main.c    ****         lock = 1;
 173:Src/main.c    ****         startDMA();
 174:Src/main.c    ****         //HAL_Delay(10);
 175:Src/main.c    ****         while(lock){
 176:Src/main.c    ****           HAL_Delay(1);
 177:Src/main.c    ****           }
 178:Src/main.c    ****         }
 179:Src/main.c    ****       //}
 180:Src/main.c    ****     }
 181:Src/main.c    ****   }
 182:Src/main.c    **** }
 183:Src/main.c    **** 
 184:Src/main.c    **** // stolen from @Sprite_TM
 185:Src/main.c    **** void printcart_fire_nozzle_color(uint8_t *wav, int p, uint8_t _color) {
 186:Src/main.c    **** 	//Byte order for the three colors. Note that these arrays are
 187:Src/main.c    **** 	//just shifted versions of eachother.
 188:Src/main.c    **** 	int bo[3][14]={
 189:Src/main.c    **** 		{8,13,4,9,0,5,10,1,6,11,2,7,12,3},
 190:Src/main.c    **** 		{11,2,7,12,3,8,13,4,9,0,5,10,1,6},
 191:Src/main.c    **** 		{0,5,10,1,6,11,2,7,12,3,8,13,4,9}
 192:Src/main.c    **** 	};
 193:Src/main.c    **** 	if (p>(16*14) || p<0) return;
 194:Src/main.c    **** 	int byteno=bo[_color][p%14];
 195:Src/main.c    **** 	int bitno=p/14;
 196:Src/main.c    **** 	wav[(byteno*16)+(bitno + 1 )]&=~(1<<(_color+13));
 197:Src/main.c    **** }
 198:Src/main.c    **** 
 199:Src/main.c    **** // stolen from @Sprite_TM
 200:Src/main.c    **** 
 201:Src/main.c    **** typedef struct {
 202:Src/main.c    **** 	int c;
 203:Src/main.c    **** 	int bit;
 204:Src/main.c    **** 	int order;
 205:Src/main.c    **** } bw_nozinfo_t;
 206:Src/main.c    **** 
 207:Src/main.c    **** const bw_nozinfo_t ni[]={
 208:Src/main.c    **** 	{2,0,1}, {2,1,1}, {1,0,1}, {1,1,1},
 209:Src/main.c    **** 	{0,0,1}, {0,1,1}, {2,4,1}, {2,5,1},
 210:Src/main.c    **** 	{1,4,1}, {1,5,1}, {0,4,1}, {0,5,1},
 211:Src/main.c    **** 	{2,2,0}, {2,3,0}, {1,2,0}, {1,3,0},
 212:Src/main.c    **** 	{0,2,0}, {0,3,0}, {2,6,0}, {2,7,0},
ARM GAS  /tmp/ccnUMBHt.s 			page 7


 213:Src/main.c    **** 	{1,6,0}, {1,7,0}, {0,6,0}, {0,7,0},
 214:Src/main.c    **** };
 215:Src/main.c    **** 
 216:Src/main.c    **** //In a set of bits representing the bits being shifted out to the cartridge, this function sets
 217:Src/main.c    **** //the enable bit for the p'th nozzle from the top of the inkjet nozzles. The black cartridge has tw
 218:Src/main.c    **** //the 2nd one is slightly offset in the X direction and interleaved with the 1st (offset by half
 219:Src/main.c    **** //a nozzle).
 220:Src/main.c    **** //Note that the 2 first and last nozzles of each 168-nozzle row are not connected (giving a total
 221:Src/main.c    **** //of 324 nozzles in the combined two rows).
 222:Src/main.c    **** void printcart_fire_nozzle_black(uint16_t *l, int p, int row) {
 223:Src/main.c    **** 	if (row) p+=168;
 224:Src/main.c    **** 	int j=p/14;
 225:Src/main.c    **** 	int k=13-(p%14);
 226:Src/main.c    **** 
 227:Src/main.c    **** 	const int bo[2][14]={
 228:Src/main.c    **** 		{4,12,10,2,8,0,6,13,7,1,9,3,11,5},
 229:Src/main.c    **** 		{13,7,1,9,3,11,5,4,12,10,2,8,0,6},
 230:Src/main.c    **** 	};
 231:Src/main.c    **** 
 232:Src/main.c    **** 	l[(bo[ni[j].order][k]*16) + 1 + ni[j].bit] &= ~(1UL <<(ni[j].c + 13));
 233:Src/main.c    **** }
 234:Src/main.c    **** 
 235:Src/main.c    **** void setRow(uint8_t c){
 236:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 9; i += 16) {
 237:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 238:Src/main.c    ****       my_data_buf[i+j+1] |= 0b1110000000000000;
 239:Src/main.c    ****       my_data_buf[i+j+1] &= ~(1UL << (c+12));
 240:Src/main.c    ****     }
 241:Src/main.c    ****   }
 242:Src/main.c    **** }
 243:Src/main.c    **** 
 244:Src/main.c    **** 
 245:Src/main.c    **** void clearWav(uint16_t *d, uint16_t len){
 246:Src/main.c    ****   //memset(my_data_buf, 0xFFFF, data_len*2);
 247:Src/main.c    ****   for (uint16_t i = 0; i < len; i += 16) {
 248:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 249:Src/main.c    ****     d[i + 1]  = 0b1110010000000001;
 250:Src/main.c    ****     d[i + 2]  = 0b1110010000100000; // Start
 251:Src/main.c    ****     d[i + 3]  = 0b1110010000000001;
 252:Src/main.c    ****     d[i + 4]  = 0b1110000000001000;
 253:Src/main.c    ****     d[i + 5]  = 0b1110000000000001;
 254:Src/main.c    ****     d[i + 6]  = 0b1110000000000010;
 255:Src/main.c    ****     d[i + 7]  = 0b1110000010000001;
 256:Src/main.c    ****     d[i + 8]  = 0b1110000010010000;
 257:Src/main.c    ****     d[i + 9]  = 0b1110000010000100; // End
 258:Src/main.c    ****     d[i + 10] = 0b1110000000000000;
 259:Src/main.c    ****     d[i + 11] = 0b1110000001000000;
 260:Src/main.c    ****     d[i + 12] = 0b1110000001000000;
 261:Src/main.c    ****     d[i + 13] = 0b1110000001000000;
 262:Src/main.c    ****     d[i + 14] = 0b1110000000000000;
 263:Src/main.c    ****     d[i + 15] = 0b1110000000000000;
 264:Src/main.c    ****   }
 265:Src/main.c    ****   d[len - 16 + 0]  = 0b1110010000000000;//02
 266:Src/main.c    ****   d[len - 16 + 1]  = 0b1110010000000000;
 267:Src/main.c    ****   d[len - 16 + 2]  = 0b1110010000000000;
 268:Src/main.c    ****   d[len - 16 + 3]  = 0b1110000000000000;
 269:Src/main.c    ****   d[len - 16 + 4]  = 0b1110010000000000;//01
ARM GAS  /tmp/ccnUMBHt.s 			page 8


 270:Src/main.c    ****   d[len - 16 + 5]  = 0b1110010000000000;
 271:Src/main.c    ****   d[len - 16 + 6]  = 0b1110010000000000;
 272:Src/main.c    ****   d[len - 16 + 7]  = 0b1110000000000000;
 273:Src/main.c    ****   d[len - 16 + 8]  = 0b1110010000000000;//02
 274:Src/main.c    ****   d[len - 16 + 9]  = 0b1110010000000000;
 275:Src/main.c    ****   d[len - 16 + 10] = 0b1110010000000000;
 276:Src/main.c    ****   d[len - 16 + 11] = 0b1110000000000000;
 277:Src/main.c    ****   d[len - 16 + 12] = 0b1110000000000000;//01
 278:Src/main.c    ****   d[len - 16 + 13] = 0b1110010000000000;
 279:Src/main.c    ****   d[len - 16 + 14] = 0b1110010000000000;
 280:Src/main.c    ****   d[len - 16 + 15] = 0b1110010000000000;
 281:Src/main.c    **** }
 282:Src/main.c    **** 
 283:Src/main.c    **** void startDMA(void) {
 284:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC1]) == HAL_DMA_STATE_BUSY) {
 285:Src/main.c    ****     return;
 286:Src/main.c    ****   }
 287:Src/main.c    **** 
 288:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC4]) == HAL_DMA_STATE_BUSY) {
 289:Src/main.c    ****     return;
 290:Src/main.c    ****   }
 291:Src/main.c    **** 
 292:Src/main.c    ****   TIM2->CR1 &= (TIM_CR1_CEN | 0);
 293:Src/main.c    **** 
 294:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC1], (uint32_t)my_data_buf,       (uint32_t)&GPIOA->ODR, 
 295:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf,       (uint32_t)&GPIOC->ODR, 
 296:Src/main.c    **** 
 297:Src/main.c    ****   TIM2->CNT = 0u;
 298:Src/main.c    **** 
 299:Src/main.c    ****   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 300:Src/main.c    **** 
 301:Src/main.c    ****   TIM2->CR1 &= (TIM_CR1_CEN | 1);
 302:Src/main.c    **** }
 303:Src/main.c    **** 
 304:Src/main.c    **** void SystemClock_Config(void)
 305:Src/main.c    **** {
 306:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 307:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 308:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 309:Src/main.c    **** 
 310:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI48;
 311:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 312:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 313:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 314:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 315:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 316:Src/main.c    **** 
 317:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 318:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 319:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 320:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 321:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 322:Src/main.c    **** 
 323:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 324:Src/main.c    **** 
 325:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 326:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
ARM GAS  /tmp/ccnUMBHt.s 			page 9


 327:Src/main.c    **** 
 328:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 329:Src/main.c    **** 
 330:Src/main.c    **** }
 331:Src/main.c    **** 
 332:Src/main.c    **** static void MX_TIM1_Init(void)
 333:Src/main.c    **** {
 334:Src/main.c    **** 
 335:Src/main.c    ****   TIM_Encoder_InitTypeDef sConfig = {0};
 336:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 337:Src/main.c    **** 
 338:Src/main.c    ****   htim1.Instance = TIM1;
 339:Src/main.c    ****   htim1.Init.Prescaler = 0;
 340:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 341:Src/main.c    ****   htim1.Init.Period = 0;
 342:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 343:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 344:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 345:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 346:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 347:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 348:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 349:Src/main.c    ****   sConfig.IC1Filter = 0;
 350:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 351:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 352:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 353:Src/main.c    ****   sConfig.IC2Filter = 0;
 354:Src/main.c    ****   HAL_TIM_Encoder_Init(&htim1, &sConfig);
 355:Src/main.c    **** 
 356:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 357:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 358:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 359:Src/main.c    **** 
 360:Src/main.c    **** 
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** static void MX_TIM2_Init(void)
 364:Src/main.c    **** {
 365:Src/main.c    **** 
 366:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 367:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 368:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 369:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 370:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 371:Src/main.c    **** 
 372:Src/main.c    ****   htim2.Instance = TIM2;
 373:Src/main.c    ****   htim2.Init.Prescaler = 0;
 374:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 375:Src/main.c    ****   htim2.Init.Period = PER;
 376:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 377:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 378:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 379:Src/main.c    **** 
 380:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 381:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 382:Src/main.c    **** 
 383:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
ARM GAS  /tmp/ccnUMBHt.s 			page 10


 384:Src/main.c    **** 
 385:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 386:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 387:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 388:Src/main.c    **** 
 389:Src/main.c    ****   sConfigOC1.OCMode = TIM_OCMODE_PWM1;
 390:Src/main.c    ****   sConfigOC1.Pulse = PER / 3 * 2;
 391:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 392:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 393:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 394:Src/main.c    **** 
 395:Src/main.c    ****   sConfigOC4.OCMode = TIM_OCMODE_PWM1;
 396:Src/main.c    ****   sConfigOC4.Pulse = PER / 3;
 397:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 398:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 399:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** static void MX_USART3_UART_Init(void)
 403:Src/main.c    **** {
 404:Src/main.c    ****   huart3.Instance = USART3;
 405:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 406:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 407:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 408:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 409:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 410:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 411:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 412:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 413:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 414:Src/main.c    ****   HAL_UART_Init(&huart3);
 415:Src/main.c    **** }
 416:Src/main.c    **** 
 417:Src/main.c    **** static void MX_DMA_Init(void)
 418:Src/main.c    **** {
 419:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 420:Src/main.c    **** 
 421:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 422:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 423:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 424:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 425:Src/main.c    **** }
 426:Src/main.c    **** 
 427:Src/main.c    **** static void MX_GPIO_Init(void)
 428:Src/main.c    **** {
 136              		.loc 1 428 1 is_stmt 1 view -0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 32
 139              		@ frame_needed = 0, uses_anonymous_args = 0
 140 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 20
 143              		.cfi_offset 4, -20
 144              		.cfi_offset 5, -16
 145              		.cfi_offset 6, -12
 146              		.cfi_offset 7, -8
 147              		.cfi_offset 14, -4
ARM GAS  /tmp/ccnUMBHt.s 			page 11


 148 0002 D646     		mov	lr, r10
 149 0004 4F46     		mov	r7, r9
 150 0006 4646     		mov	r6, r8
 151 0008 C0B5     		push	{r6, r7, lr}
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 32
 154              		.cfi_offset 8, -32
 155              		.cfi_offset 9, -28
 156              		.cfi_offset 10, -24
 157 000a 88B0     		sub	sp, sp, #32
 158              	.LCFI4:
 159              		.cfi_def_cfa_offset 64
 429:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 160              		.loc 1 429 3 view .LVU17
 161              		.loc 1 429 20 is_stmt 0 view .LVU18
 162 000c 1422     		movs	r2, #20
 163 000e 0021     		movs	r1, #0
 164 0010 03A8     		add	r0, sp, #12
 165 0012 FFF7FEFF 		bl	memset
 166              	.LVL10:
 430:Src/main.c    **** 
 431:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 167              		.loc 1 431 3 is_stmt 1 view .LVU19
 168              	.LBB8:
 169              		.loc 1 431 3 view .LVU20
 170              		.loc 1 431 3 view .LVU21
 171 0016 394B     		ldr	r3, .L8
 172 0018 5969     		ldr	r1, [r3, #20]
 173 001a 8020     		movs	r0, #128
 174 001c 0003     		lsls	r0, r0, #12
 175 001e 0143     		orrs	r1, r0
 176 0020 5961     		str	r1, [r3, #20]
 177              		.loc 1 431 3 view .LVU22
 178 0022 5A69     		ldr	r2, [r3, #20]
 179 0024 0240     		ands	r2, r0
 180 0026 0092     		str	r2, [sp]
 181              		.loc 1 431 3 view .LVU23
 182 0028 009A     		ldr	r2, [sp]
 183              	.LBE8:
 432:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 184              		.loc 1 432 3 view .LVU24
 185              	.LBB9:
 186              		.loc 1 432 3 view .LVU25
 187              		.loc 1 432 3 view .LVU26
 188 002a 5969     		ldr	r1, [r3, #20]
 189 002c 8020     		movs	r0, #128
 190 002e 8002     		lsls	r0, r0, #10
 191 0030 0143     		orrs	r1, r0
 192 0032 5961     		str	r1, [r3, #20]
 193              		.loc 1 432 3 view .LVU27
 194 0034 5A69     		ldr	r2, [r3, #20]
 195 0036 0240     		ands	r2, r0
 196 0038 0192     		str	r2, [sp, #4]
 197              		.loc 1 432 3 view .LVU28
 198 003a 019A     		ldr	r2, [sp, #4]
 199              	.LBE9:
 433:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccnUMBHt.s 			page 12


 200              		.loc 1 433 3 view .LVU29
 201              	.LBB10:
 202              		.loc 1 433 3 view .LVU30
 203              		.loc 1 433 3 view .LVU31
 204 003c 5A69     		ldr	r2, [r3, #20]
 205 003e 8021     		movs	r1, #128
 206 0040 C902     		lsls	r1, r1, #11
 207 0042 0A43     		orrs	r2, r1
 208 0044 5A61     		str	r2, [r3, #20]
 209              		.loc 1 433 3 view .LVU32
 210 0046 5B69     		ldr	r3, [r3, #20]
 211 0048 0B40     		ands	r3, r1
 212 004a 0293     		str	r3, [sp, #8]
 213              		.loc 1 433 3 view .LVU33
 214 004c 029B     		ldr	r3, [sp, #8]
 215              	.LBE10:
 434:Src/main.c    **** 
 435:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, D1_Pin | D2_Pin | D3_Pin, GPIO_PIN_RESET);
 216              		.loc 1 435 3 view .LVU34
 217 004e E024     		movs	r4, #224
 218 0050 2402     		lsls	r4, r4, #8
 219 0052 2B4B     		ldr	r3, .L8+4
 220 0054 9A46     		mov	r10, r3
 221 0056 0022     		movs	r2, #0
 222 0058 2100     		movs	r1, r4
 223 005a 1800     		movs	r0, r3
 224 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 225              	.LVL11:
 436:Src/main.c    **** 
 437:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 226              		.loc 1 437 3 view .LVU35
 227 0060 284B     		ldr	r3, .L8+8
 228 0062 9946     		mov	r9, r3
 229 0064 9023     		movs	r3, #144
 230 0066 DB05     		lsls	r3, r3, #23
 231 0068 9846     		mov	r8, r3
 232 006a 0022     		movs	r2, #0
 233 006c 4946     		mov	r1, r9
 234 006e 1800     		movs	r0, r3
 235 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 236              	.LVL12:
 438:Src/main.c    ****                     | S4_Pin | S1_Pin | CSYNC_Pin  | F3_Pin | F5_Pin, GPIO_PIN_RESET);
 439:Src/main.c    **** 
 440:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_STATUS_Pin | LED_POWER_Pin , GPIO_PIN_RESET);
 237              		.loc 1 440 3 view .LVU36
 238 0074 244D     		ldr	r5, .L8+12
 239 0076 0022     		movs	r2, #0
 240 0078 0321     		movs	r1, #3
 241 007a 2800     		movs	r0, r5
 242 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 243              	.LVL13:
 441:Src/main.c    **** 
 442:Src/main.c    ****   GPIO_InitStruct.Pin = D1_Pin | D2_Pin | D3_Pin;
 244              		.loc 1 442 3 view .LVU37
 245              		.loc 1 442 23 is_stmt 0 view .LVU38
 246 0080 0394     		str	r4, [sp, #12]
 443:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/ccnUMBHt.s 			page 13


 247              		.loc 1 443 3 is_stmt 1 view .LVU39
 248              		.loc 1 443 24 is_stmt 0 view .LVU40
 249 0082 0127     		movs	r7, #1
 250 0084 0497     		str	r7, [sp, #16]
 444:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 251              		.loc 1 444 3 is_stmt 1 view .LVU41
 252              		.loc 1 444 24 is_stmt 0 view .LVU42
 253 0086 0024     		movs	r4, #0
 254 0088 0594     		str	r4, [sp, #20]
 445:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 255              		.loc 1 445 3 is_stmt 1 view .LVU43
 256              		.loc 1 445 25 is_stmt 0 view .LVU44
 257 008a 0326     		movs	r6, #3
 258 008c 0696     		str	r6, [sp, #24]
 446:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 259              		.loc 1 446 3 is_stmt 1 view .LVU45
 260 008e 03A9     		add	r1, sp, #12
 261 0090 5046     		mov	r0, r10
 262 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 263              	.LVL14:
 447:Src/main.c    **** 
 448:Src/main.c    ****   GPIO_InitStruct.Pin = DCLCK_Pin | S5_Pin | S2_Pin | S3_Pin
 264              		.loc 1 448 3 view .LVU46
 265              		.loc 1 448 23 is_stmt 0 view .LVU47
 266 0096 4B46     		mov	r3, r9
 267 0098 0393     		str	r3, [sp, #12]
 449:Src/main.c    ****                         | S4_Pin | S1_Pin | F3_Pin | F5_Pin | CSYNC_Pin;
 450:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 268              		.loc 1 450 3 is_stmt 1 view .LVU48
 269              		.loc 1 450 24 is_stmt 0 view .LVU49
 270 009a 0497     		str	r7, [sp, #16]
 451:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 271              		.loc 1 451 3 is_stmt 1 view .LVU50
 272              		.loc 1 451 24 is_stmt 0 view .LVU51
 273 009c 0594     		str	r4, [sp, #20]
 452:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 274              		.loc 1 452 3 is_stmt 1 view .LVU52
 275              		.loc 1 452 25 is_stmt 0 view .LVU53
 276 009e 0696     		str	r6, [sp, #24]
 453:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 277              		.loc 1 453 3 is_stmt 1 view .LVU54
 278 00a0 03A9     		add	r1, sp, #12
 279 00a2 4046     		mov	r0, r8
 280 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 281              	.LVL15:
 454:Src/main.c    **** 
 455:Src/main.c    ****   GPIO_InitStruct.Pin = INT_IN_Pin;
 282              		.loc 1 455 3 view .LVU55
 283              		.loc 1 455 23 is_stmt 0 view .LVU56
 284 00a8 0423     		movs	r3, #4
 285 00aa 0393     		str	r3, [sp, #12]
 456:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 286              		.loc 1 456 3 is_stmt 1 view .LVU57
 287              		.loc 1 456 24 is_stmt 0 view .LVU58
 288 00ac 174B     		ldr	r3, .L8+16
 289 00ae 0493     		str	r3, [sp, #16]
 457:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/ccnUMBHt.s 			page 14


 290              		.loc 1 457 3 is_stmt 1 view .LVU59
 291              		.loc 1 457 24 is_stmt 0 view .LVU60
 292 00b0 0594     		str	r4, [sp, #20]
 458:Src/main.c    ****   HAL_GPIO_Init(INT_IN_GPIO_Port, &GPIO_InitStruct);
 293              		.loc 1 458 3 is_stmt 1 view .LVU61
 294 00b2 03A9     		add	r1, sp, #12
 295 00b4 2800     		movs	r0, r5
 296 00b6 FFF7FEFF 		bl	HAL_GPIO_Init
 297              	.LVL16:
 459:Src/main.c    **** 
 460:Src/main.c    ****   GPIO_InitStruct.Pin =  LED_STATUS_Pin | LED_POWER_Pin;
 298              		.loc 1 460 3 view .LVU62
 299              		.loc 1 460 23 is_stmt 0 view .LVU63
 300 00ba 0396     		str	r6, [sp, #12]
 461:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 301              		.loc 1 461 3 is_stmt 1 view .LVU64
 302              		.loc 1 461 24 is_stmt 0 view .LVU65
 303 00bc 0497     		str	r7, [sp, #16]
 462:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 304              		.loc 1 462 3 is_stmt 1 view .LVU66
 305              		.loc 1 462 24 is_stmt 0 view .LVU67
 306 00be 0594     		str	r4, [sp, #20]
 463:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 307              		.loc 1 463 3 is_stmt 1 view .LVU68
 308              		.loc 1 463 25 is_stmt 0 view .LVU69
 309 00c0 0696     		str	r6, [sp, #24]
 464:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 310              		.loc 1 464 3 is_stmt 1 view .LVU70
 311 00c2 03A9     		add	r1, sp, #12
 312 00c4 2800     		movs	r0, r5
 313 00c6 FFF7FEFF 		bl	HAL_GPIO_Init
 314              	.LVL17:
 465:Src/main.c    **** 
 466:Src/main.c    ****   GPIO_InitStruct.Pin = INDEX_Pin | BUTTON_Pin;
 315              		.loc 1 466 3 view .LVU71
 316              		.loc 1 466 23 is_stmt 0 view .LVU72
 317 00ca 8123     		movs	r3, #129
 318 00cc 1B02     		lsls	r3, r3, #8
 319 00ce 0393     		str	r3, [sp, #12]
 467:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 320              		.loc 1 467 3 is_stmt 1 view .LVU73
 321              		.loc 1 467 24 is_stmt 0 view .LVU74
 322 00d0 0494     		str	r4, [sp, #16]
 468:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 323              		.loc 1 468 3 is_stmt 1 view .LVU75
 324              		.loc 1 468 24 is_stmt 0 view .LVU76
 325 00d2 0223     		movs	r3, #2
 326 00d4 0593     		str	r3, [sp, #20]
 469:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 327              		.loc 1 469 3 is_stmt 1 view .LVU77
 328 00d6 03A9     		add	r1, sp, #12
 329 00d8 2800     		movs	r0, r5
 330 00da FFF7FEFF 		bl	HAL_GPIO_Init
 331              	.LVL18:
 470:Src/main.c    **** 
 471:Src/main.c    ****   GPIO_InitStruct.Pin = ANALOG_INPUT3_Pin | ANALOG_INPUT2_Pin | ANALOG_INPUT1_Pin;
 332              		.loc 1 471 3 view .LVU78
ARM GAS  /tmp/ccnUMBHt.s 			page 15


 333              		.loc 1 471 23 is_stmt 0 view .LVU79
 334 00de 3823     		movs	r3, #56
 335 00e0 0393     		str	r3, [sp, #12]
 472:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 336              		.loc 1 472 3 is_stmt 1 view .LVU80
 337              		.loc 1 472 24 is_stmt 0 view .LVU81
 338 00e2 0496     		str	r6, [sp, #16]
 473:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 339              		.loc 1 473 3 is_stmt 1 view .LVU82
 340              		.loc 1 473 24 is_stmt 0 view .LVU83
 341 00e4 0594     		str	r4, [sp, #20]
 474:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 342              		.loc 1 474 3 is_stmt 1 view .LVU84
 343 00e6 03A9     		add	r1, sp, #12
 344 00e8 2800     		movs	r0, r5
 345 00ea FFF7FEFF 		bl	HAL_GPIO_Init
 346              	.LVL19:
 475:Src/main.c    **** 
 476:Src/main.c    **** }
 347              		.loc 1 476 1 is_stmt 0 view .LVU85
 348 00ee 08B0     		add	sp, sp, #32
 349              		@ sp needed
 350 00f0 1CBC     		pop	{r2, r3, r4}
 351 00f2 9046     		mov	r8, r2
 352 00f4 9946     		mov	r9, r3
 353 00f6 A246     		mov	r10, r4
 354 00f8 F0BD     		pop	{r4, r5, r6, r7, pc}
 355              	.L9:
 356 00fa C046     		.align	2
 357              	.L8:
 358 00fc 00100240 		.word	1073876992
 359 0100 00080048 		.word	1207961600
 360 0104 FF040000 		.word	1279
 361 0108 00040048 		.word	1207960576
 362 010c 00001110 		.word	269549568
 363              		.cfi_endproc
 364              	.LFE51:
 366              		.section	.text.MX_DMA_Init,"ax",%progbits
 367              		.align	1
 368              		.syntax unified
 369              		.code	16
 370              		.thumb_func
 371              		.fpu softvfp
 373              	MX_DMA_Init:
 374              	.LFB50:
 418:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 375              		.loc 1 418 1 is_stmt 1 view -0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 8
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379 0000 00B5     		push	{lr}
 380              	.LCFI5:
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 14, -4
 383 0002 83B0     		sub	sp, sp, #12
 384              	.LCFI6:
 385              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccnUMBHt.s 			page 16


 419:Src/main.c    **** 
 386              		.loc 1 419 3 view .LVU87
 387              	.LBB11:
 419:Src/main.c    **** 
 388              		.loc 1 419 3 view .LVU88
 419:Src/main.c    **** 
 389              		.loc 1 419 3 view .LVU89
 390 0004 0D4A     		ldr	r2, .L11
 391 0006 5169     		ldr	r1, [r2, #20]
 392 0008 0123     		movs	r3, #1
 393 000a 1943     		orrs	r1, r3
 394 000c 5161     		str	r1, [r2, #20]
 419:Src/main.c    **** 
 395              		.loc 1 419 3 view .LVU90
 396 000e 5269     		ldr	r2, [r2, #20]
 397 0010 1340     		ands	r3, r2
 398 0012 0193     		str	r3, [sp, #4]
 419:Src/main.c    **** 
 399              		.loc 1 419 3 view .LVU91
 400 0014 019B     		ldr	r3, [sp, #4]
 401              	.LBE11:
 421:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 402              		.loc 1 421 3 view .LVU92
 403 0016 0022     		movs	r2, #0
 404 0018 0021     		movs	r1, #0
 405 001a 0920     		movs	r0, #9
 406 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 407              	.LVL20:
 422:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 408              		.loc 1 422 3 view .LVU93
 409 0020 0920     		movs	r0, #9
 410 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 411              	.LVL21:
 423:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 412              		.loc 1 423 3 view .LVU94
 413 0026 0022     		movs	r2, #0
 414 0028 0021     		movs	r1, #0
 415 002a 0B20     		movs	r0, #11
 416 002c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 417              	.LVL22:
 424:Src/main.c    **** }
 418              		.loc 1 424 3 view .LVU95
 419 0030 0B20     		movs	r0, #11
 420 0032 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 421              	.LVL23:
 425:Src/main.c    **** 
 422              		.loc 1 425 1 is_stmt 0 view .LVU96
 423 0036 03B0     		add	sp, sp, #12
 424              		@ sp needed
 425 0038 00BD     		pop	{pc}
 426              	.L12:
 427 003a C046     		.align	2
 428              	.L11:
 429 003c 00100240 		.word	1073876992
 430              		.cfi_endproc
 431              	.LFE50:
 433              		.section	.text.MX_TIM1_Init,"ax",%progbits
ARM GAS  /tmp/ccnUMBHt.s 			page 17


 434              		.align	1
 435              		.syntax unified
 436              		.code	16
 437              		.thumb_func
 438              		.fpu softvfp
 440              	MX_TIM1_Init:
 441              	.LFB47:
 333:Src/main.c    **** 
 442              		.loc 1 333 1 is_stmt 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 48
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446 0000 30B5     		push	{r4, r5, lr}
 447              	.LCFI7:
 448              		.cfi_def_cfa_offset 12
 449              		.cfi_offset 4, -12
 450              		.cfi_offset 5, -8
 451              		.cfi_offset 14, -4
 452 0002 8DB0     		sub	sp, sp, #52
 453              	.LCFI8:
 454              		.cfi_def_cfa_offset 64
 335:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 455              		.loc 1 335 3 view .LVU98
 335:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 456              		.loc 1 335 27 is_stmt 0 view .LVU99
 457 0004 2022     		movs	r2, #32
 458 0006 0021     		movs	r1, #0
 459 0008 04A8     		add	r0, sp, #16
 460 000a FFF7FEFF 		bl	memset
 461              	.LVL24:
 336:Src/main.c    **** 
 462              		.loc 1 336 3 is_stmt 1 view .LVU100
 336:Src/main.c    **** 
 463              		.loc 1 336 27 is_stmt 0 view .LVU101
 464 000e 0822     		movs	r2, #8
 465 0010 0021     		movs	r1, #0
 466 0012 01A8     		add	r0, sp, #4
 467 0014 FFF7FEFF 		bl	memset
 468              	.LVL25:
 338:Src/main.c    ****   htim1.Init.Prescaler = 0;
 469              		.loc 1 338 3 is_stmt 1 view .LVU102
 338:Src/main.c    ****   htim1.Init.Prescaler = 0;
 470              		.loc 1 338 18 is_stmt 0 view .LVU103
 471 0018 0C4C     		ldr	r4, .L14
 472 001a 0D4B     		ldr	r3, .L14+4
 473 001c 2360     		str	r3, [r4]
 339:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 474              		.loc 1 339 3 is_stmt 1 view .LVU104
 339:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 475              		.loc 1 339 24 is_stmt 0 view .LVU105
 476 001e 0025     		movs	r5, #0
 477 0020 6560     		str	r5, [r4, #4]
 340:Src/main.c    ****   htim1.Init.Period = 0;
 478              		.loc 1 340 3 is_stmt 1 view .LVU106
 340:Src/main.c    ****   htim1.Init.Period = 0;
 479              		.loc 1 340 26 is_stmt 0 view .LVU107
 480 0022 A560     		str	r5, [r4, #8]
ARM GAS  /tmp/ccnUMBHt.s 			page 18


 341:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 481              		.loc 1 341 3 is_stmt 1 view .LVU108
 341:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 482              		.loc 1 341 21 is_stmt 0 view .LVU109
 483 0024 E560     		str	r5, [r4, #12]
 342:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 484              		.loc 1 342 3 is_stmt 1 view .LVU110
 342:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 485              		.loc 1 342 28 is_stmt 0 view .LVU111
 486 0026 2561     		str	r5, [r4, #16]
 343:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 487              		.loc 1 343 3 is_stmt 1 view .LVU112
 343:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 488              		.loc 1 343 32 is_stmt 0 view .LVU113
 489 0028 6561     		str	r5, [r4, #20]
 344:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 490              		.loc 1 344 3 is_stmt 1 view .LVU114
 344:Src/main.c    ****   sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 491              		.loc 1 344 32 is_stmt 0 view .LVU115
 492 002a A561     		str	r5, [r4, #24]
 345:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 493              		.loc 1 345 3 is_stmt 1 view .LVU116
 345:Src/main.c    ****   sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 494              		.loc 1 345 23 is_stmt 0 view .LVU117
 495 002c 0123     		movs	r3, #1
 496 002e 0393     		str	r3, [sp, #12]
 346:Src/main.c    ****   sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 497              		.loc 1 346 3 is_stmt 1 view .LVU118
 347:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 498              		.loc 1 347 3 view .LVU119
 347:Src/main.c    ****   sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 499              		.loc 1 347 24 is_stmt 0 view .LVU120
 500 0030 0593     		str	r3, [sp, #20]
 348:Src/main.c    ****   sConfig.IC1Filter = 0;
 501              		.loc 1 348 3 is_stmt 1 view .LVU121
 349:Src/main.c    ****   sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 502              		.loc 1 349 3 view .LVU122
 350:Src/main.c    ****   sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 503              		.loc 1 350 3 view .LVU123
 351:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 504              		.loc 1 351 3 view .LVU124
 351:Src/main.c    ****   sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 505              		.loc 1 351 24 is_stmt 0 view .LVU125
 506 0032 0993     		str	r3, [sp, #36]
 352:Src/main.c    ****   sConfig.IC2Filter = 0;
 507              		.loc 1 352 3 is_stmt 1 view .LVU126
 353:Src/main.c    ****   HAL_TIM_Encoder_Init(&htim1, &sConfig);
 508              		.loc 1 353 3 view .LVU127
 354:Src/main.c    **** 
 509              		.loc 1 354 3 view .LVU128
 510 0034 03A9     		add	r1, sp, #12
 511 0036 2000     		movs	r0, r4
 512 0038 FFF7FEFF 		bl	HAL_TIM_Encoder_Init
 513              	.LVL26:
 356:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 514              		.loc 1 356 3 view .LVU129
 356:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccnUMBHt.s 			page 19


 515              		.loc 1 356 37 is_stmt 0 view .LVU130
 516 003c 0195     		str	r5, [sp, #4]
 357:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 517              		.loc 1 357 3 is_stmt 1 view .LVU131
 357:Src/main.c    ****  HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 518              		.loc 1 357 33 is_stmt 0 view .LVU132
 519 003e 0295     		str	r5, [sp, #8]
 358:Src/main.c    **** 
 520              		.loc 1 358 2 is_stmt 1 view .LVU133
 521 0040 01A9     		add	r1, sp, #4
 522 0042 2000     		movs	r0, r4
 523 0044 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 524              	.LVL27:
 361:Src/main.c    **** 
 525              		.loc 1 361 1 is_stmt 0 view .LVU134
 526 0048 0DB0     		add	sp, sp, #52
 527              		@ sp needed
 528 004a 30BD     		pop	{r4, r5, pc}
 529              	.L15:
 530              		.align	2
 531              	.L14:
 532 004c 00000000 		.word	htim1
 533 0050 002C0140 		.word	1073818624
 534              		.cfi_endproc
 535              	.LFE47:
 537              		.global	__aeabi_uidiv
 538              		.section	.text.MX_TIM2_Init,"ax",%progbits
 539              		.align	1
 540              		.syntax unified
 541              		.code	16
 542              		.thumb_func
 543              		.fpu softvfp
 545              	MX_TIM2_Init:
 546              	.LFB48:
 364:Src/main.c    **** 
 547              		.loc 1 364 1 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 80
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 552              	.LCFI9:
 553              		.cfi_def_cfa_offset 20
 554              		.cfi_offset 4, -20
 555              		.cfi_offset 5, -16
 556              		.cfi_offset 6, -12
 557              		.cfi_offset 7, -8
 558              		.cfi_offset 14, -4
 559 0002 C646     		mov	lr, r8
 560 0004 00B5     		push	{lr}
 561              	.LCFI10:
 562              		.cfi_def_cfa_offset 24
 563              		.cfi_offset 8, -24
 564 0006 94B0     		sub	sp, sp, #80
 565              	.LCFI11:
 566              		.cfi_def_cfa_offset 104
 366:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 567              		.loc 1 366 3 view .LVU136
ARM GAS  /tmp/ccnUMBHt.s 			page 20


 366:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 568              		.loc 1 366 26 is_stmt 0 view .LVU137
 569 0008 1022     		movs	r2, #16
 570 000a 0021     		movs	r1, #0
 571 000c 10A8     		add	r0, sp, #64
 572 000e FFF7FEFF 		bl	memset
 573              	.LVL28:
 367:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 574              		.loc 1 367 3 is_stmt 1 view .LVU138
 367:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC1 = {0};
 575              		.loc 1 367 27 is_stmt 0 view .LVU139
 576 0012 0822     		movs	r2, #8
 577 0014 0021     		movs	r1, #0
 578 0016 0EA8     		add	r0, sp, #56
 579 0018 FFF7FEFF 		bl	memset
 580              	.LVL29:
 368:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 581              		.loc 1 368 3 is_stmt 1 view .LVU140
 368:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC4 = {0};
 582              		.loc 1 368 22 is_stmt 0 view .LVU141
 583 001c 1C22     		movs	r2, #28
 584 001e 0021     		movs	r1, #0
 585 0020 07A8     		add	r0, sp, #28
 586 0022 FFF7FEFF 		bl	memset
 587              	.LVL30:
 369:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 588              		.loc 1 369 3 is_stmt 1 view .LVU142
 369:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC3 = {0};
 589              		.loc 1 369 22 is_stmt 0 view .LVU143
 590 0026 1C22     		movs	r2, #28
 591 0028 0021     		movs	r1, #0
 592 002a 6846     		mov	r0, sp
 593 002c FFF7FEFF 		bl	memset
 594              	.LVL31:
 370:Src/main.c    **** 
 595              		.loc 1 370 3 is_stmt 1 view .LVU144
 372:Src/main.c    ****   htim2.Init.Prescaler = 0;
 596              		.loc 1 372 3 view .LVU145
 372:Src/main.c    ****   htim2.Init.Prescaler = 0;
 597              		.loc 1 372 18 is_stmt 0 view .LVU146
 598 0030 214C     		ldr	r4, .L17
 599 0032 8023     		movs	r3, #128
 600 0034 DB05     		lsls	r3, r3, #23
 601 0036 2360     		str	r3, [r4]
 373:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 602              		.loc 1 373 3 is_stmt 1 view .LVU147
 373:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 603              		.loc 1 373 24 is_stmt 0 view .LVU148
 604 0038 0025     		movs	r5, #0
 605 003a 6560     		str	r5, [r4, #4]
 374:Src/main.c    ****   htim2.Init.Period = PER;
 606              		.loc 1 374 3 is_stmt 1 view .LVU149
 374:Src/main.c    ****   htim2.Init.Period = PER;
 607              		.loc 1 374 26 is_stmt 0 view .LVU150
 608 003c A560     		str	r5, [r4, #8]
 375:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 609              		.loc 1 375 3 is_stmt 1 view .LVU151
ARM GAS  /tmp/ccnUMBHt.s 			page 21


 375:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 610              		.loc 1 375 21 is_stmt 0 view .LVU152
 611 003e 1F4E     		ldr	r6, .L17+4
 612 0040 3388     		ldrh	r3, [r6]
 613 0042 E360     		str	r3, [r4, #12]
 376:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 614              		.loc 1 376 3 is_stmt 1 view .LVU153
 376:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 615              		.loc 1 376 28 is_stmt 0 view .LVU154
 616 0044 2561     		str	r5, [r4, #16]
 377:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 617              		.loc 1 377 3 is_stmt 1 view .LVU155
 377:Src/main.c    ****   HAL_TIM_Base_Init(&htim2);
 618              		.loc 1 377 32 is_stmt 0 view .LVU156
 619 0046 A561     		str	r5, [r4, #24]
 378:Src/main.c    **** 
 620              		.loc 1 378 3 is_stmt 1 view .LVU157
 621 0048 2000     		movs	r0, r4
 622 004a FFF7FEFF 		bl	HAL_TIM_Base_Init
 623              	.LVL32:
 380:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 624              		.loc 1 380 3 view .LVU158
 380:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 625              		.loc 1 380 34 is_stmt 0 view .LVU159
 626 004e 8023     		movs	r3, #128
 627 0050 5B01     		lsls	r3, r3, #5
 628 0052 1093     		str	r3, [sp, #64]
 381:Src/main.c    **** 
 629              		.loc 1 381 3 is_stmt 1 view .LVU160
 630 0054 10A9     		add	r1, sp, #64
 631 0056 2000     		movs	r0, r4
 632 0058 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 633              	.LVL33:
 383:Src/main.c    **** 
 634              		.loc 1 383 3 view .LVU161
 635 005c 2000     		movs	r0, r4
 636 005e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 637              	.LVL34:
 385:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 638              		.loc 1 385 3 view .LVU162
 385:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 639              		.loc 1 385 37 is_stmt 0 view .LVU163
 640 0062 0E95     		str	r5, [sp, #56]
 386:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 641              		.loc 1 386 3 is_stmt 1 view .LVU164
 386:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 642              		.loc 1 386 33 is_stmt 0 view .LVU165
 643 0064 0F95     		str	r5, [sp, #60]
 387:Src/main.c    **** 
 644              		.loc 1 387 3 is_stmt 1 view .LVU166
 645 0066 0EA9     		add	r1, sp, #56
 646 0068 2000     		movs	r0, r4
 647 006a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 648              	.LVL35:
 389:Src/main.c    ****   sConfigOC1.Pulse = PER / 3 * 2;
 649              		.loc 1 389 3 view .LVU167
 389:Src/main.c    ****   sConfigOC1.Pulse = PER / 3 * 2;
ARM GAS  /tmp/ccnUMBHt.s 			page 22


 650              		.loc 1 389 21 is_stmt 0 view .LVU168
 651 006e 6023     		movs	r3, #96
 652 0070 9846     		mov	r8, r3
 653 0072 0793     		str	r3, [sp, #28]
 390:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 654              		.loc 1 390 3 is_stmt 1 view .LVU169
 390:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 655              		.loc 1 390 26 is_stmt 0 view .LVU170
 656 0074 3088     		ldrh	r0, [r6]
 657 0076 0321     		movs	r1, #3
 658 0078 FFF7FEFF 		bl	__aeabi_uidiv
 659              	.LVL36:
 660 007c 80B2     		uxth	r0, r0
 390:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 661              		.loc 1 390 30 view .LVU171
 662 007e 4000     		lsls	r0, r0, #1
 390:Src/main.c    ****   sConfigOC1.OCPolarity = TIM_OCPOLARITY_LOW;
 663              		.loc 1 390 20 view .LVU172
 664 0080 0890     		str	r0, [sp, #32]
 391:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 665              		.loc 1 391 3 is_stmt 1 view .LVU173
 391:Src/main.c    ****   sConfigOC1.OCFastMode = TIM_OCFAST_DISABLE;
 666              		.loc 1 391 25 is_stmt 0 view .LVU174
 667 0082 0227     		movs	r7, #2
 668 0084 0997     		str	r7, [sp, #36]
 392:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 669              		.loc 1 392 3 is_stmt 1 view .LVU175
 392:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC1, TIM_CHANNEL_1);
 670              		.loc 1 392 25 is_stmt 0 view .LVU176
 671 0086 0B95     		str	r5, [sp, #44]
 393:Src/main.c    **** 
 672              		.loc 1 393 3 is_stmt 1 view .LVU177
 673 0088 0022     		movs	r2, #0
 674 008a 07A9     		add	r1, sp, #28
 675 008c 2000     		movs	r0, r4
 676 008e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 677              	.LVL37:
 395:Src/main.c    ****   sConfigOC4.Pulse = PER / 3;
 678              		.loc 1 395 3 view .LVU178
 395:Src/main.c    ****   sConfigOC4.Pulse = PER / 3;
 679              		.loc 1 395 21 is_stmt 0 view .LVU179
 680 0092 4346     		mov	r3, r8
 681 0094 0093     		str	r3, [sp]
 396:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 682              		.loc 1 396 3 is_stmt 1 view .LVU180
 396:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 683              		.loc 1 396 26 is_stmt 0 view .LVU181
 684 0096 3088     		ldrh	r0, [r6]
 685 0098 0321     		movs	r1, #3
 686 009a FFF7FEFF 		bl	__aeabi_uidiv
 687              	.LVL38:
 688 009e 80B2     		uxth	r0, r0
 396:Src/main.c    ****   sConfigOC4.OCPolarity = TIM_OCPOLARITY_LOW;
 689              		.loc 1 396 20 view .LVU182
 690 00a0 0190     		str	r0, [sp, #4]
 397:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 691              		.loc 1 397 3 is_stmt 1 view .LVU183
ARM GAS  /tmp/ccnUMBHt.s 			page 23


 397:Src/main.c    ****   sConfigOC4.OCFastMode = TIM_OCFAST_DISABLE;
 692              		.loc 1 397 25 is_stmt 0 view .LVU184
 693 00a2 0297     		str	r7, [sp, #8]
 398:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 694              		.loc 1 398 3 is_stmt 1 view .LVU185
 398:Src/main.c    ****  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC4, TIM_CHANNEL_4);
 695              		.loc 1 398 25 is_stmt 0 view .LVU186
 696 00a4 0495     		str	r5, [sp, #16]
 399:Src/main.c    **** }
 697              		.loc 1 399 2 is_stmt 1 view .LVU187
 698 00a6 0C22     		movs	r2, #12
 699 00a8 6946     		mov	r1, sp
 700 00aa 2000     		movs	r0, r4
 701 00ac FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 702              	.LVL39:
 400:Src/main.c    **** 
 703              		.loc 1 400 1 is_stmt 0 view .LVU188
 704 00b0 14B0     		add	sp, sp, #80
 705              		@ sp needed
 706 00b2 04BC     		pop	{r2}
 707 00b4 9046     		mov	r8, r2
 708 00b6 F0BD     		pop	{r4, r5, r6, r7, pc}
 709              	.L18:
 710              		.align	2
 711              	.L17:
 712 00b8 00000000 		.word	htim2
 713 00bc 00000000 		.word	.LANCHOR1
 714              		.cfi_endproc
 715              	.LFE48:
 717              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 718              		.align	1
 719              		.syntax unified
 720              		.code	16
 721              		.thumb_func
 722              		.fpu softvfp
 724              	MX_USART3_UART_Init:
 725              	.LFB49:
 403:Src/main.c    ****   huart3.Instance = USART3;
 726              		.loc 1 403 1 is_stmt 1 view -0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 0
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730 0000 10B5     		push	{r4, lr}
 731              	.LCFI12:
 732              		.cfi_def_cfa_offset 8
 733              		.cfi_offset 4, -8
 734              		.cfi_offset 14, -4
 404:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 735              		.loc 1 404 3 view .LVU190
 404:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 736              		.loc 1 404 19 is_stmt 0 view .LVU191
 737 0002 0948     		ldr	r0, .L20
 738 0004 094B     		ldr	r3, .L20+4
 739 0006 0360     		str	r3, [r0]
 405:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 740              		.loc 1 405 3 is_stmt 1 view .LVU192
 405:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/ccnUMBHt.s 			page 24


 741              		.loc 1 405 24 is_stmt 0 view .LVU193
 742 0008 E123     		movs	r3, #225
 743 000a 5B02     		lsls	r3, r3, #9
 744 000c 4360     		str	r3, [r0, #4]
 406:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 745              		.loc 1 406 3 is_stmt 1 view .LVU194
 406:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 746              		.loc 1 406 26 is_stmt 0 view .LVU195
 747 000e 0023     		movs	r3, #0
 748 0010 8360     		str	r3, [r0, #8]
 407:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 749              		.loc 1 407 3 is_stmt 1 view .LVU196
 407:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 750              		.loc 1 407 24 is_stmt 0 view .LVU197
 751 0012 C360     		str	r3, [r0, #12]
 408:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 752              		.loc 1 408 3 is_stmt 1 view .LVU198
 408:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 753              		.loc 1 408 22 is_stmt 0 view .LVU199
 754 0014 0361     		str	r3, [r0, #16]
 409:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 755              		.loc 1 409 3 is_stmt 1 view .LVU200
 409:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 756              		.loc 1 409 20 is_stmt 0 view .LVU201
 757 0016 0C22     		movs	r2, #12
 758 0018 4261     		str	r2, [r0, #20]
 410:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 759              		.loc 1 410 3 is_stmt 1 view .LVU202
 410:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 760              		.loc 1 410 25 is_stmt 0 view .LVU203
 761 001a 8361     		str	r3, [r0, #24]
 411:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 762              		.loc 1 411 3 is_stmt 1 view .LVU204
 411:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 763              		.loc 1 411 28 is_stmt 0 view .LVU205
 764 001c C361     		str	r3, [r0, #28]
 412:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 765              		.loc 1 412 3 is_stmt 1 view .LVU206
 412:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 766              		.loc 1 412 30 is_stmt 0 view .LVU207
 767 001e 0362     		str	r3, [r0, #32]
 413:Src/main.c    ****   HAL_UART_Init(&huart3);
 768              		.loc 1 413 3 is_stmt 1 view .LVU208
 413:Src/main.c    ****   HAL_UART_Init(&huart3);
 769              		.loc 1 413 38 is_stmt 0 view .LVU209
 770 0020 4362     		str	r3, [r0, #36]
 414:Src/main.c    **** }
 771              		.loc 1 414 3 is_stmt 1 view .LVU210
 772 0022 FFF7FEFF 		bl	HAL_UART_Init
 773              	.LVL40:
 415:Src/main.c    **** 
 774              		.loc 1 415 1 is_stmt 0 view .LVU211
 775              		@ sp needed
 776 0026 10BD     		pop	{r4, pc}
 777              	.L21:
 778              		.align	2
 779              	.L20:
ARM GAS  /tmp/ccnUMBHt.s 			page 25


 780 0028 00000000 		.word	huart3
 781 002c 00480040 		.word	1073760256
 782              		.cfi_endproc
 783              	.LFE49:
 785              		.section	.text.dfu_otter_bootloader,"ax",%progbits
 786              		.align	1
 787              		.global	dfu_otter_bootloader
 788              		.syntax unified
 789              		.code	16
 790              		.thumb_func
 791              		.fpu softvfp
 793              	dfu_otter_bootloader:
 794              	.LFB37:
  31:Src/main.c    ****   *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 795              		.loc 1 31 1 is_stmt 1 view -0
 796              		.cfi_startproc
 797              		@ Volatile: function does not return.
 798              		@ args = 0, pretend = 0, frame = 0
 799              		@ frame_needed = 0, uses_anonymous_args = 0
 800              		@ link register save eliminated.
  32:Src/main.c    ****   NVIC_SystemReset();
 801              		.loc 1 32 3 view .LVU213
  32:Src/main.c    ****   NVIC_SystemReset();
 802              		.loc 1 32 34 is_stmt 0 view .LVU214
 803 0000 054B     		ldr	r3, .L24
 804 0002 064A     		ldr	r2, .L24+4
 805 0004 1A60     		str	r2, [r3]
  33:Src/main.c    **** }
 806              		.loc 1 33 3 is_stmt 1 view .LVU215
 807              	.LBB20:
 808              	.LBI20:
 809              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
ARM GAS  /tmp/ccnUMBHt.s 			page 26


  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
ARM GAS  /tmp/ccnUMBHt.s 			page 27


  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccnUMBHt.s 			page 28


 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
ARM GAS  /tmp/ccnUMBHt.s 			page 29


 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
ARM GAS  /tmp/ccnUMBHt.s 			page 30


 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 31


 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
ARM GAS  /tmp/ccnUMBHt.s 			page 32


 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 33


 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
ARM GAS  /tmp/ccnUMBHt.s 			page 34


 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccnUMBHt.s 			page 35


 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 36


 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccnUMBHt.s 			page 37


 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
ARM GAS  /tmp/ccnUMBHt.s 			page 38


 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 810              		.loc 2 730 22 view .LVU216
 811              	.LBB21:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 812              		.loc 2 732 3 view .LVU217
 813              	.LBB22:
 814              	.LBI22:
 815              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
ARM GAS  /tmp/ccnUMBHt.s 			page 39


  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccnUMBHt.s 			page 40


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 41


 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
ARM GAS  /tmp/ccnUMBHt.s 			page 42


 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 43


 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccnUMBHt.s 			page 44


 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
ARM GAS  /tmp/ccnUMBHt.s 			page 45


 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
ARM GAS  /tmp/ccnUMBHt.s 			page 46


 816              		.loc 3 427 53 view .LVU218
 817              	.LBB23:
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 818              		.loc 3 429 3 view .LVU219
 819              		.syntax divided
 820              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 821 0006 BFF34F8F 		dsb 0xF
 822              	@ 0 "" 2
 823              		.thumb
 824              		.syntax unified
 825              	.LBE23:
 826              	.LBE22:
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 827              		.loc 2 734 3 view .LVU220
 828              		.loc 2 734 15 is_stmt 0 view .LVU221
 829 000a 054B     		ldr	r3, .L24+8
 830 000c 054A     		ldr	r2, .L24+12
 831 000e DA60     		str	r2, [r3, #12]
 735:Drivers/CMSIS/Include/core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 736:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure completion of memory 
 832              		.loc 2 736 3 is_stmt 1 view .LVU222
 833              	.LBB24:
 834              	.LBI24:
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835              		.loc 3 427 53 view .LVU223
 836              	.LBB25:
 837              		.loc 3 429 3 view .LVU224
 838              		.syntax divided
 839              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 840 0010 BFF34F8F 		dsb 0xF
 841              	@ 0 "" 2
 842              		.thumb
 843              		.syntax unified
 844              	.L23:
 845              	.LBE25:
 846              	.LBE24:
 737:Drivers/CMSIS/Include/core_cm0.h **** 
 738:Drivers/CMSIS/Include/core_cm0.h ****   for(;;)                                                           /* wait until reset */
 847              		.loc 2 738 3 view .LVU225
 739:Drivers/CMSIS/Include/core_cm0.h ****   {
 740:Drivers/CMSIS/Include/core_cm0.h ****     __NOP();
 848              		.loc 2 740 5 view .LVU226
 849              	.LBB26:
 850              	.LBI26:
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 851              		.loc 3 373 53 view .LVU227
 852              	.LBB27:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 853              		.loc 3 375 3 view .LVU228
 854              		.syntax divided
 855              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 856 0014 C046     		nop
 857              	@ 0 "" 2
 858              		.thumb
 859              		.syntax unified
ARM GAS  /tmp/ccnUMBHt.s 			page 47


 860 0016 FDE7     		b	.L23
 861              	.L25:
 862              		.align	2
 863              	.L24:
 864 0018 F03F0020 		.word	536887280
 865 001c EFBEADDE 		.word	-559038737
 866 0020 00ED00E0 		.word	-536810240
 867 0024 0400FA05 		.word	100270084
 868              	.LBE27:
 869              	.LBE26:
 870              	.LBE21:
 871              	.LBE20:
 872              		.cfi_endproc
 873              	.LFE37:
 875              		.global	__aeabi_idivmod
 876              		.global	__aeabi_idiv
 877              		.section	.text.printcart_fire_nozzle_color,"ax",%progbits
 878              		.align	1
 879              		.global	printcart_fire_nozzle_color
 880              		.syntax unified
 881              		.code	16
 882              		.thumb_func
 883              		.fpu softvfp
 885              	printcart_fire_nozzle_color:
 886              	.LVL41:
 887              	.LFB41:
 185:Src/main.c    **** 	//Byte order for the three colors. Note that these arrays are
 888              		.loc 1 185 71 view -0
 889              		.cfi_startproc
 890              		@ args = 0, pretend = 0, frame = 168
 891              		@ frame_needed = 0, uses_anonymous_args = 0
 185:Src/main.c    **** 	//Byte order for the three colors. Note that these arrays are
 892              		.loc 1 185 71 is_stmt 0 view .LVU230
 893 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 894              	.LCFI13:
 895              		.cfi_def_cfa_offset 20
 896              		.cfi_offset 4, -20
 897              		.cfi_offset 5, -16
 898              		.cfi_offset 6, -12
 899              		.cfi_offset 7, -8
 900              		.cfi_offset 14, -4
 901 0002 ABB0     		sub	sp, sp, #172
 902              	.LCFI14:
 903              		.cfi_def_cfa_offset 192
 904 0004 0600     		movs	r6, r0
 905 0006 0D00     		movs	r5, r1
 906 0008 1400     		movs	r4, r2
 188:Src/main.c    **** 		{8,13,4,9,0,5,10,1,6,11,2,7,12,3},
 907              		.loc 1 188 2 is_stmt 1 view .LVU231
 188:Src/main.c    **** 		{8,13,4,9,0,5,10,1,6,11,2,7,12,3},
 908              		.loc 1 188 6 is_stmt 0 view .LVU232
 909 000a A822     		movs	r2, #168
 910              	.LVL42:
 188:Src/main.c    **** 		{8,13,4,9,0,5,10,1,6,11,2,7,12,3},
 911              		.loc 1 188 6 view .LVU233
 912 000c 0F49     		ldr	r1, .L29
 913              	.LVL43:
ARM GAS  /tmp/ccnUMBHt.s 			page 48


 188:Src/main.c    **** 		{8,13,4,9,0,5,10,1,6,11,2,7,12,3},
 914              		.loc 1 188 6 view .LVU234
 915 000e 6846     		mov	r0, sp
 916              	.LVL44:
 188:Src/main.c    **** 		{8,13,4,9,0,5,10,1,6,11,2,7,12,3},
 917              		.loc 1 188 6 view .LVU235
 918 0010 FFF7FEFF 		bl	memcpy
 919              	.LVL45:
 193:Src/main.c    **** 	int byteno=bo[_color][p%14];
 920              		.loc 1 193 2 is_stmt 1 view .LVU236
 193:Src/main.c    **** 	int byteno=bo[_color][p%14];
 921              		.loc 1 193 5 is_stmt 0 view .LVU237
 922 0014 E02D     		cmp	r5, #224
 923 0016 17D8     		bhi	.L26
 194:Src/main.c    **** 	int bitno=p/14;
 924              		.loc 1 194 2 is_stmt 1 view .LVU238
 194:Src/main.c    **** 	int bitno=p/14;
 925              		.loc 1 194 25 is_stmt 0 view .LVU239
 926 0018 0E21     		movs	r1, #14
 927 001a 2800     		movs	r0, r5
 928 001c FFF7FEFF 		bl	__aeabi_idivmod
 929              	.LVL46:
 194:Src/main.c    **** 	int bitno=p/14;
 930              		.loc 1 194 6 view .LVU240
 931 0020 E300     		lsls	r3, r4, #3
 932 0022 1B1B     		subs	r3, r3, r4
 933 0024 5B00     		lsls	r3, r3, #1
 934 0026 5B18     		adds	r3, r3, r1
 935 0028 9B00     		lsls	r3, r3, #2
 936 002a 6A46     		mov	r2, sp
 937 002c 9F58     		ldr	r7, [r3, r2]
 938              	.LVL47:
 195:Src/main.c    **** 	wav[(byteno*16)+(bitno + 1 )]&=~(1<<(_color+13));
 939              		.loc 1 195 2 is_stmt 1 view .LVU241
 195:Src/main.c    **** 	wav[(byteno*16)+(bitno + 1 )]&=~(1<<(_color+13));
 940              		.loc 1 195 6 is_stmt 0 view .LVU242
 941 002e 0E21     		movs	r1, #14
 942 0030 2800     		movs	r0, r5
 943 0032 FFF7FEFF 		bl	__aeabi_idiv
 944              	.LVL48:
 196:Src/main.c    **** }
 945              		.loc 1 196 2 is_stmt 1 view .LVU243
 196:Src/main.c    **** }
 946              		.loc 1 196 31 is_stmt 0 view .LVU244
 947 0036 3F01     		lsls	r7, r7, #4
 948              	.LVL49:
 196:Src/main.c    **** }
 949              		.loc 1 196 31 view .LVU245
 950 0038 0130     		adds	r0, r0, #1
 951              	.LVL50:
 196:Src/main.c    **** }
 952              		.loc 1 196 31 view .LVU246
 953 003a 3818     		adds	r0, r7, r0
 954              	.LVL51:
 196:Src/main.c    **** }
 955              		.loc 1 196 45 view .LVU247
 956 003c 0D34     		adds	r4, r4, #13
ARM GAS  /tmp/ccnUMBHt.s 			page 49


 196:Src/main.c    **** }
 957              		.loc 1 196 36 view .LVU248
 958 003e 0122     		movs	r2, #1
 959 0040 A240     		lsls	r2, r2, r4
 196:Src/main.c    **** }
 960              		.loc 1 196 31 view .LVU249
 961 0042 335C     		ldrb	r3, [r6, r0]
 962 0044 9343     		bics	r3, r2
 963 0046 3354     		strb	r3, [r6, r0]
 964              	.L26:
 197:Src/main.c    **** 
 965              		.loc 1 197 1 view .LVU250
 966 0048 2BB0     		add	sp, sp, #172
 967              		@ sp needed
 968              	.LVL52:
 969              	.LVL53:
 197:Src/main.c    **** 
 970              		.loc 1 197 1 view .LVU251
 971 004a F0BD     		pop	{r4, r5, r6, r7, pc}
 972              	.L30:
 973              		.align	2
 974              	.L29:
 975 004c 00000000 		.word	.LC0
 976              		.cfi_endproc
 977              	.LFE41:
 979              		.section	.text.printcart_fire_nozzle_black,"ax",%progbits
 980              		.align	1
 981              		.global	printcart_fire_nozzle_black
 982              		.syntax unified
 983              		.code	16
 984              		.thumb_func
 985              		.fpu softvfp
 987              	printcart_fire_nozzle_black:
 988              	.LVL54:
 989              	.LFB42:
 222:Src/main.c    **** 	if (row) p+=168;
 990              		.loc 1 222 63 is_stmt 1 view -0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 112
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 222:Src/main.c    **** 	if (row) p+=168;
 994              		.loc 1 222 63 is_stmt 0 view .LVU253
 995 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 996              	.LCFI15:
 997              		.cfi_def_cfa_offset 20
 998              		.cfi_offset 4, -20
 999              		.cfi_offset 5, -16
 1000              		.cfi_offset 6, -12
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 9DB0     		sub	sp, sp, #116
 1004              	.LCFI16:
 1005              		.cfi_def_cfa_offset 136
 1006 0004 0500     		movs	r5, r0
 1007 0006 0E00     		movs	r6, r1
 223:Src/main.c    **** 	int j=p/14;
 1008              		.loc 1 223 2 is_stmt 1 view .LVU254
ARM GAS  /tmp/ccnUMBHt.s 			page 50


 223:Src/main.c    **** 	int j=p/14;
 1009              		.loc 1 223 5 is_stmt 0 view .LVU255
 1010 0008 002A     		cmp	r2, #0
 1011 000a 00D0     		beq	.L32
 223:Src/main.c    **** 	int j=p/14;
 1012              		.loc 1 223 11 is_stmt 1 discriminator 1 view .LVU256
 223:Src/main.c    **** 	int j=p/14;
 1013              		.loc 1 223 12 is_stmt 0 discriminator 1 view .LVU257
 1014 000c A836     		adds	r6, r6, #168
 1015              	.LVL55:
 1016              	.L32:
 224:Src/main.c    **** 	int k=13-(p%14);
 1017              		.loc 1 224 2 is_stmt 1 view .LVU258
 224:Src/main.c    **** 	int k=13-(p%14);
 1018              		.loc 1 224 6 is_stmt 0 view .LVU259
 1019 000e 0E21     		movs	r1, #14
 1020 0010 3000     		movs	r0, r6
 1021              	.LVL56:
 224:Src/main.c    **** 	int k=13-(p%14);
 1022              		.loc 1 224 6 view .LVU260
 1023 0012 FFF7FEFF 		bl	__aeabi_idiv
 1024              	.LVL57:
 224:Src/main.c    **** 	int k=13-(p%14);
 1025              		.loc 1 224 6 view .LVU261
 1026 0016 0400     		movs	r4, r0
 1027              	.LVL58:
 225:Src/main.c    **** 
 1028              		.loc 1 225 2 is_stmt 1 view .LVU262
 225:Src/main.c    **** 
 1029              		.loc 1 225 13 is_stmt 0 view .LVU263
 1030 0018 0E21     		movs	r1, #14
 1031 001a 3000     		movs	r0, r6
 1032              	.LVL59:
 225:Src/main.c    **** 
 1033              		.loc 1 225 13 view .LVU264
 1034 001c FFF7FEFF 		bl	__aeabi_idivmod
 1035              	.LVL60:
 225:Src/main.c    **** 
 1036              		.loc 1 225 6 view .LVU265
 1037 0020 0D27     		movs	r7, #13
 1038 0022 7F1A     		subs	r7, r7, r1
 1039              	.LVL61:
 227:Src/main.c    **** 		{4,12,10,2,8,0,6,13,7,1,9,3,11,5},
 1040              		.loc 1 227 2 is_stmt 1 view .LVU266
 227:Src/main.c    **** 		{4,12,10,2,8,0,6,13,7,1,9,3,11,5},
 1041              		.loc 1 227 12 is_stmt 0 view .LVU267
 1042 0024 1149     		ldr	r1, .L33
 1043 0026 7022     		movs	r2, #112
 1044 0028 2831     		adds	r1, r1, #40
 1045 002a 6846     		mov	r0, sp
 1046 002c FFF7FEFF 		bl	memcpy
 1047              	.LVL62:
 232:Src/main.c    **** }
 1048              		.loc 1 232 2 is_stmt 1 view .LVU268
 232:Src/main.c    **** }
 1049              		.loc 1 232 13 is_stmt 0 view .LVU269
 1050 0030 0F4A     		ldr	r2, .L33+4
ARM GAS  /tmp/ccnUMBHt.s 			page 51


 1051 0032 6000     		lsls	r0, r4, #1
 1052 0034 0619     		adds	r6, r0, r4
 1053              	.LVL63:
 232:Src/main.c    **** }
 1054              		.loc 1 232 13 view .LVU270
 1055 0036 B600     		lsls	r6, r6, #2
 1056 0038 9619     		adds	r6, r2, r6
 1057 003a B368     		ldr	r3, [r6, #8]
 232:Src/main.c    **** }
 1058              		.loc 1 232 20 view .LVU271
 1059 003c D900     		lsls	r1, r3, #3
 1060 003e C91A     		subs	r1, r1, r3
 1061 0040 4900     		lsls	r1, r1, #1
 1062 0042 C919     		adds	r1, r1, r7
 1063 0044 8900     		lsls	r1, r1, #2
 1064 0046 6B46     		mov	r3, sp
 1065 0048 CB58     		ldr	r3, [r1, r3]
 232:Src/main.c    **** }
 1066              		.loc 1 232 23 view .LVU272
 1067 004a 1B01     		lsls	r3, r3, #4
 232:Src/main.c    **** }
 1068              		.loc 1 232 28 view .LVU273
 1069 004c 0133     		adds	r3, r3, #1
 232:Src/main.c    **** }
 1070              		.loc 1 232 39 view .LVU274
 1071 004e 7168     		ldr	r1, [r6, #4]
 232:Src/main.c    **** }
 1072              		.loc 1 232 32 view .LVU275
 1073 0050 5B18     		adds	r3, r3, r1
 232:Src/main.c    **** }
 1074              		.loc 1 232 3 view .LVU276
 1075 0052 5B00     		lsls	r3, r3, #1
 232:Src/main.c    **** }
 1076              		.loc 1 232 62 view .LVU277
 1077 0054 0019     		adds	r0, r0, r4
 1078 0056 8000     		lsls	r0, r0, #2
 1079 0058 8258     		ldr	r2, [r0, r2]
 232:Src/main.c    **** }
 1080              		.loc 1 232 65 view .LVU278
 1081 005a 0D32     		adds	r2, r2, #13
 232:Src/main.c    **** }
 1082              		.loc 1 232 54 view .LVU279
 1083 005c 0121     		movs	r1, #1
 1084 005e 9140     		lsls	r1, r1, r2
 232:Src/main.c    **** }
 1085              		.loc 1 232 45 view .LVU280
 1086 0060 EA5A     		ldrh	r2, [r5, r3]
 1087 0062 8A43     		bics	r2, r1
 1088 0064 EA52     		strh	r2, [r5, r3]
 233:Src/main.c    **** 
 1089              		.loc 1 233 1 view .LVU281
 1090 0066 1DB0     		add	sp, sp, #116
 1091              		@ sp needed
 1092              	.LVL64:
 1093              	.LVL65:
 1094              	.LVL66:
 233:Src/main.c    **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 52


 1095              		.loc 1 233 1 view .LVU282
 1096 0068 F0BD     		pop	{r4, r5, r6, r7, pc}
 1097              	.L34:
 1098 006a C046     		.align	2
 1099              	.L33:
 1100 006c 80000000 		.word	.LANCHOR2
 1101 0070 00000000 		.word	ni
 1102              		.cfi_endproc
 1103              	.LFE42:
 1105              		.section	.text.setRow,"ax",%progbits
 1106              		.align	1
 1107              		.global	setRow
 1108              		.syntax unified
 1109              		.code	16
 1110              		.thumb_func
 1111              		.fpu softvfp
 1113              	setRow:
 1114              	.LVL67:
 1115              	.LFB43:
 235:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 9; i += 16) {
 1116              		.loc 1 235 23 is_stmt 1 view -0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 235:Src/main.c    ****   for (uint16_t i = 0; i < data_len - 9; i += 16) {
 1120              		.loc 1 235 23 is_stmt 0 view .LVU284
 1121 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1122              	.LCFI17:
 1123              		.cfi_def_cfa_offset 20
 1124              		.cfi_offset 4, -20
 1125              		.cfi_offset 5, -16
 1126              		.cfi_offset 6, -12
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1129              		.loc 1 236 3 is_stmt 1 view .LVU285
 1130              	.LBB28:
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1131              		.loc 1 236 8 view .LVU286
 1132              	.LVL68:
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1133              		.loc 1 236 17 is_stmt 0 view .LVU287
 1134 0002 0026     		movs	r6, #0
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1135              		.loc 1 236 3 view .LVU288
 1136 0004 13E0     		b	.L36
 1137              	.LVL69:
 1138              	.L37:
 1139              	.LBB29:
 238:Src/main.c    ****       my_data_buf[i+j+1] &= ~(1UL << (c+12));
 1140              		.loc 1 238 7 is_stmt 1 discriminator 3 view .LVU289
 238:Src/main.c    ****       my_data_buf[i+j+1] &= ~(1UL << (c+12));
 1141              		.loc 1 238 26 is_stmt 0 discriminator 3 view .LVU290
 1142 0006 7218     		adds	r2, r6, r1
 1143 0008 0132     		adds	r2, r2, #1
 1144 000a 0B4D     		ldr	r5, .L41
 1145 000c 5200     		lsls	r2, r2, #1
ARM GAS  /tmp/ccnUMBHt.s 			page 53


 1146 000e 545B     		ldrh	r4, [r2, r5]
 1147 0010 0A4B     		ldr	r3, .L41+4
 1148 0012 2343     		orrs	r3, r4
 1149 0014 9BB2     		uxth	r3, r3
 239:Src/main.c    ****     }
 1150              		.loc 1 239 7 is_stmt 1 discriminator 3 view .LVU291
 239:Src/main.c    ****     }
 1151              		.loc 1 239 40 is_stmt 0 discriminator 3 view .LVU292
 1152 0016 0700     		movs	r7, r0
 1153 0018 0C37     		adds	r7, r7, #12
 239:Src/main.c    ****     }
 1154              		.loc 1 239 35 discriminator 3 view .LVU293
 1155 001a 0124     		movs	r4, #1
 1156 001c BC40     		lsls	r4, r4, r7
 239:Src/main.c    ****     }
 1157              		.loc 1 239 26 discriminator 3 view .LVU294
 1158 001e A343     		bics	r3, r4
 1159 0020 5353     		strh	r3, [r2, r5]
 237:Src/main.c    ****       my_data_buf[i+j+1] |= 0b1110000000000000;
 1160              		.loc 1 237 32 discriminator 3 view .LVU295
 1161 0022 0131     		adds	r1, r1, #1
 1162              	.LVL70:
 237:Src/main.c    ****       my_data_buf[i+j+1] |= 0b1110000000000000;
 1163              		.loc 1 237 32 discriminator 3 view .LVU296
 1164 0024 C9B2     		uxtb	r1, r1
 1165              	.LVL71:
 1166              	.L38:
 237:Src/main.c    ****       my_data_buf[i+j+1] |= 0b1110000000000000;
 1167              		.loc 1 237 5 discriminator 1 view .LVU297
 1168 0026 0629     		cmp	r1, #6
 1169 0028 EDD9     		bls	.L37
 1170              	.LBE29:
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1171              		.loc 1 236 44 discriminator 2 view .LVU298
 1172 002a 1036     		adds	r6, r6, #16
 1173              	.LVL72:
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1174              		.loc 1 236 44 discriminator 2 view .LVU299
 1175 002c B6B2     		uxth	r6, r6
 1176              	.LVL73:
 1177              	.L36:
 236:Src/main.c    ****     for(uint8_t j = 0; j < 7; j++){
 1178              		.loc 1 236 3 discriminator 1 view .LVU300
 1179 002e E62E     		cmp	r6, #230
 1180 0030 01D8     		bhi	.L40
 1181              	.LBB30:
 237:Src/main.c    ****       my_data_buf[i+j+1] |= 0b1110000000000000;
 1182              		.loc 1 237 17 view .LVU301
 1183 0032 0021     		movs	r1, #0
 1184 0034 F7E7     		b	.L38
 1185              	.L40:
 1186              	.LBE30:
 1187              	.LBE28:
 242:Src/main.c    **** 
 1188              		.loc 1 242 1 view .LVU302
 1189              		@ sp needed
 1190              	.LVL74:
ARM GAS  /tmp/ccnUMBHt.s 			page 54


 242:Src/main.c    **** 
 1191              		.loc 1 242 1 view .LVU303
 1192 0036 F0BD     		pop	{r4, r5, r6, r7, pc}
 1193              	.L42:
 1194              		.align	2
 1195              	.L41:
 1196 0038 00000000 		.word	my_data_buf
 1197 003c 00E0FFFF 		.word	-8192
 1198              		.cfi_endproc
 1199              	.LFE43:
 1201              		.section	.text.clearWav,"ax",%progbits
 1202              		.align	1
 1203              		.global	clearWav
 1204              		.syntax unified
 1205              		.code	16
 1206              		.thumb_func
 1207              		.fpu softvfp
 1209              	clearWav:
 1210              	.LVL75:
 1211              	.LFB44:
 245:Src/main.c    ****   //memset(my_data_buf, 0xFFFF, data_len*2);
 1212              		.loc 1 245 41 is_stmt 1 view -0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 0
 1215              		@ frame_needed = 0, uses_anonymous_args = 0
 245:Src/main.c    ****   //memset(my_data_buf, 0xFFFF, data_len*2);
 1216              		.loc 1 245 41 is_stmt 0 view .LVU305
 1217 0000 70B5     		push	{r4, r5, r6, lr}
 1218              	.LCFI18:
 1219              		.cfi_def_cfa_offset 16
 1220              		.cfi_offset 4, -16
 1221              		.cfi_offset 5, -12
 1222              		.cfi_offset 6, -8
 1223              		.cfi_offset 14, -4
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1224              		.loc 1 247 3 is_stmt 1 view .LVU306
 1225              	.LBB31:
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1226              		.loc 1 247 8 view .LVU307
 1227              	.LVL76:
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1228              		.loc 1 247 17 is_stmt 0 view .LVU308
 1229 0002 0023     		movs	r3, #0
 1230              	.LVL77:
 1231              	.L44:
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1232              		.loc 1 247 3 discriminator 1 view .LVU309
 1233 0004 8B42     		cmp	r3, r1
 1234 0006 43D2     		bcs	.L46
 248:Src/main.c    ****     d[i + 1]  = 0b1110010000000001;
 1235              		.loc 1 248 5 is_stmt 1 discriminator 3 view .LVU310
 248:Src/main.c    ****     d[i + 1]  = 0b1110010000000001;
 1236              		.loc 1 248 6 is_stmt 0 discriminator 3 view .LVU311
 1237 0008 5C00     		lsls	r4, r3, #1
 248:Src/main.c    ****     d[i + 1]  = 0b1110010000000001;
 1238              		.loc 1 248 15 discriminator 3 view .LVU312
 1239 000a 434A     		ldr	r2, .L47
ARM GAS  /tmp/ccnUMBHt.s 			page 55


 1240 000c 0253     		strh	r2, [r0, r4]
 249:Src/main.c    ****     d[i + 2]  = 0b1110010000100000; // Start
 1241              		.loc 1 249 5 is_stmt 1 discriminator 3 view .LVU313
 249:Src/main.c    ****     d[i + 2]  = 0b1110010000100000; // Start
 1242              		.loc 1 249 6 is_stmt 0 discriminator 3 view .LVU314
 1243 000e 5C1C     		adds	r4, r3, #1
 1244 0010 6400     		lsls	r4, r4, #1
 249:Src/main.c    ****     d[i + 2]  = 0b1110010000100000; // Start
 1245              		.loc 1 249 15 discriminator 3 view .LVU315
 1246 0012 424D     		ldr	r5, .L47+4
 1247 0014 0553     		strh	r5, [r0, r4]
 250:Src/main.c    ****     d[i + 3]  = 0b1110010000000001;
 1248              		.loc 1 250 5 is_stmt 1 discriminator 3 view .LVU316
 250:Src/main.c    ****     d[i + 3]  = 0b1110010000000001;
 1249              		.loc 1 250 6 is_stmt 0 discriminator 3 view .LVU317
 1250 0016 9C1C     		adds	r4, r3, #2
 1251 0018 6400     		lsls	r4, r4, #1
 250:Src/main.c    ****     d[i + 3]  = 0b1110010000000001;
 1252              		.loc 1 250 15 discriminator 3 view .LVU318
 1253 001a 414E     		ldr	r6, .L47+8
 1254 001c 0653     		strh	r6, [r0, r4]
 251:Src/main.c    ****     d[i + 4]  = 0b1110000000001000;
 1255              		.loc 1 251 5 is_stmt 1 discriminator 3 view .LVU319
 251:Src/main.c    ****     d[i + 4]  = 0b1110000000001000;
 1256              		.loc 1 251 6 is_stmt 0 discriminator 3 view .LVU320
 1257 001e DC1C     		adds	r4, r3, #3
 1258 0020 6400     		lsls	r4, r4, #1
 251:Src/main.c    ****     d[i + 4]  = 0b1110000000001000;
 1259              		.loc 1 251 15 discriminator 3 view .LVU321
 1260 0022 0553     		strh	r5, [r0, r4]
 252:Src/main.c    ****     d[i + 5]  = 0b1110000000000001;
 1261              		.loc 1 252 5 is_stmt 1 discriminator 3 view .LVU322
 252:Src/main.c    ****     d[i + 5]  = 0b1110000000000001;
 1262              		.loc 1 252 6 is_stmt 0 discriminator 3 view .LVU323
 1263 0024 1C1D     		adds	r4, r3, #4
 1264 0026 6400     		lsls	r4, r4, #1
 252:Src/main.c    ****     d[i + 5]  = 0b1110000000000001;
 1265              		.loc 1 252 15 discriminator 3 view .LVU324
 1266 0028 3E4D     		ldr	r5, .L47+12
 1267 002a 0553     		strh	r5, [r0, r4]
 253:Src/main.c    ****     d[i + 6]  = 0b1110000000000010;
 1268              		.loc 1 253 5 is_stmt 1 discriminator 3 view .LVU325
 253:Src/main.c    ****     d[i + 6]  = 0b1110000000000010;
 1269              		.loc 1 253 6 is_stmt 0 discriminator 3 view .LVU326
 1270 002c 5C1D     		adds	r4, r3, #5
 1271 002e 6400     		lsls	r4, r4, #1
 253:Src/main.c    ****     d[i + 6]  = 0b1110000000000010;
 1272              		.loc 1 253 15 discriminator 3 view .LVU327
 1273 0030 3D4D     		ldr	r5, .L47+16
 1274 0032 0553     		strh	r5, [r0, r4]
 254:Src/main.c    ****     d[i + 7]  = 0b1110000010000001;
 1275              		.loc 1 254 5 is_stmt 1 discriminator 3 view .LVU328
 254:Src/main.c    ****     d[i + 7]  = 0b1110000010000001;
 1276              		.loc 1 254 6 is_stmt 0 discriminator 3 view .LVU329
 1277 0034 9C1D     		adds	r4, r3, #6
 1278 0036 6400     		lsls	r4, r4, #1
 254:Src/main.c    ****     d[i + 7]  = 0b1110000010000001;
ARM GAS  /tmp/ccnUMBHt.s 			page 56


 1279              		.loc 1 254 15 discriminator 3 view .LVU330
 1280 0038 3C4D     		ldr	r5, .L47+20
 1281 003a 0553     		strh	r5, [r0, r4]
 255:Src/main.c    ****     d[i + 8]  = 0b1110000010010000;
 1282              		.loc 1 255 5 is_stmt 1 discriminator 3 view .LVU331
 255:Src/main.c    ****     d[i + 8]  = 0b1110000010010000;
 1283              		.loc 1 255 6 is_stmt 0 discriminator 3 view .LVU332
 1284 003c DC1D     		adds	r4, r3, #7
 1285 003e 6400     		lsls	r4, r4, #1
 255:Src/main.c    ****     d[i + 8]  = 0b1110000010010000;
 1286              		.loc 1 255 15 discriminator 3 view .LVU333
 1287 0040 3B4D     		ldr	r5, .L47+24
 1288 0042 0553     		strh	r5, [r0, r4]
 256:Src/main.c    ****     d[i + 9]  = 0b1110000010000100; // End
 1289              		.loc 1 256 5 is_stmt 1 discriminator 3 view .LVU334
 256:Src/main.c    ****     d[i + 9]  = 0b1110000010000100; // End
 1290              		.loc 1 256 6 is_stmt 0 discriminator 3 view .LVU335
 1291 0044 1C00     		movs	r4, r3
 1292 0046 0834     		adds	r4, r4, #8
 1293 0048 6400     		lsls	r4, r4, #1
 256:Src/main.c    ****     d[i + 9]  = 0b1110000010000100; // End
 1294              		.loc 1 256 15 discriminator 3 view .LVU336
 1295 004a 3A4D     		ldr	r5, .L47+28
 1296 004c 0553     		strh	r5, [r0, r4]
 257:Src/main.c    ****     d[i + 10] = 0b1110000000000000;
 1297              		.loc 1 257 5 is_stmt 1 discriminator 3 view .LVU337
 257:Src/main.c    ****     d[i + 10] = 0b1110000000000000;
 1298              		.loc 1 257 6 is_stmt 0 discriminator 3 view .LVU338
 1299 004e 1C00     		movs	r4, r3
 1300 0050 0934     		adds	r4, r4, #9
 1301 0052 6400     		lsls	r4, r4, #1
 257:Src/main.c    ****     d[i + 10] = 0b1110000000000000;
 1302              		.loc 1 257 15 discriminator 3 view .LVU339
 1303 0054 384D     		ldr	r5, .L47+32
 1304 0056 0553     		strh	r5, [r0, r4]
 258:Src/main.c    ****     d[i + 11] = 0b1110000001000000;
 1305              		.loc 1 258 5 is_stmt 1 discriminator 3 view .LVU340
 258:Src/main.c    ****     d[i + 11] = 0b1110000001000000;
 1306              		.loc 1 258 6 is_stmt 0 discriminator 3 view .LVU341
 1307 0058 1C00     		movs	r4, r3
 1308 005a 0A34     		adds	r4, r4, #10
 1309 005c 6400     		lsls	r4, r4, #1
 258:Src/main.c    ****     d[i + 11] = 0b1110000001000000;
 1310              		.loc 1 258 15 discriminator 3 view .LVU342
 1311 005e 0253     		strh	r2, [r0, r4]
 259:Src/main.c    ****     d[i + 12] = 0b1110000001000000;
 1312              		.loc 1 259 5 is_stmt 1 discriminator 3 view .LVU343
 259:Src/main.c    ****     d[i + 12] = 0b1110000001000000;
 1313              		.loc 1 259 6 is_stmt 0 discriminator 3 view .LVU344
 1314 0060 1C00     		movs	r4, r3
 1315 0062 0B34     		adds	r4, r4, #11
 1316 0064 6400     		lsls	r4, r4, #1
 259:Src/main.c    ****     d[i + 12] = 0b1110000001000000;
 1317              		.loc 1 259 15 discriminator 3 view .LVU345
 1318 0066 354D     		ldr	r5, .L47+36
 1319 0068 0553     		strh	r5, [r0, r4]
 260:Src/main.c    ****     d[i + 13] = 0b1110000001000000;
ARM GAS  /tmp/ccnUMBHt.s 			page 57


 1320              		.loc 1 260 5 is_stmt 1 discriminator 3 view .LVU346
 260:Src/main.c    ****     d[i + 13] = 0b1110000001000000;
 1321              		.loc 1 260 6 is_stmt 0 discriminator 3 view .LVU347
 1322 006a 1C00     		movs	r4, r3
 1323 006c 0C34     		adds	r4, r4, #12
 1324 006e 6400     		lsls	r4, r4, #1
 260:Src/main.c    ****     d[i + 13] = 0b1110000001000000;
 1325              		.loc 1 260 15 discriminator 3 view .LVU348
 1326 0070 0553     		strh	r5, [r0, r4]
 261:Src/main.c    ****     d[i + 14] = 0b1110000000000000;
 1327              		.loc 1 261 5 is_stmt 1 discriminator 3 view .LVU349
 261:Src/main.c    ****     d[i + 14] = 0b1110000000000000;
 1328              		.loc 1 261 6 is_stmt 0 discriminator 3 view .LVU350
 1329 0072 1C00     		movs	r4, r3
 1330 0074 0D34     		adds	r4, r4, #13
 1331 0076 6400     		lsls	r4, r4, #1
 261:Src/main.c    ****     d[i + 14] = 0b1110000000000000;
 1332              		.loc 1 261 15 discriminator 3 view .LVU351
 1333 0078 0553     		strh	r5, [r0, r4]
 262:Src/main.c    ****     d[i + 15] = 0b1110000000000000;
 1334              		.loc 1 262 5 is_stmt 1 discriminator 3 view .LVU352
 262:Src/main.c    ****     d[i + 15] = 0b1110000000000000;
 1335              		.loc 1 262 6 is_stmt 0 discriminator 3 view .LVU353
 1336 007a 1C00     		movs	r4, r3
 1337 007c 0E34     		adds	r4, r4, #14
 1338 007e 6400     		lsls	r4, r4, #1
 262:Src/main.c    ****     d[i + 15] = 0b1110000000000000;
 1339              		.loc 1 262 15 discriminator 3 view .LVU354
 1340 0080 0253     		strh	r2, [r0, r4]
 263:Src/main.c    ****   }
 1341              		.loc 1 263 5 is_stmt 1 discriminator 3 view .LVU355
 263:Src/main.c    ****   }
 1342              		.loc 1 263 6 is_stmt 0 discriminator 3 view .LVU356
 1343 0082 1C00     		movs	r4, r3
 1344 0084 0F34     		adds	r4, r4, #15
 1345 0086 6400     		lsls	r4, r4, #1
 263:Src/main.c    ****   }
 1346              		.loc 1 263 15 discriminator 3 view .LVU357
 1347 0088 0253     		strh	r2, [r0, r4]
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1348              		.loc 1 247 35 discriminator 3 view .LVU358
 1349 008a 1033     		adds	r3, r3, #16
 1350              	.LVL78:
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1351              		.loc 1 247 35 discriminator 3 view .LVU359
 1352 008c 9BB2     		uxth	r3, r3
 1353              	.LVL79:
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1354              		.loc 1 247 35 discriminator 3 view .LVU360
 1355 008e B9E7     		b	.L44
 1356              	.L46:
 247:Src/main.c    ****     d[i + 0]  = 0b1110000000000000;
 1357              		.loc 1 247 35 discriminator 3 view .LVU361
 1358              	.LBE31:
 265:Src/main.c    ****   d[len - 16 + 1]  = 0b1110010000000000;
 1359              		.loc 1 265 3 is_stmt 1 view .LVU362
 265:Src/main.c    ****   d[len - 16 + 1]  = 0b1110010000000000;
ARM GAS  /tmp/ccnUMBHt.s 			page 58


 1360              		.loc 1 265 9 is_stmt 0 view .LVU363
 1361 0090 0A00     		movs	r2, r1
 1362 0092 103A     		subs	r2, r2, #16
 265:Src/main.c    ****   d[len - 16 + 1]  = 0b1110010000000000;
 1363              		.loc 1 265 4 view .LVU364
 1364 0094 5200     		lsls	r2, r2, #1
 265:Src/main.c    ****   d[len - 16 + 1]  = 0b1110010000000000;
 1365              		.loc 1 265 20 view .LVU365
 1366 0096 2A4B     		ldr	r3, .L47+40
 1367              	.LVL80:
 265:Src/main.c    ****   d[len - 16 + 1]  = 0b1110010000000000;
 1368              		.loc 1 265 20 view .LVU366
 1369 0098 8352     		strh	r3, [r0, r2]
 266:Src/main.c    ****   d[len - 16 + 2]  = 0b1110010000000000;
 1370              		.loc 1 266 3 is_stmt 1 view .LVU367
 266:Src/main.c    ****   d[len - 16 + 2]  = 0b1110010000000000;
 1371              		.loc 1 266 4 is_stmt 0 view .LVU368
 1372 009a 2A4A     		ldr	r2, .L47+44
 1373 009c 8A18     		adds	r2, r1, r2
 1374 009e 5200     		lsls	r2, r2, #1
 266:Src/main.c    ****   d[len - 16 + 2]  = 0b1110010000000000;
 1375              		.loc 1 266 20 view .LVU369
 1376 00a0 8352     		strh	r3, [r0, r2]
 267:Src/main.c    ****   d[len - 16 + 3]  = 0b1110000000000000;
 1377              		.loc 1 267 3 is_stmt 1 view .LVU370
 267:Src/main.c    ****   d[len - 16 + 3]  = 0b1110000000000000;
 1378              		.loc 1 267 4 is_stmt 0 view .LVU371
 1379 00a2 294A     		ldr	r2, .L47+48
 1380 00a4 8A18     		adds	r2, r1, r2
 1381 00a6 5200     		lsls	r2, r2, #1
 267:Src/main.c    ****   d[len - 16 + 3]  = 0b1110000000000000;
 1382              		.loc 1 267 20 view .LVU372
 1383 00a8 8352     		strh	r3, [r0, r2]
 268:Src/main.c    ****   d[len - 16 + 4]  = 0b1110010000000000;//01
 1384              		.loc 1 268 3 is_stmt 1 view .LVU373
 268:Src/main.c    ****   d[len - 16 + 4]  = 0b1110010000000000;//01
 1385              		.loc 1 268 4 is_stmt 0 view .LVU374
 1386 00aa 284A     		ldr	r2, .L47+52
 1387 00ac 8C18     		adds	r4, r1, r2
 1388 00ae 6400     		lsls	r4, r4, #1
 268:Src/main.c    ****   d[len - 16 + 4]  = 0b1110010000000000;//01
 1389              		.loc 1 268 20 view .LVU375
 1390 00b0 194A     		ldr	r2, .L47
 1391 00b2 0253     		strh	r2, [r0, r4]
 269:Src/main.c    ****   d[len - 16 + 5]  = 0b1110010000000000;
 1392              		.loc 1 269 3 is_stmt 1 view .LVU376
 269:Src/main.c    ****   d[len - 16 + 5]  = 0b1110010000000000;
 1393              		.loc 1 269 4 is_stmt 0 view .LVU377
 1394 00b4 264C     		ldr	r4, .L47+56
 1395 00b6 0C19     		adds	r4, r1, r4
 1396 00b8 6400     		lsls	r4, r4, #1
 269:Src/main.c    ****   d[len - 16 + 5]  = 0b1110010000000000;
 1397              		.loc 1 269 20 view .LVU378
 1398 00ba 0353     		strh	r3, [r0, r4]
 270:Src/main.c    ****   d[len - 16 + 6]  = 0b1110010000000000;
 1399              		.loc 1 270 3 is_stmt 1 view .LVU379
 270:Src/main.c    ****   d[len - 16 + 6]  = 0b1110010000000000;
ARM GAS  /tmp/ccnUMBHt.s 			page 59


 1400              		.loc 1 270 4 is_stmt 0 view .LVU380
 1401 00bc 254C     		ldr	r4, .L47+60
 1402 00be 0C19     		adds	r4, r1, r4
 1403 00c0 6400     		lsls	r4, r4, #1
 270:Src/main.c    ****   d[len - 16 + 6]  = 0b1110010000000000;
 1404              		.loc 1 270 20 view .LVU381
 1405 00c2 0353     		strh	r3, [r0, r4]
 271:Src/main.c    ****   d[len - 16 + 7]  = 0b1110000000000000;
 1406              		.loc 1 271 3 is_stmt 1 view .LVU382
 271:Src/main.c    ****   d[len - 16 + 7]  = 0b1110000000000000;
 1407              		.loc 1 271 4 is_stmt 0 view .LVU383
 1408 00c4 244C     		ldr	r4, .L47+64
 1409 00c6 0C19     		adds	r4, r1, r4
 1410 00c8 6400     		lsls	r4, r4, #1
 271:Src/main.c    ****   d[len - 16 + 7]  = 0b1110000000000000;
 1411              		.loc 1 271 20 view .LVU384
 1412 00ca 0353     		strh	r3, [r0, r4]
 272:Src/main.c    ****   d[len - 16 + 8]  = 0b1110010000000000;//02
 1413              		.loc 1 272 3 is_stmt 1 view .LVU385
 272:Src/main.c    ****   d[len - 16 + 8]  = 0b1110010000000000;//02
 1414              		.loc 1 272 4 is_stmt 0 view .LVU386
 1415 00cc 234C     		ldr	r4, .L47+68
 1416 00ce 0C19     		adds	r4, r1, r4
 1417 00d0 6400     		lsls	r4, r4, #1
 272:Src/main.c    ****   d[len - 16 + 8]  = 0b1110010000000000;//02
 1418              		.loc 1 272 20 view .LVU387
 1419 00d2 0253     		strh	r2, [r0, r4]
 273:Src/main.c    ****   d[len - 16 + 9]  = 0b1110010000000000;
 1420              		.loc 1 273 3 is_stmt 1 view .LVU388
 273:Src/main.c    ****   d[len - 16 + 9]  = 0b1110010000000000;
 1421              		.loc 1 273 4 is_stmt 0 view .LVU389
 1422 00d4 224C     		ldr	r4, .L47+72
 1423 00d6 0C19     		adds	r4, r1, r4
 1424 00d8 6400     		lsls	r4, r4, #1
 273:Src/main.c    ****   d[len - 16 + 9]  = 0b1110010000000000;
 1425              		.loc 1 273 20 view .LVU390
 1426 00da 0353     		strh	r3, [r0, r4]
 274:Src/main.c    ****   d[len - 16 + 10] = 0b1110010000000000;
 1427              		.loc 1 274 3 is_stmt 1 view .LVU391
 274:Src/main.c    ****   d[len - 16 + 10] = 0b1110010000000000;
 1428              		.loc 1 274 4 is_stmt 0 view .LVU392
 1429 00dc 214C     		ldr	r4, .L47+76
 1430 00de 0C19     		adds	r4, r1, r4
 1431 00e0 6400     		lsls	r4, r4, #1
 274:Src/main.c    ****   d[len - 16 + 10] = 0b1110010000000000;
 1432              		.loc 1 274 20 view .LVU393
 1433 00e2 0353     		strh	r3, [r0, r4]
 275:Src/main.c    ****   d[len - 16 + 11] = 0b1110000000000000;
 1434              		.loc 1 275 3 is_stmt 1 view .LVU394
 275:Src/main.c    ****   d[len - 16 + 11] = 0b1110000000000000;
 1435              		.loc 1 275 4 is_stmt 0 view .LVU395
 1436 00e4 204C     		ldr	r4, .L47+80
 1437 00e6 0C19     		adds	r4, r1, r4
 1438 00e8 6400     		lsls	r4, r4, #1
 275:Src/main.c    ****   d[len - 16 + 11] = 0b1110000000000000;
 1439              		.loc 1 275 20 view .LVU396
 1440 00ea 0353     		strh	r3, [r0, r4]
ARM GAS  /tmp/ccnUMBHt.s 			page 60


 276:Src/main.c    ****   d[len - 16 + 12] = 0b1110000000000000;//01
 1441              		.loc 1 276 3 is_stmt 1 view .LVU397
 276:Src/main.c    ****   d[len - 16 + 12] = 0b1110000000000000;//01
 1442              		.loc 1 276 4 is_stmt 0 view .LVU398
 1443 00ec 1F4C     		ldr	r4, .L47+84
 1444 00ee 0C19     		adds	r4, r1, r4
 1445 00f0 6400     		lsls	r4, r4, #1
 276:Src/main.c    ****   d[len - 16 + 12] = 0b1110000000000000;//01
 1446              		.loc 1 276 20 view .LVU399
 1447 00f2 0253     		strh	r2, [r0, r4]
 277:Src/main.c    ****   d[len - 16 + 13] = 0b1110010000000000;
 1448              		.loc 1 277 3 is_stmt 1 view .LVU400
 277:Src/main.c    ****   d[len - 16 + 13] = 0b1110010000000000;
 1449              		.loc 1 277 4 is_stmt 0 view .LVU401
 1450 00f4 1E4C     		ldr	r4, .L47+88
 1451 00f6 0C19     		adds	r4, r1, r4
 1452 00f8 6400     		lsls	r4, r4, #1
 277:Src/main.c    ****   d[len - 16 + 13] = 0b1110010000000000;
 1453              		.loc 1 277 20 view .LVU402
 1454 00fa 0253     		strh	r2, [r0, r4]
 278:Src/main.c    ****   d[len - 16 + 14] = 0b1110010000000000;
 1455              		.loc 1 278 3 is_stmt 1 view .LVU403
 278:Src/main.c    ****   d[len - 16 + 14] = 0b1110010000000000;
 1456              		.loc 1 278 4 is_stmt 0 view .LVU404
 1457 00fc 1D4A     		ldr	r2, .L47+92
 1458 00fe 8A18     		adds	r2, r1, r2
 1459 0100 5200     		lsls	r2, r2, #1
 278:Src/main.c    ****   d[len - 16 + 14] = 0b1110010000000000;
 1460              		.loc 1 278 20 view .LVU405
 1461 0102 8352     		strh	r3, [r0, r2]
 279:Src/main.c    ****   d[len - 16 + 15] = 0b1110010000000000;
 1462              		.loc 1 279 3 is_stmt 1 view .LVU406
 279:Src/main.c    ****   d[len - 16 + 15] = 0b1110010000000000;
 1463              		.loc 1 279 4 is_stmt 0 view .LVU407
 1464 0104 1C4A     		ldr	r2, .L47+96
 1465 0106 8A18     		adds	r2, r1, r2
 1466 0108 5200     		lsls	r2, r2, #1
 279:Src/main.c    ****   d[len - 16 + 15] = 0b1110010000000000;
 1467              		.loc 1 279 20 view .LVU408
 1468 010a 8352     		strh	r3, [r0, r2]
 280:Src/main.c    **** }
 1469              		.loc 1 280 3 is_stmt 1 view .LVU409
 280:Src/main.c    **** }
 1470              		.loc 1 280 4 is_stmt 0 view .LVU410
 1471 010c 1B4A     		ldr	r2, .L47+100
 1472 010e 9446     		mov	ip, r2
 1473 0110 6144     		add	r1, r1, ip
 1474              	.LVL81:
 280:Src/main.c    **** }
 1475              		.loc 1 280 4 view .LVU411
 1476 0112 4900     		lsls	r1, r1, #1
 280:Src/main.c    **** }
 1477              		.loc 1 280 20 view .LVU412
 1478 0114 4352     		strh	r3, [r0, r1]
 281:Src/main.c    **** 
 1479              		.loc 1 281 1 view .LVU413
 1480              		@ sp needed
ARM GAS  /tmp/ccnUMBHt.s 			page 61


 1481 0116 70BD     		pop	{r4, r5, r6, pc}
 1482              	.L48:
 1483              		.align	2
 1484              	.L47:
 1485 0118 00E0FFFF 		.word	-8192
 1486 011c 01E4FFFF 		.word	-7167
 1487 0120 20E4FFFF 		.word	-7136
 1488 0124 08E0FFFF 		.word	-8184
 1489 0128 01E0FFFF 		.word	-8191
 1490 012c 02E0FFFF 		.word	-8190
 1491 0130 81E0FFFF 		.word	-8063
 1492 0134 90E0FFFF 		.word	-8048
 1493 0138 84E0FFFF 		.word	-8060
 1494 013c 40E0FFFF 		.word	-8128
 1495 0140 00E4FFFF 		.word	-7168
 1496 0144 F1FFFF7F 		.word	2147483633
 1497 0148 F2FFFF7F 		.word	2147483634
 1498 014c F3FFFF7F 		.word	2147483635
 1499 0150 F4FFFF7F 		.word	2147483636
 1500 0154 F5FFFF7F 		.word	2147483637
 1501 0158 F6FFFF7F 		.word	2147483638
 1502 015c F7FFFF7F 		.word	2147483639
 1503 0160 F8FFFF7F 		.word	2147483640
 1504 0164 F9FFFF7F 		.word	2147483641
 1505 0168 FAFFFF7F 		.word	2147483642
 1506 016c FBFFFF7F 		.word	2147483643
 1507 0170 FCFFFF7F 		.word	2147483644
 1508 0174 FDFFFF7F 		.word	2147483645
 1509 0178 FEFFFF7F 		.word	2147483646
 1510 017c FFFFFF7F 		.word	2147483647
 1511              		.cfi_endproc
 1512              	.LFE44:
 1514              		.section	.text.startDMA,"ax",%progbits
 1515              		.align	1
 1516              		.global	startDMA
 1517              		.syntax unified
 1518              		.code	16
 1519              		.thumb_func
 1520              		.fpu softvfp
 1522              	startDMA:
 1523              	.LFB45:
 283:Src/main.c    ****   if (HAL_DMA_GetState(htim2.hdma[TIM_DMA_ID_CC1]) == HAL_DMA_STATE_BUSY) {
 1524              		.loc 1 283 21 is_stmt 1 view -0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1529              	.LCFI19:
 1530              		.cfi_def_cfa_offset 24
 1531              		.cfi_offset 3, -24
 1532              		.cfi_offset 4, -20
 1533              		.cfi_offset 5, -16
 1534              		.cfi_offset 6, -12
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 14, -4
 284:Src/main.c    ****     return;
 1537              		.loc 1 284 3 view .LVU415
ARM GAS  /tmp/ccnUMBHt.s 			page 62


 284:Src/main.c    ****     return;
 1538              		.loc 1 284 7 is_stmt 0 view .LVU416
 1539 0002 154B     		ldr	r3, .L51
 1540 0004 586A     		ldr	r0, [r3, #36]
 1541 0006 FFF7FEFF 		bl	HAL_DMA_GetState
 1542              	.LVL82:
 284:Src/main.c    ****     return;
 1543              		.loc 1 284 6 view .LVU417
 1544 000a 0228     		cmp	r0, #2
 1545 000c 22D0     		beq	.L49
 288:Src/main.c    ****     return;
 1546              		.loc 1 288 3 is_stmt 1 view .LVU418
 288:Src/main.c    ****     return;
 1547              		.loc 1 288 7 is_stmt 0 view .LVU419
 1548 000e 124B     		ldr	r3, .L51
 1549 0010 186B     		ldr	r0, [r3, #48]
 1550 0012 FFF7FEFF 		bl	HAL_DMA_GetState
 1551              	.LVL83:
 288:Src/main.c    ****     return;
 1552              		.loc 1 288 6 view .LVU420
 1553 0016 0228     		cmp	r0, #2
 1554 0018 1CD0     		beq	.L49
 292:Src/main.c    **** 
 1555              		.loc 1 292 3 is_stmt 1 view .LVU421
 292:Src/main.c    **** 
 1556              		.loc 1 292 13 is_stmt 0 view .LVU422
 1557 001a 8024     		movs	r4, #128
 1558 001c E405     		lsls	r4, r4, #23
 1559 001e 2368     		ldr	r3, [r4]
 1560 0020 0125     		movs	r5, #1
 1561 0022 2B40     		ands	r3, r5
 1562 0024 2360     		str	r3, [r4]
 294:Src/main.c    ****   HAL_DMA_Start_IT(htim2.hdma[TIM_DMA_ID_CC4], (uint32_t)my_data_buf,       (uint32_t)&GPIOC->ODR, 
 1563              		.loc 1 294 3 is_stmt 1 view .LVU423
 1564 0026 0D4F     		ldr	r7, .L51+4
 1565 0028 0B4E     		ldr	r6, .L51
 1566 002a F023     		movs	r3, #240
 1567 002c 0C4A     		ldr	r2, .L51+8
 1568 002e 3900     		movs	r1, r7
 1569 0030 706A     		ldr	r0, [r6, #36]
 1570 0032 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1571              	.LVL84:
 295:Src/main.c    **** 
 1572              		.loc 1 295 3 view .LVU424
 1573 0036 F023     		movs	r3, #240
 1574 0038 0A4A     		ldr	r2, .L51+12
 1575 003a 3900     		movs	r1, r7
 1576 003c 306B     		ldr	r0, [r6, #48]
 1577 003e FFF7FEFF 		bl	HAL_DMA_Start_IT
 1578              	.LVL85:
 297:Src/main.c    **** 
 1579              		.loc 1 297 3 view .LVU425
 297:Src/main.c    **** 
 1580              		.loc 1 297 13 is_stmt 0 view .LVU426
 1581 0042 0023     		movs	r3, #0
 1582 0044 6362     		str	r3, [r4, #36]
 299:Src/main.c    **** 
ARM GAS  /tmp/ccnUMBHt.s 			page 63


 1583              		.loc 1 299 3 is_stmt 1 view .LVU427
 1584 0046 1821     		movs	r1, #24
 1585 0048 3000     		movs	r0, r6
 1586 004a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1587              	.LVL86:
 301:Src/main.c    **** }
 1588              		.loc 1 301 3 view .LVU428
 301:Src/main.c    **** }
 1589              		.loc 1 301 13 is_stmt 0 view .LVU429
 1590 004e 2368     		ldr	r3, [r4]
 1591 0050 1D40     		ands	r5, r3
 1592 0052 2560     		str	r5, [r4]
 1593              	.L49:
 302:Src/main.c    **** 
 1594              		.loc 1 302 1 view .LVU430
 1595              		@ sp needed
 1596 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1597              	.L52:
 1598 0056 C046     		.align	2
 1599              	.L51:
 1600 0058 00000000 		.word	htim2
 1601 005c 00000000 		.word	my_data_buf
 1602 0060 14000048 		.word	1207959572
 1603 0064 14080048 		.word	1207961620
 1604              		.cfi_endproc
 1605              	.LFE45:
 1607              		.section	.text.SystemClock_Config,"ax",%progbits
 1608              		.align	1
 1609              		.global	SystemClock_Config
 1610              		.syntax unified
 1611              		.code	16
 1612              		.thumb_func
 1613              		.fpu softvfp
 1615              	SystemClock_Config:
 1616              	.LFB46:
 305:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1617              		.loc 1 305 1 is_stmt 1 view -0
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 96
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621 0000 10B5     		push	{r4, lr}
 1622              	.LCFI20:
 1623              		.cfi_def_cfa_offset 8
 1624              		.cfi_offset 4, -8
 1625              		.cfi_offset 14, -4
 1626 0002 98B0     		sub	sp, sp, #96
 1627              	.LCFI21:
 1628              		.cfi_def_cfa_offset 104
 306:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1629              		.loc 1 306 3 view .LVU432
 306:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1630              		.loc 1 306 22 is_stmt 0 view .LVU433
 1631 0004 3022     		movs	r2, #48
 1632 0006 0021     		movs	r1, #0
 1633 0008 0CA8     		add	r0, sp, #48
 1634 000a FFF7FEFF 		bl	memset
 1635              	.LVL87:
ARM GAS  /tmp/ccnUMBHt.s 			page 64


 307:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1636              		.loc 1 307 3 is_stmt 1 view .LVU434
 307:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1637              		.loc 1 307 22 is_stmt 0 view .LVU435
 1638 000e 1022     		movs	r2, #16
 1639 0010 0021     		movs	r1, #0
 1640 0012 07A8     		add	r0, sp, #28
 1641 0014 FFF7FEFF 		bl	memset
 1642              	.LVL88:
 308:Src/main.c    **** 
 1643              		.loc 1 308 3 is_stmt 1 view .LVU436
 308:Src/main.c    **** 
 1644              		.loc 1 308 28 is_stmt 0 view .LVU437
 1645 0018 1C22     		movs	r2, #28
 1646 001a 0021     		movs	r1, #0
 1647 001c 6846     		mov	r0, sp
 1648 001e FFF7FEFF 		bl	memset
 1649              	.LVL89:
 310:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1650              		.loc 1 310 3 is_stmt 1 view .LVU438
 310:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1651              		.loc 1 310 36 is_stmt 0 view .LVU439
 1652 0022 2223     		movs	r3, #34
 1653 0024 0B93     		str	r3, [sp, #44]
 311:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1654              		.loc 1 311 3 is_stmt 1 view .LVU440
 311:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1655              		.loc 1 311 30 is_stmt 0 view .LVU441
 1656 0026 213B     		subs	r3, r3, #33
 1657 0028 0E93     		str	r3, [sp, #56]
 312:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1658              		.loc 1 312 3 is_stmt 1 view .LVU442
 312:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1659              		.loc 1 312 32 is_stmt 0 view .LVU443
 1660 002a 1393     		str	r3, [sp, #76]
 313:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1661              		.loc 1 313 3 is_stmt 1 view .LVU444
 313:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1662              		.loc 1 313 41 is_stmt 0 view .LVU445
 1663 002c 0F33     		adds	r3, r3, #15
 1664 002e 0F93     		str	r3, [sp, #60]
 314:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1665              		.loc 1 314 3 is_stmt 1 view .LVU446
 315:Src/main.c    **** 
 1666              		.loc 1 315 3 view .LVU447
 1667 0030 0BA8     		add	r0, sp, #44
 1668 0032 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1669              	.LVL90:
 317:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 1670              		.loc 1 317 3 view .LVU448
 317:Src/main.c    ****                                 | RCC_CLOCKTYPE_PCLK1;
 1671              		.loc 1 317 31 is_stmt 0 view .LVU449
 1672 0036 0723     		movs	r3, #7
 1673 0038 0793     		str	r3, [sp, #28]
 319:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1674              		.loc 1 319 3 is_stmt 1 view .LVU450
 319:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccnUMBHt.s 			page 65


 1675              		.loc 1 319 34 is_stmt 0 view .LVU451
 1676 003a 043B     		subs	r3, r3, #4
 1677 003c 0893     		str	r3, [sp, #32]
 320:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1678              		.loc 1 320 3 is_stmt 1 view .LVU452
 320:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1679              		.loc 1 320 35 is_stmt 0 view .LVU453
 1680 003e 0024     		movs	r4, #0
 1681 0040 0994     		str	r4, [sp, #36]
 321:Src/main.c    **** 
 1682              		.loc 1 321 3 is_stmt 1 view .LVU454
 321:Src/main.c    **** 
 1683              		.loc 1 321 36 is_stmt 0 view .LVU455
 1684 0042 0A94     		str	r4, [sp, #40]
 323:Src/main.c    **** 
 1685              		.loc 1 323 3 is_stmt 1 view .LVU456
 1686 0044 0121     		movs	r1, #1
 1687 0046 07A8     		add	r0, sp, #28
 1688 0048 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1689              	.LVL91:
 325:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1690              		.loc 1 325 3 view .LVU457
 325:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1691              		.loc 1 325 38 is_stmt 0 view .LVU458
 1692 004c 8023     		movs	r3, #128
 1693 004e 9B02     		lsls	r3, r3, #10
 1694 0050 0093     		str	r3, [sp]
 326:Src/main.c    **** 
 1695              		.loc 1 326 3 is_stmt 1 view .LVU459
 326:Src/main.c    **** 
 1696              		.loc 1 326 35 is_stmt 0 view .LVU460
 1697 0052 0694     		str	r4, [sp, #24]
 328:Src/main.c    **** 
 1698              		.loc 1 328 3 is_stmt 1 view .LVU461
 1699 0054 6846     		mov	r0, sp
 1700 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1701              	.LVL92:
 330:Src/main.c    **** 
 1702              		.loc 1 330 1 is_stmt 0 view .LVU462
 1703 005a 18B0     		add	sp, sp, #96
 1704              		@ sp needed
 1705 005c 10BD     		pop	{r4, pc}
 1706              		.cfi_endproc
 1707              	.LFE46:
 1709              		.section	.text.main,"ax",%progbits
 1710              		.align	1
 1711              		.global	main
 1712              		.syntax unified
 1713              		.code	16
 1714              		.thumb_func
 1715              		.fpu softvfp
 1717              	main:
 1718              	.LFB40:
  59:Src/main.c    **** 
 1719              		.loc 1 59 1 is_stmt 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccnUMBHt.s 			page 66


 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723 0000 70B5     		push	{r4, r5, r6, lr}
 1724              	.LCFI22:
 1725              		.cfi_def_cfa_offset 16
 1726              		.cfi_offset 4, -16
 1727              		.cfi_offset 5, -12
 1728              		.cfi_offset 6, -8
 1729              		.cfi_offset 14, -4
  61:Src/main.c    **** 
 1730              		.loc 1 61 3 view .LVU464
 1731 0002 FFF7FEFF 		bl	HAL_Init
 1732              	.LVL93:
  63:Src/main.c    **** 
 1733              		.loc 1 63 3 view .LVU465
 1734 0006 FFF7FEFF 		bl	SystemClock_Config
 1735              	.LVL94:
  65:Src/main.c    ****   MX_DMA_Init();
 1736              		.loc 1 65 3 view .LVU466
 1737 000a FFF7FEFF 		bl	MX_GPIO_Init
 1738              	.LVL95:
  66:Src/main.c    ****   MX_TIM1_Init();
 1739              		.loc 1 66 3 view .LVU467
 1740 000e FFF7FEFF 		bl	MX_DMA_Init
 1741              	.LVL96:
  67:Src/main.c    ****   MX_TIM2_Init();
 1742              		.loc 1 67 3 view .LVU468
 1743 0012 FFF7FEFF 		bl	MX_TIM1_Init
 1744              	.LVL97:
  68:Src/main.c    ****   MX_USART3_UART_Init();
 1745              		.loc 1 68 3 view .LVU469
 1746 0016 FFF7FEFF 		bl	MX_TIM2_Init
 1747              	.LVL98:
  69:Src/main.c    ****   MX_USB_DEVICE_Init();
 1748              		.loc 1 69 3 view .LVU470
 1749 001a FFF7FEFF 		bl	MX_USART3_UART_Init
 1750              	.LVL99:
  70:Src/main.c    **** 
 1751              		.loc 1 70 3 view .LVU471
 1752 001e FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1753              	.LVL100:
  72:Src/main.c    ****     dfu_otter_bootloader();
 1754              		.loc 1 72 3 view .LVU472
  72:Src/main.c    ****     dfu_otter_bootloader();
 1755              		.loc 1 72 6 is_stmt 0 view .LVU473
 1756 0022 8021     		movs	r1, #128
 1757 0024 4900     		lsls	r1, r1, #1
 1758 0026 2848     		ldr	r0, .L63
 1759 0028 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1760              	.LVL101:
  72:Src/main.c    ****     dfu_otter_bootloader();
 1761              		.loc 1 72 5 view .LVU474
 1762 002c 0028     		cmp	r0, #0
 1763 002e 01D0     		beq	.L55
  73:Src/main.c    ****   }
 1764              		.loc 1 73 5 is_stmt 1 view .LVU475
 1765 0030 FFF7FEFF 		bl	dfu_otter_bootloader
 1766              	.LVL102:
ARM GAS  /tmp/ccnUMBHt.s 			page 67


 1767              	.L55:
  76:Src/main.c    **** 
 1768              		.loc 1 76 3 view .LVU476
 1769 0034 0122     		movs	r2, #1
 1770 0036 0221     		movs	r1, #2
 1771 0038 2348     		ldr	r0, .L63
 1772 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1773              	.LVL103:
 151:Src/main.c    **** 
 1774              		.loc 1 151 3 view .LVU477
 1775 003e F021     		movs	r1, #240
 1776 0040 2248     		ldr	r0, .L63+4
 1777 0042 FFF7FEFF 		bl	clearWav
 1778              	.LVL104:
 153:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1779              		.loc 1 153 3 view .LVU478
 153:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1780              		.loc 1 153 13 is_stmt 0 view .LVU479
 1781 0046 224A     		ldr	r2, .L63+8
 1782 0048 536A     		ldr	r3, [r2, #36]
 153:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC1);
 1783              		.loc 1 153 48 view .LVU480
 1784 004a 2249     		ldr	r1, .L63+12
 1785 004c 9962     		str	r1, [r3, #40]
 154:Src/main.c    **** 
 1786              		.loc 1 154 3 is_stmt 1 view .LVU481
 1787 004e 1368     		ldr	r3, [r2]
 1788 0050 D868     		ldr	r0, [r3, #12]
 1789 0052 8021     		movs	r1, #128
 1790 0054 8900     		lsls	r1, r1, #2
 1791 0056 0143     		orrs	r1, r0
 1792 0058 D960     		str	r1, [r3, #12]
 156:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1793              		.loc 1 156 3 view .LVU482
 156:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1794              		.loc 1 156 13 is_stmt 0 view .LVU483
 1795 005a 126B     		ldr	r2, [r2, #48]
 156:Src/main.c    ****   __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_CC4);
 1796              		.loc 1 156 48 view .LVU484
 1797 005c 1E49     		ldr	r1, .L63+16
 1798 005e 9162     		str	r1, [r2, #40]
 157:Src/main.c    **** 
 1799              		.loc 1 157 3 is_stmt 1 view .LVU485
 1800 0060 D968     		ldr	r1, [r3, #12]
 1801 0062 8022     		movs	r2, #128
 1802 0064 5201     		lsls	r2, r2, #5
 1803 0066 0A43     		orrs	r2, r1
 1804 0068 DA60     		str	r2, [r3, #12]
 159:Src/main.c    ****   while (1)
 1805              		.loc 1 159 3 view .LVU486
 1806              	.LVL105:
 1807              	.L57:
 160:Src/main.c    ****   {
 1808              		.loc 1 160 3 view .LVU487
 162:Src/main.c    ****     if(HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin)) {
 1809              		.loc 1 162 5 view .LVU488
 1810 006a 174C     		ldr	r4, .L63
ARM GAS  /tmp/ccnUMBHt.s 			page 68


 1811 006c 0122     		movs	r2, #1
 1812 006e 0221     		movs	r1, #2
 1813 0070 2000     		movs	r0, r4
 1814 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1815              	.LVL106:
 163:Src/main.c    ****       //for (int row=0; row<2; row++) {
 1816              		.loc 1 163 5 view .LVU489
 163:Src/main.c    ****       //for (int row=0; row<2; row++) {
 1817              		.loc 1 163 8 is_stmt 0 view .LVU490
 1818 0076 8021     		movs	r1, #128
 1819 0078 4900     		lsls	r1, r1, #1
 1820 007a 2000     		movs	r0, r4
 1821 007c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1822              	.LVL107:
 163:Src/main.c    ****       //for (int row=0; row<2; row++) {
 1823              		.loc 1 163 7 view .LVU491
 1824 0080 0028     		cmp	r0, #0
 1825 0082 F2D0     		beq	.L57
 1826              	.LBB32:
 165:Src/main.c    ****         clearWav(my_data_buf,data_len);
 1827              		.loc 1 165 18 view .LVU492
 1828 0084 0024     		movs	r4, #0
 1829 0086 07E0     		b	.L56
 1830              	.LVL108:
 1831              	.L59:
 1832              	.LBB33:
 176:Src/main.c    ****           }
 1833              		.loc 1 176 11 is_stmt 1 view .LVU493
 1834 0088 0120     		movs	r0, #1
 1835 008a FFF7FEFF 		bl	HAL_Delay
 1836              	.LVL109:
 1837              	.L58:
 175:Src/main.c    ****           HAL_Delay(1);
 1838              		.loc 1 175 15 is_stmt 0 view .LVU494
 1839 008e 134B     		ldr	r3, .L63+20
 1840 0090 1B78     		ldrb	r3, [r3]
 175:Src/main.c    ****           HAL_Delay(1);
 1841              		.loc 1 175 14 view .LVU495
 1842 0092 002B     		cmp	r3, #0
 1843 0094 F8D1     		bne	.L59
 1844              	.LBE33:
 165:Src/main.c    ****         clearWav(my_data_buf,data_len);
 1845              		.loc 1 165 31 discriminator 2 view .LVU496
 1846 0096 0134     		adds	r4, r4, #1
 1847              	.LVL110:
 1848              	.L56:
 165:Src/main.c    ****         clearWav(my_data_buf,data_len);
 1849              		.loc 1 165 9 discriminator 1 view .LVU497
 1850 0098 A72C     		cmp	r4, #167
 1851 009a E6DC     		bgt	.L57
 1852              	.LBB34:
 166:Src/main.c    **** 
 1853              		.loc 1 166 9 is_stmt 1 view .LVU498
 1854 009c 0B4D     		ldr	r5, .L63+4
 1855 009e F021     		movs	r1, #240
 1856 00a0 2800     		movs	r0, r5
 1857 00a2 FFF7FEFF 		bl	clearWav
ARM GAS  /tmp/ccnUMBHt.s 			page 69


 1858              	.LVL111:
 169:Src/main.c    **** 
 1859              		.loc 1 169 9 view .LVU499
 1860 00a6 0022     		movs	r2, #0
 1861 00a8 2100     		movs	r1, r4
 1862 00aa 2800     		movs	r0, r5
 1863 00ac FFF7FEFF 		bl	printcart_fire_nozzle_color
 1864              	.LVL112:
 171:Src/main.c    ****         lock = 1;
 1865              		.loc 1 171 9 view .LVU500
 1866 00b0 0122     		movs	r2, #1
 1867 00b2 0121     		movs	r1, #1
 1868 00b4 0448     		ldr	r0, .L63
 1869 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1870              	.LVL113:
 172:Src/main.c    ****         startDMA();
 1871              		.loc 1 172 9 view .LVU501
 172:Src/main.c    ****         startDMA();
 1872              		.loc 1 172 14 is_stmt 0 view .LVU502
 1873 00ba 084B     		ldr	r3, .L63+20
 1874 00bc 0122     		movs	r2, #1
 1875 00be 1A70     		strb	r2, [r3]
 173:Src/main.c    ****         //HAL_Delay(10);
 1876              		.loc 1 173 9 is_stmt 1 view .LVU503
 1877 00c0 FFF7FEFF 		bl	startDMA
 1878              	.LVL114:
 175:Src/main.c    ****           HAL_Delay(1);
 1879              		.loc 1 175 9 view .LVU504
 175:Src/main.c    ****           HAL_Delay(1);
 1880              		.loc 1 175 14 is_stmt 0 view .LVU505
 1881 00c4 E3E7     		b	.L58
 1882              	.L64:
 1883 00c6 C046     		.align	2
 1884              	.L63:
 1885 00c8 00040048 		.word	1207960576
 1886 00cc 00000000 		.word	my_data_buf
 1887 00d0 00000000 		.word	htim2
 1888 00d4 00000000 		.word	dataTransmittedHandler0
 1889 00d8 00000000 		.word	dataTransmittedHandler2
 1890 00dc 00000000 		.word	.LANCHOR0
 1891              	.LBE34:
 1892              	.LBE32:
 1893              		.cfi_endproc
 1894              	.LFE40:
 1896              		.section	.text.Error_Handler,"ax",%progbits
 1897              		.align	1
 1898              		.global	Error_Handler
 1899              		.syntax unified
 1900              		.code	16
 1901              		.thumb_func
 1902              		.fpu softvfp
 1904              	Error_Handler:
 1905              	.LFB52:
 477:Src/main.c    **** 
 478:Src/main.c    **** void Error_Handler(void)
 479:Src/main.c    **** {
 1906              		.loc 1 479 1 is_stmt 1 view -0
ARM GAS  /tmp/ccnUMBHt.s 			page 70


 1907              		.cfi_startproc
 1908              		@ args = 0, pretend = 0, frame = 0
 1909              		@ frame_needed = 0, uses_anonymous_args = 0
 1910              		@ link register save eliminated.
 480:Src/main.c    **** 
 481:Src/main.c    **** }
 1911              		.loc 1 481 1 view .LVU507
 1912              		@ sp needed
 1913 0000 7047     		bx	lr
 1914              		.cfi_endproc
 1915              	.LFE52:
 1917              		.global	ni
 1918              		.global	lock
 1919              		.comm	my_data_buf,480,4
 1920              		.global	PER
 1921              		.comm	hdma_tim2_uev,68,4
 1922              		.comm	hdma_usart3_tx,68,4
 1923              		.comm	hdma_usart3_rx,68,4
 1924              		.comm	huart3,112,4
 1925              		.comm	hdma_tim2_ch3,68,4
 1926              		.comm	hdma_tim2_ch4,68,4
 1927              		.comm	hdma_tim2_ch1,68,4
 1928              		.comm	htim3,64,4
 1929              		.comm	htim2,64,4
 1930              		.comm	htim1,64,4
 1931              		.section	.rodata
 1932              		.align	2
 1933              		.set	.LANCHOR2,. + 128
 1934              	.LC0:
 1935 0000 08000000 		.word	8
 1936 0004 0D000000 		.word	13
 1937 0008 04000000 		.word	4
 1938 000c 09000000 		.word	9
 1939 0010 00000000 		.word	0
 1940 0014 05000000 		.word	5
 1941 0018 0A000000 		.word	10
 1942 001c 01000000 		.word	1
 1943 0020 06000000 		.word	6
 1944 0024 0B000000 		.word	11
 1945 0028 02000000 		.word	2
 1946 002c 07000000 		.word	7
 1947 0030 0C000000 		.word	12
 1948 0034 03000000 		.word	3
 1949 0038 0B000000 		.word	11
 1950 003c 02000000 		.word	2
 1951 0040 07000000 		.word	7
 1952 0044 0C000000 		.word	12
 1953 0048 03000000 		.word	3
 1954 004c 08000000 		.word	8
 1955 0050 0D000000 		.word	13
 1956 0054 04000000 		.word	4
 1957 0058 09000000 		.word	9
 1958 005c 00000000 		.word	0
 1959 0060 05000000 		.word	5
 1960 0064 0A000000 		.word	10
 1961 0068 01000000 		.word	1
 1962 006c 06000000 		.word	6
ARM GAS  /tmp/ccnUMBHt.s 			page 71


 1963 0070 00000000 		.word	0
 1964 0074 05000000 		.word	5
 1965 0078 0A000000 		.word	10
 1966 007c 01000000 		.word	1
 1967 0080 06000000 		.word	6
 1968 0084 0B000000 		.word	11
 1969 0088 02000000 		.word	2
 1970 008c 07000000 		.word	7
 1971 0090 0C000000 		.word	12
 1972 0094 03000000 		.word	3
 1973 0098 08000000 		.word	8
 1974 009c 0D000000 		.word	13
 1975 00a0 04000000 		.word	4
 1976 00a4 09000000 		.word	9
 1977              	.LC1:
 1978 00a8 04000000 		.word	4
 1979 00ac 0C000000 		.word	12
 1980 00b0 0A000000 		.word	10
 1981 00b4 02000000 		.word	2
 1982 00b8 08000000 		.word	8
 1983 00bc 00000000 		.word	0
 1984 00c0 06000000 		.word	6
 1985 00c4 0D000000 		.word	13
 1986 00c8 07000000 		.word	7
 1987 00cc 01000000 		.word	1
 1988 00d0 09000000 		.word	9
 1989 00d4 03000000 		.word	3
 1990 00d8 0B000000 		.word	11
 1991 00dc 05000000 		.word	5
 1992 00e0 0D000000 		.word	13
 1993 00e4 07000000 		.word	7
 1994 00e8 01000000 		.word	1
 1995 00ec 09000000 		.word	9
 1996 00f0 03000000 		.word	3
 1997 00f4 0B000000 		.word	11
 1998 00f8 05000000 		.word	5
 1999 00fc 04000000 		.word	4
 2000 0100 0C000000 		.word	12
 2001 0104 0A000000 		.word	10
 2002 0108 02000000 		.word	2
 2003 010c 08000000 		.word	8
 2004 0110 00000000 		.word	0
 2005 0114 06000000 		.word	6
 2006              		.section	.bss.lock,"aw",%nobits
 2007              		.set	.LANCHOR0,. + 0
 2010              	lock:
 2011 0000 00       		.space	1
 2012              		.section	.data.PER,"aw"
 2013              		.align	1
 2014              		.set	.LANCHOR1,. + 0
 2017              	PER:
 2018 0000 3C00     		.short	60
 2019              		.section	.rodata.ni,"a"
 2020              		.align	2
 2023              	ni:
 2024 0000 02000000 		.word	2
 2025 0004 00000000 		.word	0
ARM GAS  /tmp/ccnUMBHt.s 			page 72


 2026 0008 01000000 		.word	1
 2027 000c 02000000 		.word	2
 2028 0010 01000000 		.word	1
 2029 0014 01000000 		.word	1
 2030 0018 01000000 		.word	1
 2031 001c 00000000 		.word	0
 2032 0020 01000000 		.word	1
 2033 0024 01000000 		.word	1
 2034 0028 01000000 		.word	1
 2035 002c 01000000 		.word	1
 2036 0030 00000000 		.word	0
 2037 0034 00000000 		.word	0
 2038 0038 01000000 		.word	1
 2039 003c 00000000 		.word	0
 2040 0040 01000000 		.word	1
 2041 0044 01000000 		.word	1
 2042 0048 02000000 		.word	2
 2043 004c 04000000 		.word	4
 2044 0050 01000000 		.word	1
 2045 0054 02000000 		.word	2
 2046 0058 05000000 		.word	5
 2047 005c 01000000 		.word	1
 2048 0060 01000000 		.word	1
 2049 0064 04000000 		.word	4
 2050 0068 01000000 		.word	1
 2051 006c 01000000 		.word	1
 2052 0070 05000000 		.word	5
 2053 0074 01000000 		.word	1
 2054 0078 00000000 		.word	0
 2055 007c 04000000 		.word	4
 2056 0080 01000000 		.word	1
 2057 0084 00000000 		.word	0
 2058 0088 05000000 		.word	5
 2059 008c 01000000 		.word	1
 2060 0090 02000000 		.word	2
 2061 0094 02000000 		.word	2
 2062 0098 00000000 		.word	0
 2063 009c 02000000 		.word	2
 2064 00a0 03000000 		.word	3
 2065 00a4 00000000 		.word	0
 2066 00a8 01000000 		.word	1
 2067 00ac 02000000 		.word	2
 2068 00b0 00000000 		.word	0
 2069 00b4 01000000 		.word	1
 2070 00b8 03000000 		.word	3
 2071 00bc 00000000 		.word	0
 2072 00c0 00000000 		.word	0
 2073 00c4 02000000 		.word	2
 2074 00c8 00000000 		.word	0
 2075 00cc 00000000 		.word	0
 2076 00d0 03000000 		.word	3
 2077 00d4 00000000 		.word	0
 2078 00d8 02000000 		.word	2
 2079 00dc 06000000 		.word	6
 2080 00e0 00000000 		.word	0
 2081 00e4 02000000 		.word	2
 2082 00e8 07000000 		.word	7
ARM GAS  /tmp/ccnUMBHt.s 			page 73


 2083 00ec 00000000 		.word	0
 2084 00f0 01000000 		.word	1
 2085 00f4 06000000 		.word	6
 2086 00f8 00000000 		.word	0
 2087 00fc 01000000 		.word	1
 2088 0100 07000000 		.word	7
 2089 0104 00000000 		.word	0
 2090 0108 00000000 		.word	0
 2091 010c 06000000 		.word	6
 2092 0110 00000000 		.word	0
 2093 0114 00000000 		.word	0
 2094 0118 07000000 		.word	7
 2095 011c 00000000 		.word	0
 2096              		.text
 2097              	.Letext0:
 2098              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2099              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2100              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2101              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2102              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 2103              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 2104              		.file 10 "/usr/lib/gcc/arm-none-eabi/9.1.0/include/stddef.h"
 2105              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 2106              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2107              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2108              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2109              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2110              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2111              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2112              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2113              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_uart.h"
 2114              		.file 20 "/usr/arm-none-eabi/include/stdlib.h"
 2115              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 2116              		.file 22 "<built-in>"
 2117              		.file 23 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2118              		.file 24 "Inc/usb_device.h"
ARM GAS  /tmp/ccnUMBHt.s 			page 74


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccnUMBHt.s:16     .text.dataTransmittedHandler0:0000000000000000 $t
     /tmp/ccnUMBHt.s:24     .text.dataTransmittedHandler0:0000000000000000 dataTransmittedHandler0
     /tmp/ccnUMBHt.s:57     .text.dataTransmittedHandler0:0000000000000018 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccnUMBHt.s:63     .text.dataTransmittedHandler2:0000000000000000 $t
     /tmp/ccnUMBHt.s:70     .text.dataTransmittedHandler2:0000000000000000 dataTransmittedHandler2
     /tmp/ccnUMBHt.s:120    .text.dataTransmittedHandler2:0000000000000034 $d
     /tmp/ccnUMBHt.s:128    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccnUMBHt.s:134    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccnUMBHt.s:358    .text.MX_GPIO_Init:00000000000000fc $d
     /tmp/ccnUMBHt.s:367    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccnUMBHt.s:373    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccnUMBHt.s:429    .text.MX_DMA_Init:000000000000003c $d
     /tmp/ccnUMBHt.s:434    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccnUMBHt.s:440    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccnUMBHt.s:532    .text.MX_TIM1_Init:000000000000004c $d
                            *COM*:0000000000000040 htim1
     /tmp/ccnUMBHt.s:539    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccnUMBHt.s:545    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccnUMBHt.s:712    .text.MX_TIM2_Init:00000000000000b8 $d
     /tmp/ccnUMBHt.s:718    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccnUMBHt.s:724    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccnUMBHt.s:780    .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000070 huart3
     /tmp/ccnUMBHt.s:786    .text.dfu_otter_bootloader:0000000000000000 $t
     /tmp/ccnUMBHt.s:793    .text.dfu_otter_bootloader:0000000000000000 dfu_otter_bootloader
     /tmp/ccnUMBHt.s:864    .text.dfu_otter_bootloader:0000000000000018 $d
     /tmp/ccnUMBHt.s:878    .text.printcart_fire_nozzle_color:0000000000000000 $t
     /tmp/ccnUMBHt.s:885    .text.printcart_fire_nozzle_color:0000000000000000 printcart_fire_nozzle_color
     /tmp/ccnUMBHt.s:975    .text.printcart_fire_nozzle_color:000000000000004c $d
     /tmp/ccnUMBHt.s:980    .text.printcart_fire_nozzle_black:0000000000000000 $t
     /tmp/ccnUMBHt.s:987    .text.printcart_fire_nozzle_black:0000000000000000 printcart_fire_nozzle_black
     /tmp/ccnUMBHt.s:1100   .text.printcart_fire_nozzle_black:000000000000006c $d
     /tmp/ccnUMBHt.s:2023   .rodata.ni:0000000000000000 ni
     /tmp/ccnUMBHt.s:1106   .text.setRow:0000000000000000 $t
     /tmp/ccnUMBHt.s:1113   .text.setRow:0000000000000000 setRow
     /tmp/ccnUMBHt.s:1196   .text.setRow:0000000000000038 $d
                            *COM*:00000000000001e0 my_data_buf
     /tmp/ccnUMBHt.s:1202   .text.clearWav:0000000000000000 $t
     /tmp/ccnUMBHt.s:1209   .text.clearWav:0000000000000000 clearWav
     /tmp/ccnUMBHt.s:1485   .text.clearWav:0000000000000118 $d
     /tmp/ccnUMBHt.s:1515   .text.startDMA:0000000000000000 $t
     /tmp/ccnUMBHt.s:1522   .text.startDMA:0000000000000000 startDMA
     /tmp/ccnUMBHt.s:1600   .text.startDMA:0000000000000058 $d
     /tmp/ccnUMBHt.s:1608   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccnUMBHt.s:1615   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccnUMBHt.s:1710   .text.main:0000000000000000 $t
     /tmp/ccnUMBHt.s:1717   .text.main:0000000000000000 main
     /tmp/ccnUMBHt.s:1885   .text.main:00000000000000c8 $d
     /tmp/ccnUMBHt.s:1897   .text.Error_Handler:0000000000000000 $t
     /tmp/ccnUMBHt.s:1904   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccnUMBHt.s:2010   .bss.lock:0000000000000000 lock
     /tmp/ccnUMBHt.s:2017   .data.PER:0000000000000000 PER
                            *COM*:0000000000000044 hdma_tim2_uev
                            *COM*:0000000000000044 hdma_usart3_tx
ARM GAS  /tmp/ccnUMBHt.s 			page 75


                            *COM*:0000000000000044 hdma_usart3_rx
                            *COM*:0000000000000044 hdma_tim2_ch3
                            *COM*:0000000000000044 hdma_tim2_ch4
                            *COM*:0000000000000044 hdma_tim2_ch1
                            *COM*:0000000000000040 htim3
     /tmp/ccnUMBHt.s:1932   .rodata:0000000000000000 $d
     /tmp/ccnUMBHt.s:2011   .bss.lock:0000000000000000 $d
     /tmp/ccnUMBHt.s:2013   .data.PER:0000000000000000 $d
     /tmp/ccnUMBHt.s:2020   .rodata.ni:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_TIM_PWM_Stop
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_TIM_Encoder_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_uidiv
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_UART_Init
__aeabi_idivmod
__aeabi_idiv
memcpy
HAL_DMA_GetState
HAL_DMA_Start_IT
HAL_TIM_PWM_Start
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_USB_DEVICE_Init
HAL_GPIO_ReadPin
HAL_Delay
